// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: base_event_format.proto

package events

import (
	gateway "github.com/peaqnetwork/peaq-network-ev-charging-message-format/golang/gateway"
	message "github.com/peaqnetwork/peaq-network-ev-charging-message-format/golang/message"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Events types
type EventType int32

const (
	EventType_CHARGING_STATUS      EventType = 0
	EventType_SERVICE_REQUEST_ACK  EventType = 1
	EventType_SERVICE_DELIVERY_ACK EventType = 2
	EventType_SERVICE_REQUESTED    EventType = 3
	EventType_SERVICE_DELIVERED    EventType = 4
	EventType_STOP_CHARGE_REQUEST  EventType = 5
	EventType_STOP_CHARGE_RESPONSE EventType = 6
	EventType_IDENTITY_CHALLENGE   EventType = 7
	EventType_IDENTITY_RESPONSE    EventType = 8
	// For substarte's event
	EventType_RECEIVE_CHAIN_EVENT EventType = 9
	// For simulator log
	EventType_EMIT_SHOW_INFO EventType = 10
	// For simulator actions
	EventType_GET_BALANCE       EventType = 11
	EventType_GET_BALANCE_ACK   EventType = 12
	EventType_GET_PK            EventType = 13
	EventType_GET_PK_ACK        EventType = 14
	EventType_REPUBLISH_DID     EventType = 15
	EventType_REPUBLISH_DID_ACK EventType = 16
	EventType_RECONNECT         EventType = 17
	EventType_RECONNECT_ACK     EventType = 18
	// For charmev actions
	EventType_PEER_CONNECTED           EventType = 19
	EventType_PEER_SUBSCRIBED          EventType = 20
	EventType_PEER_CONNECTION_FAILED   EventType = 21
	EventType_PEER_SUBSCRIPTION_FAILED EventType = 22
	// Charge point gateway events
	EventType_BOOT_NOTIFICATION_REQUEST        EventType = 23
	EventType_LOG                              EventType = 24
	EventType_AUTHORIZE_REQUEST                EventType = 25
	EventType_AUTHORIZE_RESPONSE               EventType = 26
	EventType_CHECK_AVAILABILITY_REQUEST       EventType = 27
	EventType_CHECK_AVAILABILITY_RESPONSE      EventType = 28
	EventType_START_CHARGE_REQUEST             EventType = 29
	EventType_START_CHARGE_RESPONSE            EventType = 30
	EventType_EV_CHARGE_STATUS                 EventType = 31
	EventType_NOTIFY_CHARGE_POINT_STATE_CHANGE EventType = 32
	EventType_STOP_TRANSACTION_REQUEST         EventType = 33
	EventType_STOP_TRANSACTION_RESPONSE        EventType = 34
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "CHARGING_STATUS",
		1:  "SERVICE_REQUEST_ACK",
		2:  "SERVICE_DELIVERY_ACK",
		3:  "SERVICE_REQUESTED",
		4:  "SERVICE_DELIVERED",
		5:  "STOP_CHARGE_REQUEST",
		6:  "STOP_CHARGE_RESPONSE",
		7:  "IDENTITY_CHALLENGE",
		8:  "IDENTITY_RESPONSE",
		9:  "RECEIVE_CHAIN_EVENT",
		10: "EMIT_SHOW_INFO",
		11: "GET_BALANCE",
		12: "GET_BALANCE_ACK",
		13: "GET_PK",
		14: "GET_PK_ACK",
		15: "REPUBLISH_DID",
		16: "REPUBLISH_DID_ACK",
		17: "RECONNECT",
		18: "RECONNECT_ACK",
		19: "PEER_CONNECTED",
		20: "PEER_SUBSCRIBED",
		21: "PEER_CONNECTION_FAILED",
		22: "PEER_SUBSCRIPTION_FAILED",
		23: "BOOT_NOTIFICATION_REQUEST",
		24: "LOG",
		25: "AUTHORIZE_REQUEST",
		26: "AUTHORIZE_RESPONSE",
		27: "CHECK_AVAILABILITY_REQUEST",
		28: "CHECK_AVAILABILITY_RESPONSE",
		29: "START_CHARGE_REQUEST",
		30: "START_CHARGE_RESPONSE",
		31: "EV_CHARGE_STATUS",
		32: "NOTIFY_CHARGE_POINT_STATE_CHANGE",
		33: "STOP_TRANSACTION_REQUEST",
		34: "STOP_TRANSACTION_RESPONSE",
	}
	EventType_value = map[string]int32{
		"CHARGING_STATUS":                  0,
		"SERVICE_REQUEST_ACK":              1,
		"SERVICE_DELIVERY_ACK":             2,
		"SERVICE_REQUESTED":                3,
		"SERVICE_DELIVERED":                4,
		"STOP_CHARGE_REQUEST":              5,
		"STOP_CHARGE_RESPONSE":             6,
		"IDENTITY_CHALLENGE":               7,
		"IDENTITY_RESPONSE":                8,
		"RECEIVE_CHAIN_EVENT":              9,
		"EMIT_SHOW_INFO":                   10,
		"GET_BALANCE":                      11,
		"GET_BALANCE_ACK":                  12,
		"GET_PK":                           13,
		"GET_PK_ACK":                       14,
		"REPUBLISH_DID":                    15,
		"REPUBLISH_DID_ACK":                16,
		"RECONNECT":                        17,
		"RECONNECT_ACK":                    18,
		"PEER_CONNECTED":                   19,
		"PEER_SUBSCRIBED":                  20,
		"PEER_CONNECTION_FAILED":           21,
		"PEER_SUBSCRIPTION_FAILED":         22,
		"BOOT_NOTIFICATION_REQUEST":        23,
		"LOG":                              24,
		"AUTHORIZE_REQUEST":                25,
		"AUTHORIZE_RESPONSE":               26,
		"CHECK_AVAILABILITY_REQUEST":       27,
		"CHECK_AVAILABILITY_RESPONSE":      28,
		"START_CHARGE_REQUEST":             29,
		"START_CHARGE_RESPONSE":            30,
		"EV_CHARGE_STATUS":                 31,
		"NOTIFY_CHARGE_POINT_STATE_CHANGE": 32,
		"STOP_TRANSACTION_REQUEST":         33,
		"STOP_TRANSACTION_RESPONSE":        34,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_event_format_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_base_event_format_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_base_event_format_proto_rawDescGZIP(), []int{0}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId EventType `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3,enum=events.EventType" json:"event_id,omitempty"`
	// Types that are assignable to Data:
	//	*Event_ChargingStatusData
	//	*Event_ServiceAckData
	//	*Event_ServiceRequestedData
	//	*Event_ServiceDeliveredData
	//	*Event_StopChargeData
	//	*Event_StopChargeRespData
	//	*Event_IdentityChallengeData
	//	*Event_IdentityResponseData
	//	*Event_ChainEventData
	//	*Event_EmitShowInfoData
	//	*Event_GetBalanceAckData
	//	*Event_GetPkAckData
	//	*Event_RepublishAckData
	//	*Event_ReconnectAckData
	//	*Event_ServiceRequestedAckData
	//	*Event_BootNotificationRequestData
	//	*Event_LogData
	//	*Event_AuthorizeRequestData
	//	*Event_AuthorizeResponseData
	//	*Event_CheckAvailabilityRequestData
	//	*Event_CheckAvailabilityResponseData
	//	*Event_StartChargeRequestData
	//	*Event_StartChargeResponseData
	//	*Event_EvChargeStatusData
	//	*Event_StopTransactionRequestData
	//	*Event_StopTransactionResponseData
	//	*Event_NotifyChargePointStateChangeData
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_event_format_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_base_event_format_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_base_event_format_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetEventId() EventType {
	if x != nil {
		return x.EventId
	}
	return EventType_CHARGING_STATUS
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetChargingStatusData() *message.ChargingStatusData {
	if x, ok := x.GetData().(*Event_ChargingStatusData); ok {
		return x.ChargingStatusData
	}
	return nil
}

func (x *Event) GetServiceAckData() *message.ServiceAckData {
	if x, ok := x.GetData().(*Event_ServiceAckData); ok {
		return x.ServiceAckData
	}
	return nil
}

func (x *Event) GetServiceRequestedData() *message.ServiceRequestedData {
	if x, ok := x.GetData().(*Event_ServiceRequestedData); ok {
		return x.ServiceRequestedData
	}
	return nil
}

func (x *Event) GetServiceDeliveredData() *message.ServiceDeliveredData {
	if x, ok := x.GetData().(*Event_ServiceDeliveredData); ok {
		return x.ServiceDeliveredData
	}
	return nil
}

func (x *Event) GetStopChargeData() *message.StopChargeData {
	if x, ok := x.GetData().(*Event_StopChargeData); ok {
		return x.StopChargeData
	}
	return nil
}

func (x *Event) GetStopChargeRespData() *message.StopChargeResponseData {
	if x, ok := x.GetData().(*Event_StopChargeRespData); ok {
		return x.StopChargeRespData
	}
	return nil
}

func (x *Event) GetIdentityChallengeData() *message.IdentityChallengeData {
	if x, ok := x.GetData().(*Event_IdentityChallengeData); ok {
		return x.IdentityChallengeData
	}
	return nil
}

func (x *Event) GetIdentityResponseData() *message.IdentityResponseData {
	if x, ok := x.GetData().(*Event_IdentityResponseData); ok {
		return x.IdentityResponseData
	}
	return nil
}

func (x *Event) GetChainEventData() *message.ChainEventData {
	if x, ok := x.GetData().(*Event_ChainEventData); ok {
		return x.ChainEventData
	}
	return nil
}

func (x *Event) GetEmitShowInfoData() *message.EmitShowInfoData {
	if x, ok := x.GetData().(*Event_EmitShowInfoData); ok {
		return x.EmitShowInfoData
	}
	return nil
}

func (x *Event) GetGetBalanceAckData() *message.GetBalanceAckData {
	if x, ok := x.GetData().(*Event_GetBalanceAckData); ok {
		return x.GetBalanceAckData
	}
	return nil
}

func (x *Event) GetGetPkAckData() *message.GetPKAckData {
	if x, ok := x.GetData().(*Event_GetPkAckData); ok {
		return x.GetPkAckData
	}
	return nil
}

func (x *Event) GetRepublishAckData() *message.RePublishDIDAckData {
	if x, ok := x.GetData().(*Event_RepublishAckData); ok {
		return x.RepublishAckData
	}
	return nil
}

func (x *Event) GetReconnectAckData() *message.ReconnectAckData {
	if x, ok := x.GetData().(*Event_ReconnectAckData); ok {
		return x.ReconnectAckData
	}
	return nil
}

func (x *Event) GetServiceRequestedAckData() *message.ServiceRequestedAckData {
	if x, ok := x.GetData().(*Event_ServiceRequestedAckData); ok {
		return x.ServiceRequestedAckData
	}
	return nil
}

func (x *Event) GetBootNotificationRequestData() *gateway.BootNotificationRequestData {
	if x, ok := x.GetData().(*Event_BootNotificationRequestData); ok {
		return x.BootNotificationRequestData
	}
	return nil
}

func (x *Event) GetLogData() *gateway.LogData {
	if x, ok := x.GetData().(*Event_LogData); ok {
		return x.LogData
	}
	return nil
}

func (x *Event) GetAuthorizeRequestData() *gateway.AuthorizeRequestData {
	if x, ok := x.GetData().(*Event_AuthorizeRequestData); ok {
		return x.AuthorizeRequestData
	}
	return nil
}

func (x *Event) GetAuthorizeResponseData() *gateway.AuthorizeResponseData {
	if x, ok := x.GetData().(*Event_AuthorizeResponseData); ok {
		return x.AuthorizeResponseData
	}
	return nil
}

func (x *Event) GetCheckAvailabilityRequestData() *gateway.CheckAvailabilityRequestData {
	if x, ok := x.GetData().(*Event_CheckAvailabilityRequestData); ok {
		return x.CheckAvailabilityRequestData
	}
	return nil
}

func (x *Event) GetCheckAvailabilityResponseData() *gateway.CheckAvailabilityResponseData {
	if x, ok := x.GetData().(*Event_CheckAvailabilityResponseData); ok {
		return x.CheckAvailabilityResponseData
	}
	return nil
}

func (x *Event) GetStartChargeRequestData() *gateway.StartChargeRequestData {
	if x, ok := x.GetData().(*Event_StartChargeRequestData); ok {
		return x.StartChargeRequestData
	}
	return nil
}

func (x *Event) GetStartChargeResponseData() *gateway.StartChargeResponseData {
	if x, ok := x.GetData().(*Event_StartChargeResponseData); ok {
		return x.StartChargeResponseData
	}
	return nil
}

func (x *Event) GetEvChargeStatusData() *gateway.EVChargingStatusData {
	if x, ok := x.GetData().(*Event_EvChargeStatusData); ok {
		return x.EvChargeStatusData
	}
	return nil
}

func (x *Event) GetStopTransactionRequestData() *gateway.StopTransactionRequestData {
	if x, ok := x.GetData().(*Event_StopTransactionRequestData); ok {
		return x.StopTransactionRequestData
	}
	return nil
}

func (x *Event) GetStopTransactionResponseData() *gateway.StopTransactionResponseData {
	if x, ok := x.GetData().(*Event_StopTransactionResponseData); ok {
		return x.StopTransactionResponseData
	}
	return nil
}

func (x *Event) GetNotifyChargePointStateChangeData() *gateway.NotifyChargePointStateChangeData {
	if x, ok := x.GetData().(*Event_NotifyChargePointStateChangeData); ok {
		return x.NotifyChargePointStateChangeData
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_ChargingStatusData struct {
	ChargingStatusData *message.ChargingStatusData `protobuf:"bytes,2,opt,name=charging_status_data,json=chargingStatusData,proto3,oneof"`
}

type Event_ServiceAckData struct {
	ServiceAckData *message.ServiceAckData `protobuf:"bytes,3,opt,name=service_ack_data,json=serviceAckData,proto3,oneof"`
}

type Event_ServiceRequestedData struct {
	ServiceRequestedData *message.ServiceRequestedData `protobuf:"bytes,4,opt,name=service_requested_data,json=serviceRequestedData,proto3,oneof"`
}

type Event_ServiceDeliveredData struct {
	ServiceDeliveredData *message.ServiceDeliveredData `protobuf:"bytes,5,opt,name=service_delivered_data,json=serviceDeliveredData,proto3,oneof"`
}

type Event_StopChargeData struct {
	StopChargeData *message.StopChargeData `protobuf:"bytes,6,opt,name=stop_charge_data,json=stopChargeData,proto3,oneof"`
}

type Event_StopChargeRespData struct {
	StopChargeRespData *message.StopChargeResponseData `protobuf:"bytes,7,opt,name=stop_charge_resp_data,json=stopChargeRespData,proto3,oneof"`
}

type Event_IdentityChallengeData struct {
	IdentityChallengeData *message.IdentityChallengeData `protobuf:"bytes,8,opt,name=identity_challenge_data,json=identityChallengeData,proto3,oneof"`
}

type Event_IdentityResponseData struct {
	IdentityResponseData *message.IdentityResponseData `protobuf:"bytes,9,opt,name=identity_response_data,json=identityResponseData,proto3,oneof"`
}

type Event_ChainEventData struct {
	ChainEventData *message.ChainEventData `protobuf:"bytes,10,opt,name=chain_event_data,json=chainEventData,proto3,oneof"`
}

type Event_EmitShowInfoData struct {
	EmitShowInfoData *message.EmitShowInfoData `protobuf:"bytes,11,opt,name=emit_show_info_data,json=emitShowInfoData,proto3,oneof"`
}

type Event_GetBalanceAckData struct {
	GetBalanceAckData *message.GetBalanceAckData `protobuf:"bytes,12,opt,name=get_balance_ack_data,json=getBalanceAckData,proto3,oneof"`
}

type Event_GetPkAckData struct {
	GetPkAckData *message.GetPKAckData `protobuf:"bytes,13,opt,name=get_pk_ack_data,json=getPkAckData,proto3,oneof"`
}

type Event_RepublishAckData struct {
	RepublishAckData *message.RePublishDIDAckData `protobuf:"bytes,14,opt,name=republish_ack_data,json=republishAckData,proto3,oneof"`
}

type Event_ReconnectAckData struct {
	ReconnectAckData *message.ReconnectAckData `protobuf:"bytes,15,opt,name=reconnect_ack_data,json=reconnectAckData,proto3,oneof"`
}

type Event_ServiceRequestedAckData struct {
	ServiceRequestedAckData *message.ServiceRequestedAckData `protobuf:"bytes,16,opt,name=service_requested_ack_data,json=serviceRequestedAckData,proto3,oneof"`
}

type Event_BootNotificationRequestData struct {
	// Charge Point Gateway event data
	BootNotificationRequestData *gateway.BootNotificationRequestData `protobuf:"bytes,17,opt,name=boot_notification_request_data,json=bootNotificationRequestData,proto3,oneof"`
}

type Event_LogData struct {
	LogData *gateway.LogData `protobuf:"bytes,18,opt,name=log_data,json=logData,proto3,oneof"`
}

type Event_AuthorizeRequestData struct {
	AuthorizeRequestData *gateway.AuthorizeRequestData `protobuf:"bytes,19,opt,name=authorize_request_data,json=authorizeRequestData,proto3,oneof"`
}

type Event_AuthorizeResponseData struct {
	AuthorizeResponseData *gateway.AuthorizeResponseData `protobuf:"bytes,20,opt,name=authorize_response_data,json=authorizeResponseData,proto3,oneof"`
}

type Event_CheckAvailabilityRequestData struct {
	CheckAvailabilityRequestData *gateway.CheckAvailabilityRequestData `protobuf:"bytes,21,opt,name=check_availability_request_data,json=checkAvailabilityRequestData,proto3,oneof"`
}

type Event_CheckAvailabilityResponseData struct {
	CheckAvailabilityResponseData *gateway.CheckAvailabilityResponseData `protobuf:"bytes,22,opt,name=check_availability_response_data,json=checkAvailabilityResponseData,proto3,oneof"`
}

type Event_StartChargeRequestData struct {
	StartChargeRequestData *gateway.StartChargeRequestData `protobuf:"bytes,24,opt,name=start_charge_request_data,json=startChargeRequestData,proto3,oneof"`
}

type Event_StartChargeResponseData struct {
	StartChargeResponseData *gateway.StartChargeResponseData `protobuf:"bytes,25,opt,name=start_charge_response_data,json=startChargeResponseData,proto3,oneof"`
}

type Event_EvChargeStatusData struct {
	EvChargeStatusData *gateway.EVChargingStatusData `protobuf:"bytes,26,opt,name=ev_charge_status_data,json=evChargeStatusData,proto3,oneof"`
}

type Event_StopTransactionRequestData struct {
	StopTransactionRequestData *gateway.StopTransactionRequestData `protobuf:"bytes,27,opt,name=stop_transaction_request_data,json=stopTransactionRequestData,proto3,oneof"`
}

type Event_StopTransactionResponseData struct {
	StopTransactionResponseData *gateway.StopTransactionResponseData `protobuf:"bytes,28,opt,name=stop_transaction_response_data,json=stopTransactionResponseData,proto3,oneof"`
}

type Event_NotifyChargePointStateChangeData struct {
	NotifyChargePointStateChangeData *gateway.NotifyChargePointStateChangeData `protobuf:"bytes,29,opt,name=notify_charge_point_state_change_data,json=notifyChargePointStateChangeData,proto3,oneof"`
}

func (*Event_ChargingStatusData) isEvent_Data() {}

func (*Event_ServiceAckData) isEvent_Data() {}

func (*Event_ServiceRequestedData) isEvent_Data() {}

func (*Event_ServiceDeliveredData) isEvent_Data() {}

func (*Event_StopChargeData) isEvent_Data() {}

func (*Event_StopChargeRespData) isEvent_Data() {}

func (*Event_IdentityChallengeData) isEvent_Data() {}

func (*Event_IdentityResponseData) isEvent_Data() {}

func (*Event_ChainEventData) isEvent_Data() {}

func (*Event_EmitShowInfoData) isEvent_Data() {}

func (*Event_GetBalanceAckData) isEvent_Data() {}

func (*Event_GetPkAckData) isEvent_Data() {}

func (*Event_RepublishAckData) isEvent_Data() {}

func (*Event_ReconnectAckData) isEvent_Data() {}

func (*Event_ServiceRequestedAckData) isEvent_Data() {}

func (*Event_BootNotificationRequestData) isEvent_Data() {}

func (*Event_LogData) isEvent_Data() {}

func (*Event_AuthorizeRequestData) isEvent_Data() {}

func (*Event_AuthorizeResponseData) isEvent_Data() {}

func (*Event_CheckAvailabilityRequestData) isEvent_Data() {}

func (*Event_CheckAvailabilityResponseData) isEvent_Data() {}

func (*Event_StartChargeRequestData) isEvent_Data() {}

func (*Event_StartChargeResponseData) isEvent_Data() {}

func (*Event_EvChargeStatusData) isEvent_Data() {}

func (*Event_StopTransactionRequestData) isEvent_Data() {}

func (*Event_StopTransactionResponseData) isEvent_Data() {}

func (*Event_NotifyChargePointStateChangeData) isEvent_Data() {}

var File_base_event_format_proto protoreflect.FileDescriptor

var file_base_event_format_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x32, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3,
	0x12, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x32, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x6f,
	0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x15, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x32, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x32, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x4b, 0x41,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x50, 0x6b, 0x41,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x49, 0x44, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x32,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x1e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x6f,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x55, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6e, 0x0a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x71, 0x0a, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5f, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x76, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x56, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x12, 0x65, 0x76, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6b, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x1b, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x7c,
	0x0a, 0x25, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x2a, 0xc7, 0x06, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0c, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4b, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54,
	0x5f, 0x50, 0x4b, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x4b, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4f, 0x4f, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x1a, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1b, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x1c,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x20, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x21, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x22, 0x42, 0x55,
	0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x61,
	0x71, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x65, 0x61, 0x71, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x65, 0x76, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_event_format_proto_rawDescOnce sync.Once
	file_base_event_format_proto_rawDescData = file_base_event_format_proto_rawDesc
)

func file_base_event_format_proto_rawDescGZIP() []byte {
	file_base_event_format_proto_rawDescOnce.Do(func() {
		file_base_event_format_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_event_format_proto_rawDescData)
	})
	return file_base_event_format_proto_rawDescData
}

var file_base_event_format_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_base_event_format_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_base_event_format_proto_goTypes = []interface{}{
	(EventType)(0),                                   // 0: events.EventType
	(*Event)(nil),                                    // 1: events.Event
	(*message.ChargingStatusData)(nil),               // 2: p2p.ChargingStatusData
	(*message.ServiceAckData)(nil),                   // 3: p2p.ServiceAckData
	(*message.ServiceRequestedData)(nil),             // 4: p2p.ServiceRequestedData
	(*message.ServiceDeliveredData)(nil),             // 5: p2p.ServiceDeliveredData
	(*message.StopChargeData)(nil),                   // 6: p2p.StopChargeData
	(*message.StopChargeResponseData)(nil),           // 7: p2p.StopChargeResponseData
	(*message.IdentityChallengeData)(nil),            // 8: p2p.IdentityChallengeData
	(*message.IdentityResponseData)(nil),             // 9: p2p.IdentityResponseData
	(*message.ChainEventData)(nil),                   // 10: p2p.ChainEventData
	(*message.EmitShowInfoData)(nil),                 // 11: p2p.EmitShowInfoData
	(*message.GetBalanceAckData)(nil),                // 12: p2p.GetBalanceAckData
	(*message.GetPKAckData)(nil),                     // 13: p2p.GetPKAckData
	(*message.RePublishDIDAckData)(nil),              // 14: p2p.RePublishDIDAckData
	(*message.ReconnectAckData)(nil),                 // 15: p2p.ReconnectAckData
	(*message.ServiceRequestedAckData)(nil),          // 16: p2p.ServiceRequestedAckData
	(*gateway.BootNotificationRequestData)(nil),      // 17: gateway.BootNotificationRequestData
	(*gateway.LogData)(nil),                          // 18: gateway.LogData
	(*gateway.AuthorizeRequestData)(nil),             // 19: gateway.AuthorizeRequestData
	(*gateway.AuthorizeResponseData)(nil),            // 20: gateway.AuthorizeResponseData
	(*gateway.CheckAvailabilityRequestData)(nil),     // 21: gateway.CheckAvailabilityRequestData
	(*gateway.CheckAvailabilityResponseData)(nil),    // 22: gateway.CheckAvailabilityResponseData
	(*gateway.StartChargeRequestData)(nil),           // 23: gateway.StartChargeRequestData
	(*gateway.StartChargeResponseData)(nil),          // 24: gateway.StartChargeResponseData
	(*gateway.EVChargingStatusData)(nil),             // 25: gateway.EVChargingStatusData
	(*gateway.StopTransactionRequestData)(nil),       // 26: gateway.StopTransactionRequestData
	(*gateway.StopTransactionResponseData)(nil),      // 27: gateway.StopTransactionResponseData
	(*gateway.NotifyChargePointStateChangeData)(nil), // 28: gateway.NotifyChargePointStateChangeData
}
var file_base_event_format_proto_depIdxs = []int32{
	0,  // 0: events.Event.event_id:type_name -> events.EventType
	2,  // 1: events.Event.charging_status_data:type_name -> p2p.ChargingStatusData
	3,  // 2: events.Event.service_ack_data:type_name -> p2p.ServiceAckData
	4,  // 3: events.Event.service_requested_data:type_name -> p2p.ServiceRequestedData
	5,  // 4: events.Event.service_delivered_data:type_name -> p2p.ServiceDeliveredData
	6,  // 5: events.Event.stop_charge_data:type_name -> p2p.StopChargeData
	7,  // 6: events.Event.stop_charge_resp_data:type_name -> p2p.StopChargeResponseData
	8,  // 7: events.Event.identity_challenge_data:type_name -> p2p.IdentityChallengeData
	9,  // 8: events.Event.identity_response_data:type_name -> p2p.IdentityResponseData
	10, // 9: events.Event.chain_event_data:type_name -> p2p.ChainEventData
	11, // 10: events.Event.emit_show_info_data:type_name -> p2p.EmitShowInfoData
	12, // 11: events.Event.get_balance_ack_data:type_name -> p2p.GetBalanceAckData
	13, // 12: events.Event.get_pk_ack_data:type_name -> p2p.GetPKAckData
	14, // 13: events.Event.republish_ack_data:type_name -> p2p.RePublishDIDAckData
	15, // 14: events.Event.reconnect_ack_data:type_name -> p2p.ReconnectAckData
	16, // 15: events.Event.service_requested_ack_data:type_name -> p2p.ServiceRequestedAckData
	17, // 16: events.Event.boot_notification_request_data:type_name -> gateway.BootNotificationRequestData
	18, // 17: events.Event.log_data:type_name -> gateway.LogData
	19, // 18: events.Event.authorize_request_data:type_name -> gateway.AuthorizeRequestData
	20, // 19: events.Event.authorize_response_data:type_name -> gateway.AuthorizeResponseData
	21, // 20: events.Event.check_availability_request_data:type_name -> gateway.CheckAvailabilityRequestData
	22, // 21: events.Event.check_availability_response_data:type_name -> gateway.CheckAvailabilityResponseData
	23, // 22: events.Event.start_charge_request_data:type_name -> gateway.StartChargeRequestData
	24, // 23: events.Event.start_charge_response_data:type_name -> gateway.StartChargeResponseData
	25, // 24: events.Event.ev_charge_status_data:type_name -> gateway.EVChargingStatusData
	26, // 25: events.Event.stop_transaction_request_data:type_name -> gateway.StopTransactionRequestData
	27, // 26: events.Event.stop_transaction_response_data:type_name -> gateway.StopTransactionResponseData
	28, // 27: events.Event.notify_charge_point_state_change_data:type_name -> gateway.NotifyChargePointStateChangeData
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_base_event_format_proto_init() }
func file_base_event_format_proto_init() {
	if File_base_event_format_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_event_format_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_base_event_format_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_ChargingStatusData)(nil),
		(*Event_ServiceAckData)(nil),
		(*Event_ServiceRequestedData)(nil),
		(*Event_ServiceDeliveredData)(nil),
		(*Event_StopChargeData)(nil),
		(*Event_StopChargeRespData)(nil),
		(*Event_IdentityChallengeData)(nil),
		(*Event_IdentityResponseData)(nil),
		(*Event_ChainEventData)(nil),
		(*Event_EmitShowInfoData)(nil),
		(*Event_GetBalanceAckData)(nil),
		(*Event_GetPkAckData)(nil),
		(*Event_RepublishAckData)(nil),
		(*Event_ReconnectAckData)(nil),
		(*Event_ServiceRequestedAckData)(nil),
		(*Event_BootNotificationRequestData)(nil),
		(*Event_LogData)(nil),
		(*Event_AuthorizeRequestData)(nil),
		(*Event_AuthorizeResponseData)(nil),
		(*Event_CheckAvailabilityRequestData)(nil),
		(*Event_CheckAvailabilityResponseData)(nil),
		(*Event_StartChargeRequestData)(nil),
		(*Event_StartChargeResponseData)(nil),
		(*Event_EvChargeStatusData)(nil),
		(*Event_StopTransactionRequestData)(nil),
		(*Event_StopTransactionResponseData)(nil),
		(*Event_NotifyChargePointStateChangeData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_event_format_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_event_format_proto_goTypes,
		DependencyIndexes: file_base_event_format_proto_depIdxs,
		EnumInfos:         file_base_event_format_proto_enumTypes,
		MessageInfos:      file_base_event_format_proto_msgTypes,
	}.Build()
	File_base_event_format_proto = out.File
	file_base_event_format_proto_rawDesc = nil
	file_base_event_format_proto_goTypes = nil
	file_base_event_format_proto_depIdxs = nil
}
