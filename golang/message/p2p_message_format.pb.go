// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.8
// source: p2p_message_format.proto

package message

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Events types
type EventType int32

const (
	EventType_CHARGING_STATUS      EventType = 0
	EventType_SERVICE_REQUEST_ACK  EventType = 1
	EventType_SERVICE_DELIVERY_ACK EventType = 2
	EventType_SERVICE_REQUESTED    EventType = 3
	EventType_SERVICE_DELIVERED    EventType = 4
	EventType_STOP_CHARGE          EventType = 5
	EventType_STOP_CHARGE_RESPONSE EventType = 6
	EventType_IDENTITY_CHALLENGE   EventType = 7
	EventType_IDENTITY_RESPONSE    EventType = 8
	// For substarte's event
	EventType_RECEIVE_CHAIN_EVENT EventType = 9
	// For simulator log
	EventType_EMIT_SHOW_INFO EventType = 10
	// For simulator actions
	EventType_GET_BALANCE       EventType = 11
	EventType_GET_BALANCE_ACK   EventType = 12
	EventType_GET_PK            EventType = 13
	EventType_GET_PK_ACK        EventType = 14
	EventType_REPUBLISH_DID     EventType = 15
	EventType_REPUBLISH_DID_ACK EventType = 16
	EventType_RECONNECT         EventType = 17
	EventType_RECONNECT_ACK     EventType = 18
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "CHARGING_STATUS",
		1:  "SERVICE_REQUEST_ACK",
		2:  "SERVICE_DELIVERY_ACK",
		3:  "SERVICE_REQUESTED",
		4:  "SERVICE_DELIVERED",
		5:  "STOP_CHARGE",
		6:  "STOP_CHARGE_RESPONSE",
		7:  "IDENTITY_CHALLENGE",
		8:  "IDENTITY_RESPONSE",
		9:  "RECEIVE_CHAIN_EVENT",
		10: "EMIT_SHOW_INFO",
		11: "GET_BALANCE",
		12: "GET_BALANCE_ACK",
		13: "GET_PK",
		14: "GET_PK_ACK",
		15: "REPUBLISH_DID",
		16: "REPUBLISH_DID_ACK",
		17: "RECONNECT",
		18: "RECONNECT_ACK",
	}
	EventType_value = map[string]int32{
		"CHARGING_STATUS":      0,
		"SERVICE_REQUEST_ACK":  1,
		"SERVICE_DELIVERY_ACK": 2,
		"SERVICE_REQUESTED":    3,
		"SERVICE_DELIVERED":    4,
		"STOP_CHARGE":          5,
		"STOP_CHARGE_RESPONSE": 6,
		"IDENTITY_CHALLENGE":   7,
		"IDENTITY_RESPONSE":    8,
		"RECEIVE_CHAIN_EVENT":  9,
		"EMIT_SHOW_INFO":       10,
		"GET_BALANCE":          11,
		"GET_BALANCE_ACK":      12,
		"GET_PK":               13,
		"GET_PK_ACK":           14,
		"REPUBLISH_DID":        15,
		"REPUBLISH_DID_ACK":    16,
		"RECONNECT":            17,
		"RECONNECT_ACK":        18,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_message_format_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_p2p_message_format_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{0}
}

type EmitShowInfoData_ShowInfoType int32

const (
	EmitShowInfoData_LOG_INFO   EmitShowInfoData_ShowInfoType = 0
	EmitShowInfoData_EVENT_INFO EmitShowInfoData_ShowInfoType = 1
)

// Enum value maps for EmitShowInfoData_ShowInfoType.
var (
	EmitShowInfoData_ShowInfoType_name = map[int32]string{
		0: "LOG_INFO",
		1: "EVENT_INFO",
	}
	EmitShowInfoData_ShowInfoType_value = map[string]int32{
		"LOG_INFO":   0,
		"EVENT_INFO": 1,
	}
)

func (x EmitShowInfoData_ShowInfoType) Enum() *EmitShowInfoData_ShowInfoType {
	p := new(EmitShowInfoData_ShowInfoType)
	*p = x
	return p
}

func (x EmitShowInfoData_ShowInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmitShowInfoData_ShowInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_message_format_proto_enumTypes[1].Descriptor()
}

func (EmitShowInfoData_ShowInfoType) Type() protoreflect.EnumType {
	return &file_p2p_message_format_proto_enumTypes[1]
}

func (x EmitShowInfoData_ShowInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmitShowInfoData_ShowInfoType.Descriptor instead.
func (EmitShowInfoData_ShowInfoType) EnumDescriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{11, 0}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId EventType `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3,enum=p2p.EventType" json:"event_id,omitempty"`
	// Types that are assignable to Data:
	//	*Event_ChargingStatusData
	//	*Event_ServiceAckData
	//	*Event_ServiceRequestedData
	//	*Event_ServiceDeliveredData
	//	*Event_StopChargeData
	//	*Event_StopChargeRespData
	//	*Event_IdentityChallengeData
	//	*Event_IdentityResponseData
	//	*Event_ChainEventData
	//	*Event_EmitShowInfoData
	//	*Event_GetBalanceData
	//	*Event_GetBalanceAckData
	//	*Event_GetPkData
	//	*Event_GetPkAckData
	//	*Event_RepublishDidData
	//	*Event_RepublishAckData
	//	*Event_ReconnectData
	//	*Event_ReconnectAckData
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetEventId() EventType {
	if x != nil {
		return x.EventId
	}
	return EventType_CHARGING_STATUS
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetChargingStatusData() *ChargingStatusData {
	if x, ok := x.GetData().(*Event_ChargingStatusData); ok {
		return x.ChargingStatusData
	}
	return nil
}

func (x *Event) GetServiceAckData() *ServiceAckData {
	if x, ok := x.GetData().(*Event_ServiceAckData); ok {
		return x.ServiceAckData
	}
	return nil
}

func (x *Event) GetServiceRequestedData() *ServiceRequestedData {
	if x, ok := x.GetData().(*Event_ServiceRequestedData); ok {
		return x.ServiceRequestedData
	}
	return nil
}

func (x *Event) GetServiceDeliveredData() *ServiceDeliveredData {
	if x, ok := x.GetData().(*Event_ServiceDeliveredData); ok {
		return x.ServiceDeliveredData
	}
	return nil
}

func (x *Event) GetStopChargeData() *StopChargeData {
	if x, ok := x.GetData().(*Event_StopChargeData); ok {
		return x.StopChargeData
	}
	return nil
}

func (x *Event) GetStopChargeRespData() *StopChargeResponseData {
	if x, ok := x.GetData().(*Event_StopChargeRespData); ok {
		return x.StopChargeRespData
	}
	return nil
}

func (x *Event) GetIdentityChallengeData() *IdentityChallengeData {
	if x, ok := x.GetData().(*Event_IdentityChallengeData); ok {
		return x.IdentityChallengeData
	}
	return nil
}

func (x *Event) GetIdentityResponseData() *IdentityResponseData {
	if x, ok := x.GetData().(*Event_IdentityResponseData); ok {
		return x.IdentityResponseData
	}
	return nil
}

func (x *Event) GetChainEventData() *ChainEventData {
	if x, ok := x.GetData().(*Event_ChainEventData); ok {
		return x.ChainEventData
	}
	return nil
}

func (x *Event) GetEmitShowInfoData() *EmitShowInfoData {
	if x, ok := x.GetData().(*Event_EmitShowInfoData); ok {
		return x.EmitShowInfoData
	}
	return nil
}

func (x *Event) GetGetBalanceData() *GetBalanceData {
	if x, ok := x.GetData().(*Event_GetBalanceData); ok {
		return x.GetBalanceData
	}
	return nil
}

func (x *Event) GetGetBalanceAckData() *GetBalanceAckData {
	if x, ok := x.GetData().(*Event_GetBalanceAckData); ok {
		return x.GetBalanceAckData
	}
	return nil
}

func (x *Event) GetGetPkData() *GetPKData {
	if x, ok := x.GetData().(*Event_GetPkData); ok {
		return x.GetPkData
	}
	return nil
}

func (x *Event) GetGetPkAckData() *GetPKAckData {
	if x, ok := x.GetData().(*Event_GetPkAckData); ok {
		return x.GetPkAckData
	}
	return nil
}

func (x *Event) GetRepublishDidData() *RePublishDIDData {
	if x, ok := x.GetData().(*Event_RepublishDidData); ok {
		return x.RepublishDidData
	}
	return nil
}

func (x *Event) GetRepublishAckData() *RePublishDIDAckData {
	if x, ok := x.GetData().(*Event_RepublishAckData); ok {
		return x.RepublishAckData
	}
	return nil
}

func (x *Event) GetReconnectData() *ReconnectData {
	if x, ok := x.GetData().(*Event_ReconnectData); ok {
		return x.ReconnectData
	}
	return nil
}

func (x *Event) GetReconnectAckData() *ReconnectAckData {
	if x, ok := x.GetData().(*Event_ReconnectAckData); ok {
		return x.ReconnectAckData
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_ChargingStatusData struct {
	ChargingStatusData *ChargingStatusData `protobuf:"bytes,2,opt,name=charging_status_data,json=chargingStatusData,proto3,oneof"`
}

type Event_ServiceAckData struct {
	ServiceAckData *ServiceAckData `protobuf:"bytes,3,opt,name=service_ack_data,json=serviceAckData,proto3,oneof"`
}

type Event_ServiceRequestedData struct {
	ServiceRequestedData *ServiceRequestedData `protobuf:"bytes,4,opt,name=service_requested_data,json=serviceRequestedData,proto3,oneof"`
}

type Event_ServiceDeliveredData struct {
	ServiceDeliveredData *ServiceDeliveredData `protobuf:"bytes,5,opt,name=service_delivered_data,json=serviceDeliveredData,proto3,oneof"`
}

type Event_StopChargeData struct {
	StopChargeData *StopChargeData `protobuf:"bytes,6,opt,name=stop_charge_data,json=stopChargeData,proto3,oneof"`
}

type Event_StopChargeRespData struct {
	StopChargeRespData *StopChargeResponseData `protobuf:"bytes,7,opt,name=stop_charge_resp_data,json=stopChargeRespData,proto3,oneof"`
}

type Event_IdentityChallengeData struct {
	IdentityChallengeData *IdentityChallengeData `protobuf:"bytes,8,opt,name=identity_challenge_data,json=identityChallengeData,proto3,oneof"`
}

type Event_IdentityResponseData struct {
	IdentityResponseData *IdentityResponseData `protobuf:"bytes,9,opt,name=identity_response_data,json=identityResponseData,proto3,oneof"`
}

type Event_ChainEventData struct {
	ChainEventData *ChainEventData `protobuf:"bytes,10,opt,name=chain_event_data,json=chainEventData,proto3,oneof"`
}

type Event_EmitShowInfoData struct {
	EmitShowInfoData *EmitShowInfoData `protobuf:"bytes,11,opt,name=emit_show_info_data,json=emitShowInfoData,proto3,oneof"`
}

type Event_GetBalanceData struct {
	GetBalanceData *GetBalanceData `protobuf:"bytes,12,opt,name=get_balance_data,json=getBalanceData,proto3,oneof"`
}

type Event_GetBalanceAckData struct {
	GetBalanceAckData *GetBalanceAckData `protobuf:"bytes,13,opt,name=get_balance_ack_data,json=getBalanceAckData,proto3,oneof"`
}

type Event_GetPkData struct {
	GetPkData *GetPKData `protobuf:"bytes,14,opt,name=get_pk_data,json=getPkData,proto3,oneof"`
}

type Event_GetPkAckData struct {
	GetPkAckData *GetPKAckData `protobuf:"bytes,15,opt,name=get_pk_ack_data,json=getPkAckData,proto3,oneof"`
}

type Event_RepublishDidData struct {
	RepublishDidData *RePublishDIDData `protobuf:"bytes,16,opt,name=republish_did_data,json=republishDidData,proto3,oneof"`
}

type Event_RepublishAckData struct {
	RepublishAckData *RePublishDIDAckData `protobuf:"bytes,17,opt,name=republish_ack_data,json=republishAckData,proto3,oneof"`
}

type Event_ReconnectData struct {
	ReconnectData *ReconnectData `protobuf:"bytes,18,opt,name=reconnect_data,json=reconnectData,proto3,oneof"`
}

type Event_ReconnectAckData struct {
	ReconnectAckData *ReconnectAckData `protobuf:"bytes,19,opt,name=reconnect_ack_data,json=reconnectAckData,proto3,oneof"`
}

func (*Event_ChargingStatusData) isEvent_Data() {}

func (*Event_ServiceAckData) isEvent_Data() {}

func (*Event_ServiceRequestedData) isEvent_Data() {}

func (*Event_ServiceDeliveredData) isEvent_Data() {}

func (*Event_StopChargeData) isEvent_Data() {}

func (*Event_StopChargeRespData) isEvent_Data() {}

func (*Event_IdentityChallengeData) isEvent_Data() {}

func (*Event_IdentityResponseData) isEvent_Data() {}

func (*Event_ChainEventData) isEvent_Data() {}

func (*Event_EmitShowInfoData) isEvent_Data() {}

func (*Event_GetBalanceData) isEvent_Data() {}

func (*Event_GetBalanceAckData) isEvent_Data() {}

func (*Event_GetPkData) isEvent_Data() {}

func (*Event_GetPkAckData) isEvent_Data() {}

func (*Event_RepublishDidData) isEvent_Data() {}

func (*Event_RepublishAckData) isEvent_Data() {}

func (*Event_ReconnectData) isEvent_Data() {}

func (*Event_ReconnectAckData) isEvent_Data() {}

type ChargingStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *ChargingStatusData) Reset() {
	*x = ChargingStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingStatusData) ProtoMessage() {}

func (x *ChargingStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingStatusData.ProtoReflect.Descriptor instead.
func (*ChargingStatusData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{1}
}

func (x *ChargingStatusData) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ServiceAckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *ServiceAckData) Reset() {
	*x = ServiceAckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAckData) ProtoMessage() {}

func (x *ServiceAckData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAckData.ProtoReflect.Descriptor instead.
func (*ServiceAckData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceAckData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

type ServiceRequestedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumer       string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Provider       string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	TokenDeposited string `protobuf:"bytes,3,opt,name=token_deposited,json=tokenDeposited,proto3" json:"token_deposited,omitempty"`
}

func (x *ServiceRequestedData) Reset() {
	*x = ServiceRequestedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequestedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequestedData) ProtoMessage() {}

func (x *ServiceRequestedData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequestedData.ProtoReflect.Descriptor instead.
func (*ServiceRequestedData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceRequestedData) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *ServiceRequestedData) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ServiceRequestedData) GetTokenDeposited() string {
	if x != nil {
		return x.TokenDeposited
	}
	return ""
}

type ServiceDeliveredData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumer   string            `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Provider   string            `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	RefundInfo *TransactionValue `protobuf:"bytes,3,opt,name=refund_info,json=refundInfo,proto3" json:"refund_info,omitempty"`
	SpentInfo  *TransactionValue `protobuf:"bytes,4,opt,name=spent_info,json=spentInfo,proto3" json:"spent_info,omitempty"`
}

func (x *ServiceDeliveredData) Reset() {
	*x = ServiceDeliveredData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDeliveredData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDeliveredData) ProtoMessage() {}

func (x *ServiceDeliveredData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDeliveredData.ProtoReflect.Descriptor instead.
func (*ServiceDeliveredData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceDeliveredData) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *ServiceDeliveredData) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ServiceDeliveredData) GetRefundInfo() *TransactionValue {
	if x != nil {
		return x.RefundInfo
	}
	return nil
}

func (x *ServiceDeliveredData) GetSpentInfo() *TransactionValue {
	if x != nil {
		return x.SpentInfo
	}
	return nil
}

type StopChargeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *StopChargeResponseData) Reset() {
	*x = StopChargeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopChargeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopChargeResponseData) ProtoMessage() {}

func (x *StopChargeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopChargeResponseData.ProtoReflect.Descriptor instead.
func (*StopChargeResponseData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{5}
}

func (x *StopChargeResponseData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

type IdentityChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainData string `protobuf:"bytes,1,opt,name=plain_data,json=plainData,proto3" json:"plain_data,omitempty"`
}

func (x *IdentityChallengeData) Reset() {
	*x = IdentityChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityChallengeData) ProtoMessage() {}

func (x *IdentityChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityChallengeData.ProtoReflect.Descriptor instead.
func (*IdentityChallengeData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{6}
}

func (x *IdentityChallengeData) GetPlainData() string {
	if x != nil {
		return x.PlainData
	}
	return ""
}

type IdentityResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp      *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Signature string    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *IdentityResponseData) Reset() {
	*x = IdentityResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityResponseData) ProtoMessage() {}

func (x *IdentityResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityResponseData.ProtoReflect.Descriptor instead.
func (*IdentityResponseData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{7}
}

func (x *IdentityResponseData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *IdentityResponseData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{8}
}

func (x *Response) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransactionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenNum  string                      `protobuf:"bytes,1,opt,name=token_num,json=tokenNum,proto3" json:"token_num,omitempty"`
	TxHash    string                      `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TimePoint *TransactionValue_TimePoint `protobuf:"bytes,3,opt,name=time_point,json=timePoint,proto3" json:"time_point,omitempty"`
	CallHash  string                      `protobuf:"bytes,4,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *TransactionValue) Reset() {
	*x = TransactionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionValue) ProtoMessage() {}

func (x *TransactionValue) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionValue.ProtoReflect.Descriptor instead.
func (*TransactionValue) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionValue) GetTokenNum() string {
	if x != nil {
		return x.TokenNum
	}
	return ""
}

func (x *TransactionValue) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TransactionValue) GetTimePoint() *TransactionValue_TimePoint {
	if x != nil {
		return x.TimePoint
	}
	return nil
}

func (x *TransactionValue) GetCallHash() string {
	if x != nil {
		return x.CallHash
	}
	return ""
}

type ChainEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Attributes string `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ChainEventData) Reset() {
	*x = ChainEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainEventData) ProtoMessage() {}

func (x *ChainEventData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainEventData.ProtoReflect.Descriptor instead.
func (*ChainEventData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{10}
}

func (x *ChainEventData) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ChainEventData) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

type EmitShowInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type EmitShowInfoData_ShowInfoType `protobuf:"varint,1,opt,name=type,proto3,enum=p2p.EmitShowInfoData_ShowInfoType" json:"type,omitempty"`
	Data string                        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EmitShowInfoData) Reset() {
	*x = EmitShowInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmitShowInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitShowInfoData) ProtoMessage() {}

func (x *EmitShowInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitShowInfoData.ProtoReflect.Descriptor instead.
func (*EmitShowInfoData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{11}
}

func (x *EmitShowInfoData) GetType() EmitShowInfoData_ShowInfoType {
	if x != nil {
		return x.Type
	}
	return EmitShowInfoData_LOG_INFO
}

func (x *EmitShowInfoData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type GetBalanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBalanceData) Reset() {
	*x = GetBalanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceData) ProtoMessage() {}

func (x *GetBalanceData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceData.ProtoReflect.Descriptor instead.
func (*GetBalanceData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{12}
}

type GetBalanceAckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp    *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Balance string    `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceAckData) Reset() {
	*x = GetBalanceAckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceAckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceAckData) ProtoMessage() {}

func (x *GetBalanceAckData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceAckData.ProtoReflect.Descriptor instead.
func (*GetBalanceAckData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{13}
}

func (x *GetBalanceAckData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetBalanceAckData) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type GetPKData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPKData) Reset() {
	*x = GetPKData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPKData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPKData) ProtoMessage() {}

func (x *GetPKData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPKData.ProtoReflect.Descriptor instead.
func (*GetPKData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{14}
}

type GetPKAckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Pk   string    `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *GetPKAckData) Reset() {
	*x = GetPKAckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPKAckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPKAckData) ProtoMessage() {}

func (x *GetPKAckData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPKAckData.ProtoReflect.Descriptor instead.
func (*GetPKAckData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{15}
}

func (x *GetPKAckData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *GetPKAckData) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

type RePublishDIDData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RePublishDIDData) Reset() {
	*x = RePublishDIDData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishDIDData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishDIDData) ProtoMessage() {}

func (x *RePublishDIDData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishDIDData.ProtoReflect.Descriptor instead.
func (*RePublishDIDData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{16}
}

type RePublishDIDAckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Pk   string    `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *RePublishDIDAckData) Reset() {
	*x = RePublishDIDAckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RePublishDIDAckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublishDIDAckData) ProtoMessage() {}

func (x *RePublishDIDAckData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublishDIDAckData.ProtoReflect.Descriptor instead.
func (*RePublishDIDAckData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{17}
}

func (x *RePublishDIDAckData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *RePublishDIDAckData) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

type ReconnectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconnectData) Reset() {
	*x = ReconnectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconnectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectData) ProtoMessage() {}

func (x *ReconnectData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectData.ProtoReflect.Descriptor instead.
func (*ReconnectData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{18}
}

type ReconnectAckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp    *Response `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReconnectAckData) Reset() {
	*x = ReconnectAckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconnectAckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectAckData) ProtoMessage() {}

func (x *ReconnectAckData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectAckData.ProtoReflect.Descriptor instead.
func (*ReconnectAckData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{19}
}

func (x *ReconnectAckData) GetResp() *Response {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *ReconnectAckData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StopChargeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *StopChargeData) Reset() {
	*x = StopChargeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopChargeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopChargeData) ProtoMessage() {}

func (x *StopChargeData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopChargeData.ProtoReflect.Descriptor instead.
func (*StopChargeData) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{20}
}

func (x *StopChargeData) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type TransactionValue_TimePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index  int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TransactionValue_TimePoint) Reset() {
	*x = TransactionValue_TimePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_message_format_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionValue_TimePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionValue_TimePoint) ProtoMessage() {}

func (x *TransactionValue_TimePoint) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_message_format_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionValue_TimePoint.ProtoReflect.Descriptor instead.
func (*TransactionValue_TimePoint) Descriptor() ([]byte, []int) {
	return file_p2p_message_format_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TransactionValue_TimePoint) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TransactionValue_TimePoint) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_p2p_message_format_proto protoreflect.FileDescriptor

var file_p2p_message_format_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x32, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x32, 0x70, 0x22,
	0xc2, 0x0a, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x32,
	0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x17, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x32, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6d, 0x69,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e,
	0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x32, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x67, 0x65, 0x74, 0x50, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6b, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x4b,
	0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x50, 0x6b,
	0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x49, 0x44, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x49, 0x44, 0x41, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x77, 0x0a, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x22, 0x36, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72,
	0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x3a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x01,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x39, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x4b, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x45, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c,
	0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x22, 0x10, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x50,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x0b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x50, 0x4b, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6b,
	0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x49, 0x44,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x44, 0x49, 0x44, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6b, 0x22, 0x0f,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x4f, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x96, 0x03, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x4b,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0c, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4b, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54,
	0x5f, 0x50, 0x4b, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x4b, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x12, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x61, 0x71, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x70, 0x65, 0x61, 0x71, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x65, 0x76, 0x2d,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_message_format_proto_rawDescOnce sync.Once
	file_p2p_message_format_proto_rawDescData = file_p2p_message_format_proto_rawDesc
)

func file_p2p_message_format_proto_rawDescGZIP() []byte {
	file_p2p_message_format_proto_rawDescOnce.Do(func() {
		file_p2p_message_format_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_message_format_proto_rawDescData)
	})
	return file_p2p_message_format_proto_rawDescData
}

var file_p2p_message_format_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_p2p_message_format_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_p2p_message_format_proto_goTypes = []interface{}{
	(EventType)(0),                     // 0: p2p.EventType
	(EmitShowInfoData_ShowInfoType)(0), // 1: p2p.EmitShowInfoData.ShowInfoType
	(*Event)(nil),                      // 2: p2p.Event
	(*ChargingStatusData)(nil),         // 3: p2p.ChargingStatusData
	(*ServiceAckData)(nil),             // 4: p2p.ServiceAckData
	(*ServiceRequestedData)(nil),       // 5: p2p.ServiceRequestedData
	(*ServiceDeliveredData)(nil),       // 6: p2p.ServiceDeliveredData
	(*StopChargeResponseData)(nil),     // 7: p2p.StopChargeResponseData
	(*IdentityChallengeData)(nil),      // 8: p2p.IdentityChallengeData
	(*IdentityResponseData)(nil),       // 9: p2p.IdentityResponseData
	(*Response)(nil),                   // 10: p2p.Response
	(*TransactionValue)(nil),           // 11: p2p.TransactionValue
	(*ChainEventData)(nil),             // 12: p2p.ChainEventData
	(*EmitShowInfoData)(nil),           // 13: p2p.EmitShowInfoData
	(*GetBalanceData)(nil),             // 14: p2p.GetBalanceData
	(*GetBalanceAckData)(nil),          // 15: p2p.GetBalanceAckData
	(*GetPKData)(nil),                  // 16: p2p.GetPKData
	(*GetPKAckData)(nil),               // 17: p2p.GetPKAckData
	(*RePublishDIDData)(nil),           // 18: p2p.RePublishDIDData
	(*RePublishDIDAckData)(nil),        // 19: p2p.RePublishDIDAckData
	(*ReconnectData)(nil),              // 20: p2p.ReconnectData
	(*ReconnectAckData)(nil),           // 21: p2p.ReconnectAckData
	(*StopChargeData)(nil),             // 22: p2p.StopChargeData
	(*TransactionValue_TimePoint)(nil), // 23: p2p.TransactionValue.TimePoint
}
var file_p2p_message_format_proto_depIdxs = []int32{
	0,  // 0: p2p.Event.event_id:type_name -> p2p.EventType
	3,  // 1: p2p.Event.charging_status_data:type_name -> p2p.ChargingStatusData
	4,  // 2: p2p.Event.service_ack_data:type_name -> p2p.ServiceAckData
	5,  // 3: p2p.Event.service_requested_data:type_name -> p2p.ServiceRequestedData
	6,  // 4: p2p.Event.service_delivered_data:type_name -> p2p.ServiceDeliveredData
	22, // 5: p2p.Event.stop_charge_data:type_name -> p2p.StopChargeData
	7,  // 6: p2p.Event.stop_charge_resp_data:type_name -> p2p.StopChargeResponseData
	8,  // 7: p2p.Event.identity_challenge_data:type_name -> p2p.IdentityChallengeData
	9,  // 8: p2p.Event.identity_response_data:type_name -> p2p.IdentityResponseData
	12, // 9: p2p.Event.chain_event_data:type_name -> p2p.ChainEventData
	13, // 10: p2p.Event.emit_show_info_data:type_name -> p2p.EmitShowInfoData
	14, // 11: p2p.Event.get_balance_data:type_name -> p2p.GetBalanceData
	15, // 12: p2p.Event.get_balance_ack_data:type_name -> p2p.GetBalanceAckData
	16, // 13: p2p.Event.get_pk_data:type_name -> p2p.GetPKData
	17, // 14: p2p.Event.get_pk_ack_data:type_name -> p2p.GetPKAckData
	18, // 15: p2p.Event.republish_did_data:type_name -> p2p.RePublishDIDData
	19, // 16: p2p.Event.republish_ack_data:type_name -> p2p.RePublishDIDAckData
	20, // 17: p2p.Event.reconnect_data:type_name -> p2p.ReconnectData
	21, // 18: p2p.Event.reconnect_ack_data:type_name -> p2p.ReconnectAckData
	10, // 19: p2p.ServiceAckData.resp:type_name -> p2p.Response
	11, // 20: p2p.ServiceDeliveredData.refund_info:type_name -> p2p.TransactionValue
	11, // 21: p2p.ServiceDeliveredData.spent_info:type_name -> p2p.TransactionValue
	10, // 22: p2p.StopChargeResponseData.resp:type_name -> p2p.Response
	10, // 23: p2p.IdentityResponseData.resp:type_name -> p2p.Response
	23, // 24: p2p.TransactionValue.time_point:type_name -> p2p.TransactionValue.TimePoint
	1,  // 25: p2p.EmitShowInfoData.type:type_name -> p2p.EmitShowInfoData.ShowInfoType
	10, // 26: p2p.GetBalanceAckData.resp:type_name -> p2p.Response
	10, // 27: p2p.GetPKAckData.resp:type_name -> p2p.Response
	10, // 28: p2p.RePublishDIDAckData.resp:type_name -> p2p.Response
	10, // 29: p2p.ReconnectAckData.resp:type_name -> p2p.Response
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_p2p_message_format_proto_init() }
func file_p2p_message_format_proto_init() {
	if File_p2p_message_format_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_p2p_message_format_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequestedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDeliveredData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopChargeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmitShowInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceAckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPKData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPKAckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishDIDData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RePublishDIDAckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconnectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconnectAckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopChargeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_message_format_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionValue_TimePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_p2p_message_format_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_ChargingStatusData)(nil),
		(*Event_ServiceAckData)(nil),
		(*Event_ServiceRequestedData)(nil),
		(*Event_ServiceDeliveredData)(nil),
		(*Event_StopChargeData)(nil),
		(*Event_StopChargeRespData)(nil),
		(*Event_IdentityChallengeData)(nil),
		(*Event_IdentityResponseData)(nil),
		(*Event_ChainEventData)(nil),
		(*Event_EmitShowInfoData)(nil),
		(*Event_GetBalanceData)(nil),
		(*Event_GetBalanceAckData)(nil),
		(*Event_GetPkData)(nil),
		(*Event_GetPkAckData)(nil),
		(*Event_RepublishDidData)(nil),
		(*Event_RepublishAckData)(nil),
		(*Event_ReconnectData)(nil),
		(*Event_ReconnectAckData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_message_format_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_message_format_proto_goTypes,
		DependencyIndexes: file_p2p_message_format_proto_depIdxs,
		EnumInfos:         file_p2p_message_format_proto_enumTypes,
		MessageInfos:      file_p2p_message_format_proto_msgTypes,
	}.Build()
	File_p2p_message_format_proto = out.File
	file_p2p_message_format_proto_rawDesc = nil
	file_p2p_message_format_proto_goTypes = nil
	file_p2p_message_format_proto_depIdxs = nil
}
