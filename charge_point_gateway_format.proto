syntax = "proto3";

package gateway;
option go_package = "github.com/peaqnetwork/peaq-network-ev-charging-message-format/golang/gateway;gateway";

enum EventType {
  BOOT_NOTIFICATION_REQUEST = 0;
  HEARTBEAT_REQUEST = 1;
  LOG = 2;
  AUTHORIZE_REQUEST = 3;
  AUTHORIZE_REQUEST_ACK = 4;
  CHECK_AVAILABILITY_REQUEST = 5;
  CHECK_AVAILABILITY_REQUEST_ACK = 6;
  START_CHARGE_REQUEST = 7;
  START_CHARGE_REQUEST_ACK = 8;
  CHARGE_STATUS = 9;
  STOP_CHARGE_REQUEST = 10;
  STOP_CHARGE_REQUEST_ACK = 11;
}

message Event {
  EventType event_id = 1;
  oneof data {
    BootNotificationRequestData boot_notification_request_data = 2;
    LogData log_data = 3;
    AuthorizeRequestData authorize_request_data = 4;
    AuthorizeRequestAckData authorize_request_ack_data = 5;
    CheckAvailabilityRequestData check_availability_request_data = 6;
    CheckAvailabilityRequestAckData check_availability_request_ack_data = 7;
    StartChargeRequestData start_charge_request_data = 8;
    StartChargeRequestAckData start_charge_request_ack_data = 9;
    ChargingStatusData charge_status_data = 10;
    StopChargeRequestData stop_charge_request_data = 11;
    StopChargeRequestAckData stop_charge_request_ack_data = 12;
  }
}

message BootNotificationRequestData {
  string charge_box_serial_number = 1;
  string charge_point_model = 2;
  string Charge_point_serial_number = 3;
  string Charge_point_vendor = 4;
  string firmware_version = 5;
  string iccid = 6;
  string imsi = 7;
  string meter_serial_number = 8;
  string meter_type = 9;
}

message LogData {
  string current_time = 1;
  Response resp = 2;
}

message AuthorizeRequestData {
  string charge_point_client_id = 1;
  string consumer_public_key = 2;
}
message AuthorizeRequestAckData {
  string consumer_public_key = 1;
  Response resp = 2;
}

message CheckAvailabilityRequestData {
  string charge_point_client_id = 1;
  int32 connector_id = 2;
}
message CheckAvailabilityRequestAckData { Response resp = 1; }

message StartChargeRequestData {
  string charge_point_client_id = 1;
  int32 connector_id = 2;
  string consumer_public_key = 3;
}
message StartChargeRequestAckData {
  string consumer_public_key = 1;
  Response resp = 2;
}

message Response {
  bool error = 1;
  string message = 2;
}

message ChargingStatusData {
  float initial_battery_level = 1;
  float battery_level = 2;
  float current_offered = 3;
  string battery_unit = 4;
  string current_unit = 5;
}

message StopChargeRequestData {
  string charge_point_client_id = 1;
  int32 connector_id = 2;
  string consumer_public_key = 3;
}

message StopChargeRequestAckData {
  string consumer_public_key = 1;
  int32 transaction_id = 2;
  int32 connector_id = 3;
  string id_tag = 4;
  string start_time = 5;
  string end_time = 6;
  int32 start_meter = 7;
  int32 end_meter = 8;
  ChargingStatusData charge_status = 9;
  Response resp = 10;
}