// This file is generated by rust-protobuf 3.0.0-alpha.10. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `charge_point_gateway_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_10;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.BootNotificationRequestData)
pub struct BootNotificationRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_box_serial_number)
    pub charge_box_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_point_model)
    pub charge_point_model: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_serial_number)
    pub Charge_point_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_vendor)
    pub Charge_point_vendor: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.firmware_version)
    pub firmware_version: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.iccid)
    pub iccid: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.imsi)
    pub imsi: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_serial_number)
    pub meter_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_type)
    pub meter_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.BootNotificationRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BootNotificationRequestData {
    fn default() -> &'a BootNotificationRequestData {
        <BootNotificationRequestData as ::protobuf::Message>::default_instance()
    }
}

impl BootNotificationRequestData {
    pub fn new() -> BootNotificationRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_box_serial_number",
            |m: &BootNotificationRequestData| { &m.charge_box_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.charge_box_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_model",
            |m: &BootNotificationRequestData| { &m.charge_point_model },
            |m: &mut BootNotificationRequestData| { &mut m.charge_point_model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_serial_number",
            |m: &BootNotificationRequestData| { &m.Charge_point_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_vendor",
            |m: &BootNotificationRequestData| { &m.Charge_point_vendor },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_vendor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "firmware_version",
            |m: &BootNotificationRequestData| { &m.firmware_version },
            |m: &mut BootNotificationRequestData| { &mut m.firmware_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "iccid",
            |m: &BootNotificationRequestData| { &m.iccid },
            |m: &mut BootNotificationRequestData| { &mut m.iccid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imsi",
            |m: &BootNotificationRequestData| { &m.imsi },
            |m: &mut BootNotificationRequestData| { &mut m.imsi },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_serial_number",
            |m: &BootNotificationRequestData| { &m.meter_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.meter_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_type",
            |m: &BootNotificationRequestData| { &m.meter_type },
            |m: &mut BootNotificationRequestData| { &mut m.meter_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<BootNotificationRequestData>(
            "BootNotificationRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for BootNotificationRequestData {
    const NAME: &'static str = "BootNotificationRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_box_serial_number = is.read_string()?;
                },
                18 => {
                    self.charge_point_model = is.read_string()?;
                },
                26 => {
                    self.Charge_point_serial_number = is.read_string()?;
                },
                34 => {
                    self.Charge_point_vendor = is.read_string()?;
                },
                42 => {
                    self.firmware_version = is.read_string()?;
                },
                50 => {
                    self.iccid = is.read_string()?;
                },
                58 => {
                    self.imsi = is.read_string()?;
                },
                66 => {
                    self.meter_serial_number = is.read_string()?;
                },
                74 => {
                    self.meter_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_box_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_box_serial_number);
        }
        if !self.charge_point_model.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.charge_point_model);
        }
        if !self.Charge_point_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Charge_point_serial_number);
        }
        if !self.Charge_point_vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Charge_point_vendor);
        }
        if !self.firmware_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.firmware_version);
        }
        if !self.iccid.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.iccid);
        }
        if !self.imsi.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.imsi);
        }
        if !self.meter_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.meter_serial_number);
        }
        if !self.meter_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.meter_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_box_serial_number.is_empty() {
            os.write_string(1, &self.charge_box_serial_number)?;
        }
        if !self.charge_point_model.is_empty() {
            os.write_string(2, &self.charge_point_model)?;
        }
        if !self.Charge_point_serial_number.is_empty() {
            os.write_string(3, &self.Charge_point_serial_number)?;
        }
        if !self.Charge_point_vendor.is_empty() {
            os.write_string(4, &self.Charge_point_vendor)?;
        }
        if !self.firmware_version.is_empty() {
            os.write_string(5, &self.firmware_version)?;
        }
        if !self.iccid.is_empty() {
            os.write_string(6, &self.iccid)?;
        }
        if !self.imsi.is_empty() {
            os.write_string(7, &self.imsi)?;
        }
        if !self.meter_serial_number.is_empty() {
            os.write_string(8, &self.meter_serial_number)?;
        }
        if !self.meter_type.is_empty() {
            os.write_string(9, &self.meter_type)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> BootNotificationRequestData {
        BootNotificationRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_box_serial_number.clear();
        self.charge_point_model.clear();
        self.Charge_point_serial_number.clear();
        self.Charge_point_vendor.clear();
        self.firmware_version.clear();
        self.iccid.clear();
        self.imsi.clear();
        self.meter_serial_number.clear();
        self.meter_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BootNotificationRequestData {
        static instance: BootNotificationRequestData = BootNotificationRequestData {
            charge_box_serial_number: ::std::string::String::new(),
            charge_point_model: ::std::string::String::new(),
            Charge_point_serial_number: ::std::string::String::new(),
            Charge_point_vendor: ::std::string::String::new(),
            firmware_version: ::std::string::String::new(),
            iccid: ::std::string::String::new(),
            imsi: ::std::string::String::new(),
            meter_serial_number: ::std::string::String::new(),
            meter_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BootNotificationRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BootNotificationRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BootNotificationRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BootNotificationRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.LogData)
pub struct LogData {
    // message fields
    // @@protoc_insertion_point(field:gateway.LogData.current_time)
    pub current_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.LogData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.LogData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogData {
    fn default() -> &'a LogData {
        <LogData as ::protobuf::Message>::default_instance()
    }
}

impl LogData {
    pub fn new() -> LogData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_time",
            |m: &LogData| { &m.current_time },
            |m: &mut LogData| { &mut m.current_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &LogData| { &m.resp },
            |m: &mut LogData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<LogData>(
            "LogData",
            fields,
        )
    }
}

impl ::protobuf::Message for LogData {
    const NAME: &'static str = "LogData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.current_time = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.current_time.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.current_time);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.current_time.is_empty() {
            os.write_string(1, &self.current_time)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> LogData {
        LogData::new()
    }

    fn clear(&mut self) {
        self.current_time.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogData {
        static instance: LogData = LogData {
            current_time: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.AuthorizeRequestData)
pub struct AuthorizeRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.AuthorizeRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizeRequestData {
    fn default() -> &'a AuthorizeRequestData {
        <AuthorizeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizeRequestData {
    pub fn new() -> AuthorizeRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &AuthorizeRequestData| { &m.charge_point_client_id },
            |m: &mut AuthorizeRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &AuthorizeRequestData| { &m.consumer_public_key },
            |m: &mut AuthorizeRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<AuthorizeRequestData>(
            "AuthorizeRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for AuthorizeRequestData {
    const NAME: &'static str = "AuthorizeRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                18 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(2, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> AuthorizeRequestData {
        AuthorizeRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizeRequestData {
        static instance: AuthorizeRequestData = AuthorizeRequestData {
            charge_point_client_id: ::std::string::String::new(),
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthorizeRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthorizeRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthorizeRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizeRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.AuthorizeResponseData)
pub struct AuthorizeResponseData {
    // message fields
    // @@protoc_insertion_point(field:gateway.AuthorizeResponseData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.AuthorizeResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.AuthorizeResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizeResponseData {
    fn default() -> &'a AuthorizeResponseData {
        <AuthorizeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizeResponseData {
    pub fn new() -> AuthorizeResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &AuthorizeResponseData| { &m.consumer_public_key },
            |m: &mut AuthorizeResponseData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &AuthorizeResponseData| { &m.resp },
            |m: &mut AuthorizeResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<AuthorizeResponseData>(
            "AuthorizeResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for AuthorizeResponseData {
    const NAME: &'static str = "AuthorizeResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> AuthorizeResponseData {
        AuthorizeResponseData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizeResponseData {
        static instance: AuthorizeResponseData = AuthorizeResponseData {
            consumer_public_key: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthorizeResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthorizeResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthorizeResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizeResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.CheckAvailabilityRequestData)
pub struct CheckAvailabilityRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityRequestData.connector_id)
    pub connector_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.CheckAvailabilityRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAvailabilityRequestData {
    fn default() -> &'a CheckAvailabilityRequestData {
        <CheckAvailabilityRequestData as ::protobuf::Message>::default_instance()
    }
}

impl CheckAvailabilityRequestData {
    pub fn new() -> CheckAvailabilityRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &CheckAvailabilityRequestData| { &m.charge_point_client_id },
            |m: &mut CheckAvailabilityRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &CheckAvailabilityRequestData| { &m.connector_id },
            |m: &mut CheckAvailabilityRequestData| { &mut m.connector_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<CheckAvailabilityRequestData>(
            "CheckAvailabilityRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for CheckAvailabilityRequestData {
    const NAME: &'static str = "CheckAvailabilityRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> CheckAvailabilityRequestData {
        CheckAvailabilityRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAvailabilityRequestData {
        static instance: CheckAvailabilityRequestData = CheckAvailabilityRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAvailabilityRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAvailabilityRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAvailabilityRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAvailabilityRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.CheckAvailabilityResponseData)
pub struct CheckAvailabilityResponseData {
    // message fields
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.CheckAvailabilityResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAvailabilityResponseData {
    fn default() -> &'a CheckAvailabilityResponseData {
        <CheckAvailabilityResponseData as ::protobuf::Message>::default_instance()
    }
}

impl CheckAvailabilityResponseData {
    pub fn new() -> CheckAvailabilityResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &CheckAvailabilityResponseData| { &m.resp },
            |m: &mut CheckAvailabilityResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<CheckAvailabilityResponseData>(
            "CheckAvailabilityResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for CheckAvailabilityResponseData {
    const NAME: &'static str = "CheckAvailabilityResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> CheckAvailabilityResponseData {
        CheckAvailabilityResponseData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAvailabilityResponseData {
        static instance: CheckAvailabilityResponseData = CheckAvailabilityResponseData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAvailabilityResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAvailabilityResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAvailabilityResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAvailabilityResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StartTransactionRequestData)
pub struct StartTransactionRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StartTransactionRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StartTransactionRequestData.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.StartTransactionRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StartTransactionRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartTransactionRequestData {
    fn default() -> &'a StartTransactionRequestData {
        <StartTransactionRequestData as ::protobuf::Message>::default_instance()
    }
}

impl StartTransactionRequestData {
    pub fn new() -> StartTransactionRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &StartTransactionRequestData| { &m.charge_point_client_id },
            |m: &mut StartTransactionRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &StartTransactionRequestData| { &m.connector_id },
            |m: &mut StartTransactionRequestData| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StartTransactionRequestData| { &m.consumer_public_key },
            |m: &mut StartTransactionRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StartTransactionRequestData>(
            "StartTransactionRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for StartTransactionRequestData {
    const NAME: &'static str = "StartTransactionRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                26 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(3, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StartTransactionRequestData {
        StartTransactionRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartTransactionRequestData {
        static instance: StartTransactionRequestData = StartTransactionRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartTransactionRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartTransactionRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartTransactionRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartTransactionRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StartTransactionResponseData)
pub struct StartTransactionResponseData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StartTransactionResponseData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StartTransactionResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StartTransactionResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartTransactionResponseData {
    fn default() -> &'a StartTransactionResponseData {
        <StartTransactionResponseData as ::protobuf::Message>::default_instance()
    }
}

impl StartTransactionResponseData {
    pub fn new() -> StartTransactionResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StartTransactionResponseData| { &m.consumer_public_key },
            |m: &mut StartTransactionResponseData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StartTransactionResponseData| { &m.resp },
            |m: &mut StartTransactionResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StartTransactionResponseData>(
            "StartTransactionResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for StartTransactionResponseData {
    const NAME: &'static str = "StartTransactionResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StartTransactionResponseData {
        StartTransactionResponseData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartTransactionResponseData {
        static instance: StartTransactionResponseData = StartTransactionResponseData {
            consumer_public_key: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartTransactionResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartTransactionResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartTransactionResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartTransactionResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.NotifyChargePointStateChangeData)
pub struct NotifyChargePointStateChangeData {
    // message fields
    // @@protoc_insertion_point(field:gateway.NotifyChargePointStateChangeData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.NotifyChargePointStateChangeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyChargePointStateChangeData {
    fn default() -> &'a NotifyChargePointStateChangeData {
        <NotifyChargePointStateChangeData as ::protobuf::Message>::default_instance()
    }
}

impl NotifyChargePointStateChangeData {
    pub fn new() -> NotifyChargePointStateChangeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &NotifyChargePointStateChangeData| { &m.charge_point_client_id },
            |m: &mut NotifyChargePointStateChangeData| { &mut m.charge_point_client_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<NotifyChargePointStateChangeData>(
            "NotifyChargePointStateChangeData",
            fields,
        )
    }
}

impl ::protobuf::Message for NotifyChargePointStateChangeData {
    const NAME: &'static str = "NotifyChargePointStateChangeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> NotifyChargePointStateChangeData {
        NotifyChargePointStateChangeData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyChargePointStateChangeData {
        static instance: NotifyChargePointStateChangeData = NotifyChargePointStateChangeData {
            charge_point_client_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotifyChargePointStateChangeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyChargePointStateChangeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyChargePointStateChangeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyChargePointStateChangeData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:gateway.Response.error)
    pub error: bool,
    // @@protoc_insertion_point(field:gateway.Response.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Response| { &m.message },
            |m: &mut Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Response>(
            "Response",
            fields,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            error: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  EVChargingStatusData contains status of the current ongoing charging
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.EVChargingStatusData)
pub struct EVChargingStatusData {
    // message fields
    ///  the electrical current offered to EV
    // @@protoc_insertion_point(field:gateway.EVChargingStatusData.current_offered)
    pub current_offered: f32,
    ///  the current offered value unit - A
    // @@protoc_insertion_point(field:gateway.EVChargingStatusData.current_unit)
    pub current_unit: ::std::string::String,
    ///  the electrical voltage offered to EV
    // @@protoc_insertion_point(field:gateway.EVChargingStatusData.voltage_offered)
    pub voltage_offered: f32,
    ///  the voltage offered value unit - V
    // @@protoc_insertion_point(field:gateway.EVChargingStatusData.voltage_unit)
    pub voltage_unit: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.EVChargingStatusData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EVChargingStatusData {
    fn default() -> &'a EVChargingStatusData {
        <EVChargingStatusData as ::protobuf::Message>::default_instance()
    }
}

impl EVChargingStatusData {
    pub fn new() -> EVChargingStatusData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_offered",
            |m: &EVChargingStatusData| { &m.current_offered },
            |m: &mut EVChargingStatusData| { &mut m.current_offered },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_unit",
            |m: &EVChargingStatusData| { &m.current_unit },
            |m: &mut EVChargingStatusData| { &mut m.current_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voltage_offered",
            |m: &EVChargingStatusData| { &m.voltage_offered },
            |m: &mut EVChargingStatusData| { &mut m.voltage_offered },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "voltage_unit",
            |m: &EVChargingStatusData| { &m.voltage_unit },
            |m: &mut EVChargingStatusData| { &mut m.voltage_unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<EVChargingStatusData>(
            "EVChargingStatusData",
            fields,
        )
    }
}

impl ::protobuf::Message for EVChargingStatusData {
    const NAME: &'static str = "EVChargingStatusData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.current_offered = is.read_float()?;
                },
                18 => {
                    self.current_unit = is.read_string()?;
                },
                29 => {
                    self.voltage_offered = is.read_float()?;
                },
                34 => {
                    self.voltage_unit = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.current_offered != 0. {
            my_size += 5;
        }
        if !self.current_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.current_unit);
        }
        if self.voltage_offered != 0. {
            my_size += 5;
        }
        if !self.voltage_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.voltage_unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.current_offered != 0. {
            os.write_float(1, self.current_offered)?;
        }
        if !self.current_unit.is_empty() {
            os.write_string(2, &self.current_unit)?;
        }
        if self.voltage_offered != 0. {
            os.write_float(3, self.voltage_offered)?;
        }
        if !self.voltage_unit.is_empty() {
            os.write_string(4, &self.voltage_unit)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> EVChargingStatusData {
        EVChargingStatusData::new()
    }

    fn clear(&mut self) {
        self.current_offered = 0.;
        self.current_unit.clear();
        self.voltage_offered = 0.;
        self.voltage_unit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EVChargingStatusData {
        static instance: EVChargingStatusData = EVChargingStatusData {
            current_offered: 0.,
            current_unit: ::std::string::String::new(),
            voltage_offered: 0.,
            voltage_unit: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EVChargingStatusData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EVChargingStatusData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EVChargingStatusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EVChargingStatusData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StopTransactionRequestData)
pub struct StopTransactionRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StopTransactionRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StopTransactionRequestData.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.StopTransactionRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StopTransactionRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopTransactionRequestData {
    fn default() -> &'a StopTransactionRequestData {
        <StopTransactionRequestData as ::protobuf::Message>::default_instance()
    }
}

impl StopTransactionRequestData {
    pub fn new() -> StopTransactionRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &StopTransactionRequestData| { &m.charge_point_client_id },
            |m: &mut StopTransactionRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &StopTransactionRequestData| { &m.connector_id },
            |m: &mut StopTransactionRequestData| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StopTransactionRequestData| { &m.consumer_public_key },
            |m: &mut StopTransactionRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopTransactionRequestData>(
            "StopTransactionRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopTransactionRequestData {
    const NAME: &'static str = "StopTransactionRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                26 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(3, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopTransactionRequestData {
        StopTransactionRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopTransactionRequestData {
        static instance: StopTransactionRequestData = StopTransactionRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopTransactionRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopTransactionRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopTransactionRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopTransactionRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StopTransactionResponseData)
pub struct StopTransactionResponseData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StopTransactionResponseData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StopTransactionResponseData.transaction_info)
    pub transaction_info: ::protobuf::MessageField<TransactionInfo>,
    // @@protoc_insertion_point(field:gateway.StopTransactionResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StopTransactionResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopTransactionResponseData {
    fn default() -> &'a StopTransactionResponseData {
        <StopTransactionResponseData as ::protobuf::Message>::default_instance()
    }
}

impl StopTransactionResponseData {
    pub fn new() -> StopTransactionResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StopTransactionResponseData| { &m.consumer_public_key },
            |m: &mut StopTransactionResponseData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionInfo>(
            "transaction_info",
            |m: &StopTransactionResponseData| { &m.transaction_info },
            |m: &mut StopTransactionResponseData| { &mut m.transaction_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StopTransactionResponseData| { &m.resp },
            |m: &mut StopTransactionResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopTransactionResponseData>(
            "StopTransactionResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopTransactionResponseData {
    const NAME: &'static str = "StopTransactionResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.transaction_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction_info)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.transaction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.transaction_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopTransactionResponseData {
        StopTransactionResponseData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.transaction_info.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopTransactionResponseData {
        static instance: StopTransactionResponseData = StopTransactionResponseData {
            consumer_public_key: ::std::string::String::new(),
            transaction_info: ::protobuf::MessageField::none(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopTransactionResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopTransactionResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopTransactionResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopTransactionResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ChargePointState defined connected charge point state data
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ChargePointState)
pub struct ChargePointState {
    // message fields
    // @@protoc_insertion_point(field:gateway.ChargePointState.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.ChargePointState.status)
    pub status: ::std::string::String,
    ///  Charge point connector data using connector Id as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.connectors)
    pub connectors: ::std::collections::HashMap<i32, ConnectorInfo>,
    ///  Charge point transactions data using transaction Id as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.transactions)
    pub transactions: ::std::collections::HashMap<i32, TransactionInfo>,
    ///  current auth data using IdTag as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.auth_list)
    pub auth_list: ::std::collections::HashMap<::std::string::String, ConsumerAuthData>,
    ///  used to inncrement local auth list version
    ///  ocpp requires SendLocalAuthList request to contain new version
    // @@protoc_insertion_point(field:gateway.ChargePointState.current_auth_list_version)
    pub current_auth_list_version: i32,
    ///  used to inncrement transacton Ids by keep the last transaction Id
    // @@protoc_insertion_point(field:gateway.ChargePointState.current_transaction_id)
    pub current_transaction_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ChargePointState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargePointState {
    fn default() -> &'a ChargePointState {
        <ChargePointState as ::protobuf::Message>::default_instance()
    }
}

impl ChargePointState {
    pub fn new() -> ChargePointState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ChargePointState| { &m.id },
            |m: &mut ChargePointState| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ChargePointState| { &m.status },
            |m: &mut ChargePointState| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "connectors",
            |m: &ChargePointState| { &m.connectors },
            |m: &mut ChargePointState| { &mut m.connectors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "transactions",
            |m: &ChargePointState| { &m.transactions },
            |m: &mut ChargePointState| { &mut m.transactions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "auth_list",
            |m: &ChargePointState| { &m.auth_list },
            |m: &mut ChargePointState| { &mut m.auth_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_auth_list_version",
            |m: &ChargePointState| { &m.current_auth_list_version },
            |m: &mut ChargePointState| { &mut m.current_auth_list_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_transaction_id",
            |m: &ChargePointState| { &m.current_transaction_id },
            |m: &mut ChargePointState| { &mut m.current_transaction_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ChargePointState>(
            "ChargePointState",
            fields,
        )
    }
}

impl ::protobuf::Message for ChargePointState {
    const NAME: &'static str = "ChargePointState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.status = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(is, &mut self.connectors)?;
                },
                34 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(is, &mut self.transactions)?;
                },
                42 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(is, &mut self.auth_list)?;
                },
                48 => {
                    self.current_auth_list_version = is.read_int32()?;
                },
                56 => {
                    self.current_transaction_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(3, &self.connectors);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(4, &self.transactions);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(5, &self.auth_list);
        if self.current_auth_list_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.current_auth_list_version, ::protobuf::rt::WireType::Varint);
        }
        if self.current_transaction_id != 0 {
            my_size += ::protobuf::rt::value_size(7, self.current_transaction_id, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(3, &self.connectors, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(4, &self.transactions, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(5, &self.auth_list, os)?;
        if self.current_auth_list_version != 0 {
            os.write_int32(6, self.current_auth_list_version)?;
        }
        if self.current_transaction_id != 0 {
            os.write_int32(7, self.current_transaction_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ChargePointState {
        ChargePointState::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.status.clear();
        self.connectors.clear();
        self.transactions.clear();
        self.auth_list.clear();
        self.current_auth_list_version = 0;
        self.current_transaction_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargePointState {
        static instance: ::protobuf::rt::Lazy<ChargePointState> = ::protobuf::rt::Lazy::new();
        instance.get(ChargePointState::new)
    }
}

impl ::protobuf::MessageFull for ChargePointState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargePointState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargePointState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargePointState {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ConnectorInfo contains status and ongoing transaction ID for a connector
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ConnectorInfo)
pub struct ConnectorInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.id)
    pub id: i32,
    ///  status of the connector e.g AVAILABLE, PREPARING, CHARGING
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.status)
    pub status: ::std::string::String,
    ///  holds the current Id of ongoing transacton
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.current_transaction)
    pub current_transaction: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ConnectorInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectorInfo {
    fn default() -> &'a ConnectorInfo {
        <ConnectorInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConnectorInfo {
    pub fn new() -> ConnectorInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ConnectorInfo| { &m.id },
            |m: &mut ConnectorInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ConnectorInfo| { &m.status },
            |m: &mut ConnectorInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_transaction",
            |m: &ConnectorInfo| { &m.current_transaction },
            |m: &mut ConnectorInfo| { &mut m.current_transaction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ConnectorInfo>(
            "ConnectorInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for ConnectorInfo {
    const NAME: &'static str = "ConnectorInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.status = is.read_string()?;
                },
                24 => {
                    self.current_transaction = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::rt::WireType::Varint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        if self.current_transaction != 0 {
            my_size += ::protobuf::rt::value_size(3, self.current_transaction, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        if self.current_transaction != 0 {
            os.write_int32(3, self.current_transaction)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ConnectorInfo {
        ConnectorInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status.clear();
        self.current_transaction = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectorInfo {
        static instance: ConnectorInfo = ConnectorInfo {
            id: 0,
            status: ::std::string::String::new(),
            current_transaction: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectorInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectorInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectorInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectorInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  TransactionInfo contains info about a transaction
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.TransactionInfo)
pub struct TransactionInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.TransactionInfo.id)
    pub id: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.id_tag)
    pub id_tag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.start_time)
    pub start_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.end_time)
    pub end_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.start_meter)
    pub start_meter: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.end_meter)
    pub end_meter: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.progress)
    pub progress: ::protobuf::MessageField<EVChargingStatusData>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.TransactionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransactionInfo {
    fn default() -> &'a TransactionInfo {
        <TransactionInfo as ::protobuf::Message>::default_instance()
    }
}

impl TransactionInfo {
    pub fn new() -> TransactionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TransactionInfo| { &m.id },
            |m: &mut TransactionInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id_tag",
            |m: &TransactionInfo| { &m.id_tag },
            |m: &mut TransactionInfo| { &mut m.id_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &TransactionInfo| { &m.connector_id },
            |m: &mut TransactionInfo| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &TransactionInfo| { &m.start_time },
            |m: &mut TransactionInfo| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &TransactionInfo| { &m.end_time },
            |m: &mut TransactionInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_meter",
            |m: &TransactionInfo| { &m.start_meter },
            |m: &mut TransactionInfo| { &mut m.start_meter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_meter",
            |m: &TransactionInfo| { &m.end_meter },
            |m: &mut TransactionInfo| { &mut m.end_meter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EVChargingStatusData>(
            "progress",
            |m: &TransactionInfo| { &m.progress },
            |m: &mut TransactionInfo| { &mut m.progress },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<TransactionInfo>(
            "TransactionInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for TransactionInfo {
    const NAME: &'static str = "TransactionInfo";

    fn is_initialized(&self) -> bool {
        for v in &self.progress {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.id_tag = is.read_string()?;
                },
                24 => {
                    self.connector_id = is.read_int32()?;
                },
                34 => {
                    self.start_time = is.read_string()?;
                },
                42 => {
                    self.end_time = is.read_string()?;
                },
                48 => {
                    self.start_meter = is.read_int32()?;
                },
                56 => {
                    self.end_meter = is.read_int32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.progress)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::rt::WireType::Varint);
        }
        if !self.id_tag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id_tag);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.start_time.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.start_time);
        }
        if !self.end_time.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.end_time);
        }
        if self.start_meter != 0 {
            my_size += ::protobuf::rt::value_size(6, self.start_meter, ::protobuf::rt::WireType::Varint);
        }
        if self.end_meter != 0 {
            my_size += ::protobuf::rt::value_size(7, self.end_meter, ::protobuf::rt::WireType::Varint);
        }
        if let Some(v) = self.progress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.id_tag.is_empty() {
            os.write_string(2, &self.id_tag)?;
        }
        if self.connector_id != 0 {
            os.write_int32(3, self.connector_id)?;
        }
        if !self.start_time.is_empty() {
            os.write_string(4, &self.start_time)?;
        }
        if !self.end_time.is_empty() {
            os.write_string(5, &self.end_time)?;
        }
        if self.start_meter != 0 {
            os.write_int32(6, self.start_meter)?;
        }
        if self.end_meter != 0 {
            os.write_int32(7, self.end_meter)?;
        }
        if let Some(v) = self.progress.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> TransactionInfo {
        TransactionInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.id_tag.clear();
        self.connector_id = 0;
        self.start_time.clear();
        self.end_time.clear();
        self.start_meter = 0;
        self.end_meter = 0;
        self.progress.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransactionInfo {
        static instance: TransactionInfo = TransactionInfo {
            id: 0,
            id_tag: ::std::string::String::new(),
            connector_id: 0,
            start_time: ::std::string::String::new(),
            end_time: ::std::string::String::new(),
            start_meter: 0,
            end_meter: 0,
            progress: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransactionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransactionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransactionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ConsumerAuthData contains the consumer public key assigned to the local
///  authorized data. This keeps track of consumer auth ownership.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ConsumerAuthData)
pub struct ConsumerAuthData {
    // message fields
    ///  consumer of the service public key
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.public_key)
    pub public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.transaction_id)
    pub transaction_id: i32,
    ///  local charge point auth data assigned to consumer
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.auth_data)
    pub auth_data: ::protobuf::MessageField<LocalAuthorizationData>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ConsumerAuthData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsumerAuthData {
    fn default() -> &'a ConsumerAuthData {
        <ConsumerAuthData as ::protobuf::Message>::default_instance()
    }
}

impl ConsumerAuthData {
    pub fn new() -> ConsumerAuthData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &ConsumerAuthData| { &m.public_key },
            |m: &mut ConsumerAuthData| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transaction_id",
            |m: &ConsumerAuthData| { &m.transaction_id },
            |m: &mut ConsumerAuthData| { &mut m.transaction_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LocalAuthorizationData>(
            "auth_data",
            |m: &ConsumerAuthData| { &m.auth_data },
            |m: &mut ConsumerAuthData| { &mut m.auth_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ConsumerAuthData>(
            "ConsumerAuthData",
            fields,
        )
    }
}

impl ::protobuf::Message for ConsumerAuthData {
    const NAME: &'static str = "ConsumerAuthData";

    fn is_initialized(&self) -> bool {
        for v in &self.auth_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = is.read_string()?;
                },
                16 => {
                    self.transaction_id = is.read_int32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.public_key);
        }
        if self.transaction_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.transaction_id, ::protobuf::rt::WireType::Varint);
        }
        if let Some(v) = self.auth_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.public_key.is_empty() {
            os.write_string(1, &self.public_key)?;
        }
        if self.transaction_id != 0 {
            os.write_int32(2, self.transaction_id)?;
        }
        if let Some(v) = self.auth_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ConsumerAuthData {
        ConsumerAuthData::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.transaction_id = 0;
        self.auth_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsumerAuthData {
        static instance: ConsumerAuthData = ConsumerAuthData {
            public_key: ::std::string::String::new(),
            transaction_id: 0,
            auth_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsumerAuthData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsumerAuthData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsumerAuthData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsumerAuthData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.LocalAuthorizationData)
pub struct LocalAuthorizationData {
    // message fields
    // @@protoc_insertion_point(field:gateway.LocalAuthorizationData.idTag)
    pub idTag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.LocalAuthorizationData.idTagInfo)
    pub idTagInfo: ::protobuf::MessageField<IdTagInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.LocalAuthorizationData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LocalAuthorizationData {
    fn default() -> &'a LocalAuthorizationData {
        <LocalAuthorizationData as ::protobuf::Message>::default_instance()
    }
}

impl LocalAuthorizationData {
    pub fn new() -> LocalAuthorizationData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idTag",
            |m: &LocalAuthorizationData| { &m.idTag },
            |m: &mut LocalAuthorizationData| { &mut m.idTag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IdTagInfo>(
            "idTagInfo",
            |m: &LocalAuthorizationData| { &m.idTagInfo },
            |m: &mut LocalAuthorizationData| { &mut m.idTagInfo },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<LocalAuthorizationData>(
            "LocalAuthorizationData",
            fields,
        )
    }
}

impl ::protobuf::Message for LocalAuthorizationData {
    const NAME: &'static str = "LocalAuthorizationData";

    fn is_initialized(&self) -> bool {
        for v in &self.idTagInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.idTag = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.idTagInfo)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.idTag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.idTag);
        }
        if let Some(v) = self.idTagInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.idTag.is_empty() {
            os.write_string(1, &self.idTag)?;
        }
        if let Some(v) = self.idTagInfo.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> LocalAuthorizationData {
        LocalAuthorizationData::new()
    }

    fn clear(&mut self) {
        self.idTag.clear();
        self.idTagInfo.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LocalAuthorizationData {
        static instance: LocalAuthorizationData = LocalAuthorizationData {
            idTag: ::std::string::String::new(),
            idTagInfo: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LocalAuthorizationData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LocalAuthorizationData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LocalAuthorizationData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalAuthorizationData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.IdTagInfo)
pub struct IdTagInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.IdTagInfo.expiryDate)
    pub expiryDate: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.IdTagInfo.parentIdTag)
    pub parentIdTag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.IdTagInfo.status)
    pub status: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.IdTagInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdTagInfo {
    fn default() -> &'a IdTagInfo {
        <IdTagInfo as ::protobuf::Message>::default_instance()
    }
}

impl IdTagInfo {
    pub fn new() -> IdTagInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiryDate",
            |m: &IdTagInfo| { &m.expiryDate },
            |m: &mut IdTagInfo| { &mut m.expiryDate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parentIdTag",
            |m: &IdTagInfo| { &m.parentIdTag },
            |m: &mut IdTagInfo| { &mut m.parentIdTag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &IdTagInfo| { &m.status },
            |m: &mut IdTagInfo| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<IdTagInfo>(
            "IdTagInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for IdTagInfo {
    const NAME: &'static str = "IdTagInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.expiryDate = is.read_string()?;
                },
                18 => {
                    self.parentIdTag = is.read_string()?;
                },
                26 => {
                    self.status = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.expiryDate.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.expiryDate);
        }
        if !self.parentIdTag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.parentIdTag);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.expiryDate.is_empty() {
            os.write_string(1, &self.expiryDate)?;
        }
        if !self.parentIdTag.is_empty() {
            os.write_string(2, &self.parentIdTag)?;
        }
        if !self.status.is_empty() {
            os.write_string(3, &self.status)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> IdTagInfo {
        IdTagInfo::new()
    }

    fn clear(&mut self) {
        self.expiryDate.clear();
        self.parentIdTag.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdTagInfo {
        static instance: IdTagInfo = IdTagInfo {
            expiryDate: ::std::string::String::new(),
            parentIdTag: ::std::string::String::new(),
            status: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdTagInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdTagInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdTagInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdTagInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!charge_point_gateway_format.proto\x12\x07gateway\"\x95\x03\n\x1bBootN\
    otificationRequestData\x127\n\x18charge_box_serial_number\x18\x01\x20\
    \x01(\tR\x15chargeBoxSerialNumber\x12,\n\x12charge_point_model\x18\x02\
    \x20\x01(\tR\x10chargePointModel\x12;\n\x1aCharge_point_serial_number\
    \x18\x03\x20\x01(\tR\x17ChargePointSerialNumber\x12.\n\x13Charge_point_v\
    endor\x18\x04\x20\x01(\tR\x11ChargePointVendor\x12)\n\x10firmware_versio\
    n\x18\x05\x20\x01(\tR\x0ffirmwareVersion\x12\x14\n\x05iccid\x18\x06\x20\
    \x01(\tR\x05iccid\x12\x12\n\x04imsi\x18\x07\x20\x01(\tR\x04imsi\x12.\n\
    \x13meter_serial_number\x18\x08\x20\x01(\tR\x11meterSerialNumber\x12\x1d\
    \n\nmeter_type\x18\t\x20\x01(\tR\tmeterType\"S\n\x07LogData\x12!\n\x0ccu\
    rrent_time\x18\x01\x20\x01(\tR\x0bcurrentTime\x12%\n\x04resp\x18\x02\x20\
    \x01(\x0b2\x11.gateway.ResponseR\x04resp\"{\n\x14AuthorizeRequestData\
    \x123\n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargePointClie\
    ntId\x12.\n\x13consumer_public_key\x18\x02\x20\x01(\tR\x11consumerPublic\
    Key\"n\n\x15AuthorizeResponseData\x12.\n\x13consumer_public_key\x18\x01\
    \x20\x01(\tR\x11consumerPublicKey\x12%\n\x04resp\x18\x02\x20\x01(\x0b2\
    \x11.gateway.ResponseR\x04resp\"v\n\x1cCheckAvailabilityRequestData\x123\
    \n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargePointClientId\
    \x12!\n\x0cconnector_id\x18\x02\x20\x01(\x05R\x0bconnectorId\"F\n\x1dChe\
    ckAvailabilityResponseData\x12%\n\x04resp\x18\x01\x20\x01(\x0b2\x11.gate\
    way.ResponseR\x04resp\"\xa5\x01\n\x1bStartTransactionRequestData\x123\n\
    \x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargePointClientId\
    \x12!\n\x0cconnector_id\x18\x02\x20\x01(\x05R\x0bconnectorId\x12.\n\x13c\
    onsumer_public_key\x18\x03\x20\x01(\tR\x11consumerPublicKey\"u\n\x1cStar\
    tTransactionResponseData\x12.\n\x13consumer_public_key\x18\x01\x20\x01(\
    \tR\x11consumerPublicKey\x12%\n\x04resp\x18\x02\x20\x01(\x0b2\x11.gatewa\
    y.ResponseR\x04resp\"W\n\x20NotifyChargePointStateChangeData\x123\n\x16c\
    harge_point_client_id\x18\x01\x20\x01(\tR\x13chargePointClientId\":\n\
    \x08Response\x12\x14\n\x05error\x18\x01\x20\x01(\x08R\x05error\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07message\"\xae\x01\n\x14EVChargingStat\
    usData\x12'\n\x0fcurrent_offered\x18\x01\x20\x01(\x02R\x0ecurrentOffered\
    \x12!\n\x0ccurrent_unit\x18\x02\x20\x01(\tR\x0bcurrentUnit\x12'\n\x0fvol\
    tage_offered\x18\x03\x20\x01(\x02R\x0evoltageOffered\x12!\n\x0cvoltage_u\
    nit\x18\x04\x20\x01(\tR\x0bvoltageUnit\"\xa4\x01\n\x1aStopTransactionReq\
    uestData\x123\n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargeP\
    ointClientId\x12!\n\x0cconnector_id\x18\x02\x20\x01(\x05R\x0bconnectorId\
    \x12.\n\x13consumer_public_key\x18\x03\x20\x01(\tR\x11consumerPublicKey\
    \"\xb9\x01\n\x1bStopTransactionResponseData\x12.\n\x13consumer_public_ke\
    y\x18\x01\x20\x01(\tR\x11consumerPublicKey\x12C\n\x10transaction_info\
    \x18\x02\x20\x01(\x0b2\x18.gateway.TransactionInfoR\x0ftransactionInfo\
    \x12%\n\x04resp\x18\x03\x20\x01(\x0b2\x11.gateway.ResponseR\x04resp\"\
    \x97\x05\n\x10ChargePointState\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\x12I\n\nconnectors\
    \x18\x03\x20\x03(\x0b2).gateway.ChargePointState.ConnectorsEntryR\nconne\
    ctors\x12O\n\x0ctransactions\x18\x04\x20\x03(\x0b2+.gateway.ChargePointS\
    tate.TransactionsEntryR\x0ctransactions\x12D\n\tauth_list\x18\x05\x20\
    \x03(\x0b2'.gateway.ChargePointState.AuthListEntryR\x08authList\x129\n\
    \x19current_auth_list_version\x18\x06\x20\x01(\x05R\x16currentAuthListVe\
    rsion\x124\n\x16current_transaction_id\x18\x07\x20\x01(\x05R\x14currentT\
    ransactionId\x1aU\n\x0fConnectorsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \x05R\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.gateway.Connector\
    InfoR\x05value:\x028\x01\x1aY\n\x11TransactionsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\x05R\x03key\x12.\n\x05value\x18\x02\x20\x01(\x0b2\x18.\
    gateway.TransactionInfoR\x05value:\x028\x01\x1aV\n\rAuthListEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12/\n\x05value\x18\x02\x20\x01\
    (\x0b2\x19.gateway.ConsumerAuthDataR\x05value:\x028\x01\"h\n\rConnectorI\
    nfo\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x16\n\x06status\x18\
    \x02\x20\x01(\tR\x06status\x12/\n\x13current_transaction\x18\x03\x20\x01\
    (\x05R\x12currentTransaction\"\x8e\x02\n\x0fTransactionInfo\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x05R\x02id\x12\x15\n\x06id_tag\x18\x02\x20\x01(\
    \tR\x05idTag\x12!\n\x0cconnector_id\x18\x03\x20\x01(\x05R\x0bconnectorId\
    \x12\x1d\n\nstart_time\x18\x04\x20\x01(\tR\tstartTime\x12\x19\n\x08end_t\
    ime\x18\x05\x20\x01(\tR\x07endTime\x12\x1f\n\x0bstart_meter\x18\x06\x20\
    \x01(\x05R\nstartMeter\x12\x1b\n\tend_meter\x18\x07\x20\x01(\x05R\x08end\
    Meter\x129\n\x08progress\x18\x08\x20\x01(\x0b2\x1d.gateway.EVChargingSta\
    tusDataR\x08progress\"\x96\x01\n\x10ConsumerAuthData\x12\x1d\n\npublic_k\
    ey\x18\x01\x20\x01(\tR\tpublicKey\x12%\n\x0etransaction_id\x18\x02\x20\
    \x01(\x05R\rtransactionId\x12<\n\tauth_data\x18\x03\x20\x01(\x0b2\x1f.ga\
    teway.LocalAuthorizationDataR\x08authData\"`\n\x16LocalAuthorizationData\
    \x12\x14\n\x05idTag\x18\x01\x20\x01(\tR\x05idTag\x120\n\tidTagInfo\x18\
    \x02\x20\x01(\x0b2\x12.gateway.IdTagInfoR\tidTagInfo\"e\n\tIdTagInfo\x12\
    \x1e\n\nexpiryDate\x18\x01\x20\x01(\tR\nexpiryDate\x12\x20\n\x0bparentId\
    Tag\x18\x02\x20\x01(\tR\x0bparentIdTag\x12\x16\n\x06status\x18\x03\x20\
    \x01(\tR\x06statusBWZUgithub.com/peaqnetwork/peaq-network-ev-charging-me\
    ssage-format/golang/gateway;gatewayJ\xa6'\n\x07\x12\x05\0\0\x87\x01\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x10\n\x08\
    \n\x01\x08\x12\x03\x03\0l\n\t\n\x02\x08\x0b\x12\x03\x03\0l\n\n\n\x02\x04\
    \0\x12\x04\x05\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08#\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x06\x02&\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x06\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\t!\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x06$%\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x02\x20\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x07\t\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x1e\
    \x1f\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x02(\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\t\
    #\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08&'\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\t\x02!\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\t\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\t\t\x1c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\t\x1f\x20\n\x0b\n\x04\x04\0\x02\x04\x12\x03\n\x02\x1e\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\n\t\x19\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\n\x1c\x1d\n\x0b\n\x04\
    \x04\0\x02\x05\x12\x03\x0b\x02\x13\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\
    \x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0b\t\x0e\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03\x0b\x11\x12\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \x0c\x02\x12\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03\x0c\t\r\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x0c\x10\x11\n\x0b\n\x04\x04\0\x02\x07\x12\x03\r\x02!\n\x0c\n\x05\
    \x04\0\x02\x07\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\
    \x03\r\t\x1c\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\r\x1f\x20\n\x0b\n\x04\
    \x04\0\x02\x08\x12\x03\x0e\x02\x18\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\
    \x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0e\t\x13\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03\x0e\x16\x17\n\n\n\x02\x04\x01\x12\x04\x11\0\
    \x14\x01\n\n\n\x03\x04\x01\x01\x12\x03\x11\x08\x0f\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x12\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x12\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12\t\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x12\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x13\
    \x02\x14\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x13\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x13\x12\x13\n\n\n\x02\x04\x02\x12\x04\x16\0\x19\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x16\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\
    \x02$\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x17\t\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x17\"#\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\x02!\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x18\t\x1c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x1f\x20\n\n\n\x02\
    \x04\x03\x12\x04\x1a\0\x1d\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1a\x08\x1d\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1b\x02!\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1b\t\x1c\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1b\x1f\x20\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03\x1c\x02\x14\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1c\
    \x02\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1c\x0b\x0f\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03\x1c\x12\x13\n\n\n\x02\x04\x04\x12\x04\x1f\0\
    \"\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1f\x08$\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x20\x02$\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x20\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x20\t\x1f\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03\x20\"#\n\x0b\n\x04\x04\x04\x02\x01\x12\x03!\x02\x19\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03!\x08\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03!\x17\x18\n\
    \t\n\x02\x04\x05\x12\x03#\0<\n\n\n\x03\x04\x05\x01\x12\x03#\x08%\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03#(:\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03#(0\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03#15\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03#89\n\n\n\x02\x04\x06\x12\x04%\0)\x01\n\n\n\x03\x04\x06\x01\x12\
    \x03%\x08#\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x02$\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03&\t\x1f\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03&\"#\n\x0b\n\x04\x04\x06\x02\x01\
    \x12\x03'\x02\x19\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03'\x02\x07\n\x0c\
    \n\x05\x04\x06\x02\x01\x01\x12\x03'\x08\x14\n\x0c\n\x05\x04\x06\x02\x01\
    \x03\x12\x03'\x17\x18\n\x0b\n\x04\x04\x06\x02\x02\x12\x03(\x02!\n\x0c\n\
    \x05\x04\x06\x02\x02\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\
    \x01\x12\x03(\t\x1c\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03(\x1f\x20\n\n\
    \n\x02\x04\x07\x12\x04*\0-\x01\n\n\n\x03\x04\x07\x01\x12\x03*\x08$\n\x0b\
    \n\x04\x04\x07\x02\0\x12\x03+\x02!\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03\
    +\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03+\t\x1c\n\x0c\n\x05\x04\
    \x07\x02\0\x03\x12\x03+\x1f\x20\n\x0b\n\x04\x04\x07\x02\x01\x12\x03,\x02\
    \x14\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03,\x02\n\n\x0c\n\x05\x04\x07\
    \x02\x01\x01\x12\x03,\x0b\x0f\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03,\
    \x12\x13\n\t\n\x02\x04\x08\x12\x03/\0O\n\n\n\x03\x04\x08\x01\x12\x03/\
    \x08(\n\x0b\n\x04\x04\x08\x02\0\x12\x03/+M\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x03/+1\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03/2H\n\x0c\n\x05\x04\x08\
    \x02\0\x03\x12\x03/KL\n\n\n\x02\x04\t\x12\x041\04\x01\n\n\n\x03\x04\t\
    \x01\x12\x031\x08\x10\n\x0b\n\x04\x04\t\x02\0\x12\x032\x02\x11\n\x0c\n\
    \x05\x04\t\x02\0\x05\x12\x032\x02\x06\n\x0c\n\x05\x04\t\x02\0\x01\x12\
    \x032\x07\x0c\n\x0c\n\x05\x04\t\x02\0\x03\x12\x032\x0f\x10\n\x0b\n\x04\
    \x04\t\x02\x01\x12\x033\x02\x15\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x033\
    \x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x033\t\x10\n\x0c\n\x05\x04\t\
    \x02\x01\x03\x12\x033\x13\x14\nR\n\x02\x04\n\x12\x047\0@\x01\x1aF\x20EVC\
    hargingStatusData\x20contains\x20status\x20of\x20the\x20current\x20ongoi\
    ng\x20charging\n\n\n\n\x03\x04\n\x01\x12\x037\x08\x1c\n3\n\x04\x04\n\x02\
    \0\x12\x039\x02\x1c\x1a&\x20the\x20electrical\x20current\x20offered\x20t\
    o\x20EV\n\n\x0c\n\x05\x04\n\x02\0\x05\x12\x039\x02\x07\n\x0c\n\x05\x04\n\
    \x02\0\x01\x12\x039\x08\x17\n\x0c\n\x05\x04\n\x02\0\x03\x12\x039\x1a\x1b\
    \n1\n\x04\x04\n\x02\x01\x12\x03;\x02\x1a\x1a$\x20the\x20current\x20offer\
    ed\x20value\x20unit\x20-\x20A\n\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03;\
    \x02\x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03;\t\x15\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03;\x18\x19\n3\n\x04\x04\n\x02\x02\x12\x03=\x02\x1c\
    \x1a&\x20the\x20electrical\x20voltage\x20offered\x20to\x20EV\n\n\x0c\n\
    \x05\x04\n\x02\x02\x05\x12\x03=\x02\x07\n\x0c\n\x05\x04\n\x02\x02\x01\
    \x12\x03=\x08\x17\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03=\x1a\x1b\n1\n\
    \x04\x04\n\x02\x03\x12\x03?\x02\x1a\x1a$\x20the\x20voltage\x20offered\
    \x20value\x20unit\x20-\x20V\n\n\x0c\n\x05\x04\n\x02\x03\x05\x12\x03?\x02\
    \x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03?\t\x15\n\x0c\n\x05\x04\n\x02\
    \x03\x03\x12\x03?\x18\x19\n\n\n\x02\x04\x0b\x12\x04B\0F\x01\n\n\n\x03\
    \x04\x0b\x01\x12\x03B\x08\"\n\x0b\n\x04\x04\x0b\x02\0\x12\x03C\x02$\n\
    \x0c\n\x05\x04\x0b\x02\0\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\x0b\x02\0\
    \x01\x12\x03C\t\x1f\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03C\"#\n\x0b\n\
    \x04\x04\x0b\x02\x01\x12\x03D\x02\x19\n\x0c\n\x05\x04\x0b\x02\x01\x05\
    \x12\x03D\x02\x07\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03D\x08\x14\n\x0c\
    \n\x05\x04\x0b\x02\x01\x03\x12\x03D\x17\x18\n\x0b\n\x04\x04\x0b\x02\x02\
    \x12\x03E\x02!\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\x03E\x02\x08\n\x0c\n\
    \x05\x04\x0b\x02\x02\x01\x12\x03E\t\x1c\n\x0c\n\x05\x04\x0b\x02\x02\x03\
    \x12\x03E\x1f\x20\n\n\n\x02\x04\x0c\x12\x04H\0L\x01\n\n\n\x03\x04\x0c\
    \x01\x12\x03H\x08#\n\x0b\n\x04\x04\x0c\x02\0\x12\x03I\x02!\n\x0c\n\x05\
    \x04\x0c\x02\0\x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\
    \x03I\t\x1c\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03I\x1f\x20\n\x0b\n\x04\
    \x04\x0c\x02\x01\x12\x03J\x02'\n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\x03J\
    \x02\x11\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03J\x12\"\n\x0c\n\x05\x04\
    \x0c\x02\x01\x03\x12\x03J%&\n\x0b\n\x04\x04\x0c\x02\x02\x12\x03K\x02\x14\
    \n\x0c\n\x05\x04\x0c\x02\x02\x06\x12\x03K\x02\n\n\x0c\n\x05\x04\x0c\x02\
    \x02\x01\x12\x03K\x0b\x0f\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03K\x12\
    \x13\nH\n\x02\x04\r\x12\x04O\0]\x01\x1a<\x20ChargePointState\x20defined\
    \x20connected\x20charge\x20point\x20state\x20data\n\n\n\n\x03\x04\r\x01\
    \x12\x03O\x08\x18\n\x0b\n\x04\x04\r\x02\0\x12\x03P\x02\x10\n\x0c\n\x05\
    \x04\r\x02\0\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03P\t\
    \x0b\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03P\x0e\x0f\n\x0b\n\x04\x04\r\x02\
    \x01\x12\x03Q\x02\x14\n\x0c\n\x05\x04\r\x02\x01\x05\x12\x03Q\x02\x08\n\
    \x0c\n\x05\x04\r\x02\x01\x01\x12\x03Q\t\x0f\n\x0c\n\x05\x04\r\x02\x01\
    \x03\x12\x03Q\x12\x13\nD\n\x04\x04\r\x02\x02\x12\x03S\x02+\x1a7\x20Charg\
    e\x20point\x20connector\x20data\x20using\x20connector\x20Id\x20as\x20key\
    \n\n\x0c\n\x05\x04\r\x02\x02\x06\x12\x03S\x02\x1b\n\x0c\n\x05\x04\r\x02\
    \x02\x01\x12\x03S\x1c&\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03S)*\nI\n\x04\
    \x04\r\x02\x03\x12\x03U\x02/\x1a<\x20Charge\x20point\x20transactions\x20\
    data\x20using\x20transaction\x20Id\x20as\x20key\n\n\x0c\n\x05\x04\r\x02\
    \x03\x06\x12\x03U\x02\x1d\n\x0c\n\x05\x04\r\x02\x03\x01\x12\x03U\x1e*\n\
    \x0c\n\x05\x04\r\x02\x03\x03\x12\x03U-.\n3\n\x04\x04\r\x02\x04\x12\x03W\
    \x02.\x1a&\x20current\x20auth\x20data\x20using\x20IdTag\x20as\x20key\n\n\
    \x0c\n\x05\x04\r\x02\x04\x06\x12\x03W\x02\x1f\n\x0c\n\x05\x04\r\x02\x04\
    \x01\x12\x03W\x20)\n\x0c\n\x05\x04\r\x02\x04\x03\x12\x03W,-\ny\n\x04\x04\
    \r\x02\x05\x12\x03Z\x02&\x1al\x20used\x20to\x20inncrement\x20local\x20au\
    th\x20list\x20version\n\x20ocpp\x20requires\x20SendLocalAuthList\x20requ\
    est\x20to\x20contain\x20new\x20version\n\n\x0c\n\x05\x04\r\x02\x05\x05\
    \x12\x03Z\x02\x07\n\x0c\n\x05\x04\r\x02\x05\x01\x12\x03Z\x08!\n\x0c\n\
    \x05\x04\r\x02\x05\x03\x12\x03Z$%\nP\n\x04\x04\r\x02\x06\x12\x03\\\x02#\
    \x1aC\x20used\x20to\x20inncrement\x20transacton\x20Ids\x20by\x20keep\x20\
    the\x20last\x20transaction\x20Id\n\n\x0c\n\x05\x04\r\x02\x06\x05\x12\x03\
    \\\x02\x07\n\x0c\n\x05\x04\r\x02\x06\x01\x12\x03\\\x08\x1e\n\x0c\n\x05\
    \x04\r\x02\x06\x03\x12\x03\\!\"\nV\n\x02\x04\x0e\x12\x04`\0f\x01\x1aJ\
    \x20ConnectorInfo\x20contains\x20status\x20and\x20ongoing\x20transaction\
    \x20ID\x20for\x20a\x20connector\n\n\n\n\x03\x04\x0e\x01\x12\x03`\x08\x15\
    \n\x0b\n\x04\x04\x0e\x02\0\x12\x03a\x02\x0f\n\x0c\n\x05\x04\x0e\x02\0\
    \x05\x12\x03a\x02\x07\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\x03a\x08\n\n\x0c\
    \n\x05\x04\x0e\x02\0\x03\x12\x03a\r\x0e\nI\n\x04\x04\x0e\x02\x01\x12\x03\
    c\x02\x14\x1a<\x20status\x20of\x20the\x20connector\x20e.g\x20AVAILABLE,\
    \x20PREPARING,\x20CHARGING\n\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03c\
    \x02\x08\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03c\t\x0f\n\x0c\n\x05\x04\
    \x0e\x02\x01\x03\x12\x03c\x12\x13\n9\n\x04\x04\x0e\x02\x02\x12\x03e\x02\
    \x20\x1a,\x20holds\x20the\x20current\x20Id\x20of\x20ongoing\x20transacto\
    n\n\n\x0c\n\x05\x04\x0e\x02\x02\x05\x12\x03e\x02\x07\n\x0c\n\x05\x04\x0e\
    \x02\x02\x01\x12\x03e\x08\x1b\n\x0c\n\x05\x04\x0e\x02\x02\x03\x12\x03e\
    \x1e\x1f\n?\n\x02\x04\x0f\x12\x04i\0r\x01\x1a3\x20TransactionInfo\x20con\
    tains\x20info\x20about\x20a\x20transaction\n\n\n\n\x03\x04\x0f\x01\x12\
    \x03i\x08\x17\n\x0b\n\x04\x04\x0f\x02\0\x12\x03j\x02\x0f\n\x0c\n\x05\x04\
    \x0f\x02\0\x05\x12\x03j\x02\x07\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03j\
    \x08\n\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03j\r\x0e\n\x0b\n\x04\x04\x0f\
    \x02\x01\x12\x03k\x02\x14\n\x0c\n\x05\x04\x0f\x02\x01\x05\x12\x03k\x02\
    \x08\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03k\t\x0f\n\x0c\n\x05\x04\x0f\
    \x02\x01\x03\x12\x03k\x12\x13\n\x0b\n\x04\x04\x0f\x02\x02\x12\x03l\x02\
    \x19\n\x0c\n\x05\x04\x0f\x02\x02\x05\x12\x03l\x02\x07\n\x0c\n\x05\x04\
    \x0f\x02\x02\x01\x12\x03l\x08\x14\n\x0c\n\x05\x04\x0f\x02\x02\x03\x12\
    \x03l\x17\x18\n\x0b\n\x04\x04\x0f\x02\x03\x12\x03m\x02\x18\n\x0c\n\x05\
    \x04\x0f\x02\x03\x05\x12\x03m\x02\x08\n\x0c\n\x05\x04\x0f\x02\x03\x01\
    \x12\x03m\t\x13\n\x0c\n\x05\x04\x0f\x02\x03\x03\x12\x03m\x16\x17\n\x0b\n\
    \x04\x04\x0f\x02\x04\x12\x03n\x02\x16\n\x0c\n\x05\x04\x0f\x02\x04\x05\
    \x12\x03n\x02\x08\n\x0c\n\x05\x04\x0f\x02\x04\x01\x12\x03n\t\x11\n\x0c\n\
    \x05\x04\x0f\x02\x04\x03\x12\x03n\x14\x15\n\x0b\n\x04\x04\x0f\x02\x05\
    \x12\x03o\x02\x18\n\x0c\n\x05\x04\x0f\x02\x05\x05\x12\x03o\x02\x07\n\x0c\
    \n\x05\x04\x0f\x02\x05\x01\x12\x03o\x08\x13\n\x0c\n\x05\x04\x0f\x02\x05\
    \x03\x12\x03o\x16\x17\n\x0b\n\x04\x04\x0f\x02\x06\x12\x03p\x02\x16\n\x0c\
    \n\x05\x04\x0f\x02\x06\x05\x12\x03p\x02\x07\n\x0c\n\x05\x04\x0f\x02\x06\
    \x01\x12\x03p\x08\x11\n\x0c\n\x05\x04\x0f\x02\x06\x03\x12\x03p\x14\x15\n\
    \x0b\n\x04\x04\x0f\x02\x07\x12\x03q\x02$\n\x0c\n\x05\x04\x0f\x02\x07\x06\
    \x12\x03q\x02\x16\n\x0c\n\x05\x04\x0f\x02\x07\x01\x12\x03q\x17\x1f\n\x0c\
    \n\x05\x04\x0f\x02\x07\x03\x12\x03q\"#\n\x95\x01\n\x02\x04\x10\x12\x04v\
    \0|\x01\x1a\x88\x01\x20ConsumerAuthData\x20contains\x20the\x20consumer\
    \x20public\x20key\x20assigned\x20to\x20the\x20local\n\x20authorized\x20d\
    ata.\x20This\x20keeps\x20track\x20of\x20consumer\x20auth\x20ownership.\n\
    \n\n\n\x03\x04\x10\x01\x12\x03v\x08\x18\n1\n\x04\x04\x10\x02\0\x12\x03x\
    \x02\x18\x1a$\x20consumer\x20of\x20the\x20service\x20public\x20key\n\n\
    \x0c\n\x05\x04\x10\x02\0\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x10\x02\0\
    \x01\x12\x03x\t\x13\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03x\x16\x17\n\x0b\
    \n\x04\x04\x10\x02\x01\x12\x03y\x02\x1b\n\x0c\n\x05\x04\x10\x02\x01\x05\
    \x12\x03y\x02\x07\n\x0c\n\x05\x04\x10\x02\x01\x01\x12\x03y\x08\x16\n\x0c\
    \n\x05\x04\x10\x02\x01\x03\x12\x03y\x19\x1a\n@\n\x04\x04\x10\x02\x02\x12\
    \x03{\x02'\x1a3\x20local\x20charge\x20point\x20auth\x20data\x20assigned\
    \x20to\x20consumer\n\n\x0c\n\x05\x04\x10\x02\x02\x06\x12\x03{\x02\x18\n\
    \x0c\n\x05\x04\x10\x02\x02\x01\x12\x03{\x19\"\n\x0c\n\x05\x04\x10\x02\
    \x02\x03\x12\x03{%&\n\x0b\n\x02\x04\x11\x12\x05~\0\x81\x01\x01\n\n\n\x03\
    \x04\x11\x01\x12\x03~\x08\x1e\n\x0b\n\x04\x04\x11\x02\0\x12\x03\x7f\x02\
    \x13\n\x0c\n\x05\x04\x11\x02\0\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\
    \x11\x02\0\x01\x12\x03\x7f\t\x0e\n\x0c\n\x05\x04\x11\x02\0\x03\x12\x03\
    \x7f\x11\x12\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\x80\x01\x02\x1a\n\r\n\
    \x05\x04\x11\x02\x01\x06\x12\x04\x80\x01\x02\x0b\n\r\n\x05\x04\x11\x02\
    \x01\x01\x12\x04\x80\x01\x0c\x15\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\
    \x80\x01\x18\x19\n\x0c\n\x02\x04\x12\x12\x06\x83\x01\0\x87\x01\x01\n\x0b\
    \n\x03\x04\x12\x01\x12\x04\x83\x01\x08\x11\n\x0c\n\x04\x04\x12\x02\0\x12\
    \x04\x84\x01\x02\x18\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\x84\x01\x02\x08\
    \n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x84\x01\t\x13\n\r\n\x05\x04\x12\x02\
    \0\x03\x12\x04\x84\x01\x16\x17\n\x0c\n\x04\x04\x12\x02\x01\x12\x04\x85\
    \x01\x02\x19\n\r\n\x05\x04\x12\x02\x01\x05\x12\x04\x85\x01\x02\x08\n\r\n\
    \x05\x04\x12\x02\x01\x01\x12\x04\x85\x01\t\x14\n\r\n\x05\x04\x12\x02\x01\
    \x03\x12\x04\x85\x01\x17\x18\n\x0c\n\x04\x04\x12\x02\x02\x12\x04\x86\x01\
    \x02\x14\n\r\n\x05\x04\x12\x02\x02\x05\x12\x04\x86\x01\x02\x08\n\r\n\x05\
    \x04\x12\x02\x02\x01\x12\x04\x86\x01\t\x0f\n\r\n\x05\x04\x12\x02\x02\x03\
    \x12\x04\x86\x01\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::with_capacity(0);
        let mut messages = ::std::vec::Vec::with_capacity(19);
        messages.push(BootNotificationRequestData::generated_message_descriptor_data());
        messages.push(LogData::generated_message_descriptor_data());
        messages.push(AuthorizeRequestData::generated_message_descriptor_data());
        messages.push(AuthorizeResponseData::generated_message_descriptor_data());
        messages.push(CheckAvailabilityRequestData::generated_message_descriptor_data());
        messages.push(CheckAvailabilityResponseData::generated_message_descriptor_data());
        messages.push(StartTransactionRequestData::generated_message_descriptor_data());
        messages.push(StartTransactionResponseData::generated_message_descriptor_data());
        messages.push(NotifyChargePointStateChangeData::generated_message_descriptor_data());
        messages.push(Response::generated_message_descriptor_data());
        messages.push(EVChargingStatusData::generated_message_descriptor_data());
        messages.push(StopTransactionRequestData::generated_message_descriptor_data());
        messages.push(StopTransactionResponseData::generated_message_descriptor_data());
        messages.push(ChargePointState::generated_message_descriptor_data());
        messages.push(ConnectorInfo::generated_message_descriptor_data());
        messages.push(TransactionInfo::generated_message_descriptor_data());
        messages.push(ConsumerAuthData::generated_message_descriptor_data());
        messages.push(LocalAuthorizationData::generated_message_descriptor_data());
        messages.push(IdTagInfo::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
