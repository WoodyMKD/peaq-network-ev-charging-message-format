// This file is generated by rust-protobuf 3.0.0-alpha.10. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `charge_point_gateway_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_10;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.Event)
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:gateway.Event.event_id)
    pub event_id: ::protobuf::EnumOrUnknown<EventType>,
    // message oneof groups
    pub data: ::std::option::Option<event::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .gateway.BootNotificationRequestData boot_notification_request_data = 2;

    pub fn boot_notification_request_data(&self) -> &BootNotificationRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(ref v)) => v,
            _ => <BootNotificationRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_boot_notification_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_boot_notification_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boot_notification_request_data(&mut self, v: BootNotificationRequestData) {
        self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_boot_notification_request_data(&mut self) -> &mut BootNotificationRequestData {
        if let ::std::option::Option::Some(event::Data::BootNotificationRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(BootNotificationRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_boot_notification_request_data(&mut self) -> BootNotificationRequestData {
        if self.has_boot_notification_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::BootNotificationRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            BootNotificationRequestData::new()
        }
    }

    // .gateway.LogData log_data = 3;

    pub fn log_data(&self) -> &LogData {
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(ref v)) => v,
            _ => <LogData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_log_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_log_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_data(&mut self, v: LogData) {
        self.data = ::std::option::Option::Some(event::Data::LogData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_data(&mut self) -> &mut LogData {
        if let ::std::option::Option::Some(event::Data::LogData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::LogData(LogData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_data(&mut self) -> LogData {
        if self.has_log_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::LogData(v)) => v,
                _ => panic!(),
            }
        } else {
            LogData::new()
        }
    }

    // .gateway.AuthorizeRequestAckData authorize_request_ack_data = 4;

    pub fn authorize_request_ack_data(&self) -> &AuthorizeRequestAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(ref v)) => v,
            _ => <AuthorizeRequestAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_authorize_request_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_authorize_request_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authorize_request_ack_data(&mut self, v: AuthorizeRequestAckData) {
        self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_authorize_request_ack_data(&mut self) -> &mut AuthorizeRequestAckData {
        if let ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(AuthorizeRequestAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authorize_request_ack_data(&mut self) -> AuthorizeRequestAckData {
        if self.has_authorize_request_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(v)) => v,
                _ => panic!(),
            }
        } else {
            AuthorizeRequestAckData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_id",
            |m: &Event| { &m.event_id },
            |m: &mut Event| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BootNotificationRequestData>(
            "boot_notification_request_data",
            Event::has_boot_notification_request_data,
            Event::boot_notification_request_data,
            Event::mut_boot_notification_request_data,
            Event::set_boot_notification_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LogData>(
            "log_data",
            Event::has_log_data,
            Event::log_data,
            Event::mut_log_data,
            Event::set_log_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AuthorizeRequestAckData>(
            "authorize_request_ack_data",
            Event::has_authorize_request_ack_data,
            Event::authorize_request_ack_data,
            Event::mut_authorize_request_ack_data,
            Event::set_authorize_request_ack_data,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Event>(
            "Event",
            fields,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        if let Some(event::Data::BootNotificationRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::LogData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::AuthorizeRequestAckData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event_id = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(event::Data::LogData(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::BootNotificationRequest) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.event_id);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::BootNotificationRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::LogData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::AuthorizeRequestAckData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::BootNotificationRequest) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event_id))?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::BootNotificationRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &event::Data::LogData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &event::Data::AuthorizeRequestAckData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.event_id = ::protobuf::EnumOrUnknown::new(EventType::BootNotificationRequest);
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            event_id: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Event").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Event`
pub mod event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:gateway.Event.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:gateway.Event.boot_notification_request_data)
        BootNotificationRequestData(super::BootNotificationRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.log_data)
        LogData(super::LogData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.authorize_request_ack_data)
        AuthorizeRequestAckData(super::AuthorizeRequestAckData),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Event as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new_2::<Data>("Event.data", 1234567)
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.BootNotificationRequestData)
pub struct BootNotificationRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_box_serial_number)
    pub charge_box_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_point_model)
    pub charge_point_model: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_serial_number)
    pub Charge_point_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_vendor)
    pub Charge_point_vendor: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.firmware_version)
    pub firmware_version: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.iccid)
    pub iccid: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.imsi)
    pub imsi: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_serial_number)
    pub meter_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_type)
    pub meter_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.BootNotificationRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BootNotificationRequestData {
    fn default() -> &'a BootNotificationRequestData {
        <BootNotificationRequestData as ::protobuf::Message>::default_instance()
    }
}

impl BootNotificationRequestData {
    pub fn new() -> BootNotificationRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_box_serial_number",
            |m: &BootNotificationRequestData| { &m.charge_box_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.charge_box_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_model",
            |m: &BootNotificationRequestData| { &m.charge_point_model },
            |m: &mut BootNotificationRequestData| { &mut m.charge_point_model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_serial_number",
            |m: &BootNotificationRequestData| { &m.Charge_point_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_vendor",
            |m: &BootNotificationRequestData| { &m.Charge_point_vendor },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_vendor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "firmware_version",
            |m: &BootNotificationRequestData| { &m.firmware_version },
            |m: &mut BootNotificationRequestData| { &mut m.firmware_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "iccid",
            |m: &BootNotificationRequestData| { &m.iccid },
            |m: &mut BootNotificationRequestData| { &mut m.iccid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imsi",
            |m: &BootNotificationRequestData| { &m.imsi },
            |m: &mut BootNotificationRequestData| { &mut m.imsi },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_serial_number",
            |m: &BootNotificationRequestData| { &m.meter_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.meter_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_type",
            |m: &BootNotificationRequestData| { &m.meter_type },
            |m: &mut BootNotificationRequestData| { &mut m.meter_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<BootNotificationRequestData>(
            "BootNotificationRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for BootNotificationRequestData {
    const NAME: &'static str = "BootNotificationRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_box_serial_number = is.read_string()?;
                },
                18 => {
                    self.charge_point_model = is.read_string()?;
                },
                26 => {
                    self.Charge_point_serial_number = is.read_string()?;
                },
                34 => {
                    self.Charge_point_vendor = is.read_string()?;
                },
                42 => {
                    self.firmware_version = is.read_string()?;
                },
                50 => {
                    self.iccid = is.read_string()?;
                },
                58 => {
                    self.imsi = is.read_string()?;
                },
                66 => {
                    self.meter_serial_number = is.read_string()?;
                },
                74 => {
                    self.meter_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_box_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_box_serial_number);
        }
        if !self.charge_point_model.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.charge_point_model);
        }
        if !self.Charge_point_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Charge_point_serial_number);
        }
        if !self.Charge_point_vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Charge_point_vendor);
        }
        if !self.firmware_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.firmware_version);
        }
        if !self.iccid.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.iccid);
        }
        if !self.imsi.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.imsi);
        }
        if !self.meter_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.meter_serial_number);
        }
        if !self.meter_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.meter_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_box_serial_number.is_empty() {
            os.write_string(1, &self.charge_box_serial_number)?;
        }
        if !self.charge_point_model.is_empty() {
            os.write_string(2, &self.charge_point_model)?;
        }
        if !self.Charge_point_serial_number.is_empty() {
            os.write_string(3, &self.Charge_point_serial_number)?;
        }
        if !self.Charge_point_vendor.is_empty() {
            os.write_string(4, &self.Charge_point_vendor)?;
        }
        if !self.firmware_version.is_empty() {
            os.write_string(5, &self.firmware_version)?;
        }
        if !self.iccid.is_empty() {
            os.write_string(6, &self.iccid)?;
        }
        if !self.imsi.is_empty() {
            os.write_string(7, &self.imsi)?;
        }
        if !self.meter_serial_number.is_empty() {
            os.write_string(8, &self.meter_serial_number)?;
        }
        if !self.meter_type.is_empty() {
            os.write_string(9, &self.meter_type)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> BootNotificationRequestData {
        BootNotificationRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_box_serial_number.clear();
        self.charge_point_model.clear();
        self.Charge_point_serial_number.clear();
        self.Charge_point_vendor.clear();
        self.firmware_version.clear();
        self.iccid.clear();
        self.imsi.clear();
        self.meter_serial_number.clear();
        self.meter_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BootNotificationRequestData {
        static instance: BootNotificationRequestData = BootNotificationRequestData {
            charge_box_serial_number: ::std::string::String::new(),
            charge_point_model: ::std::string::String::new(),
            Charge_point_serial_number: ::std::string::String::new(),
            Charge_point_vendor: ::std::string::String::new(),
            firmware_version: ::std::string::String::new(),
            iccid: ::std::string::String::new(),
            imsi: ::std::string::String::new(),
            meter_serial_number: ::std::string::String::new(),
            meter_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BootNotificationRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BootNotificationRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BootNotificationRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BootNotificationRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.LogData)
pub struct LogData {
    // message fields
    // @@protoc_insertion_point(field:gateway.LogData.current_time)
    pub current_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.LogData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.LogData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogData {
    fn default() -> &'a LogData {
        <LogData as ::protobuf::Message>::default_instance()
    }
}

impl LogData {
    pub fn new() -> LogData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_time",
            |m: &LogData| { &m.current_time },
            |m: &mut LogData| { &mut m.current_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &LogData| { &m.resp },
            |m: &mut LogData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<LogData>(
            "LogData",
            fields,
        )
    }
}

impl ::protobuf::Message for LogData {
    const NAME: &'static str = "LogData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.current_time = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.current_time.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.current_time);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.current_time.is_empty() {
            os.write_string(1, &self.current_time)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> LogData {
        LogData::new()
    }

    fn clear(&mut self) {
        self.current_time.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogData {
        static instance: LogData = LogData {
            current_time: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.AuthorizeRequestAckData)
pub struct AuthorizeRequestAckData {
    // message fields
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.AuthorizeRequestAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizeRequestAckData {
    fn default() -> &'a AuthorizeRequestAckData {
        <AuthorizeRequestAckData as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizeRequestAckData {
    pub fn new() -> AuthorizeRequestAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &AuthorizeRequestAckData| { &m.resp },
            |m: &mut AuthorizeRequestAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<AuthorizeRequestAckData>(
            "AuthorizeRequestAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for AuthorizeRequestAckData {
    const NAME: &'static str = "AuthorizeRequestAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> AuthorizeRequestAckData {
        AuthorizeRequestAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizeRequestAckData {
        static instance: AuthorizeRequestAckData = AuthorizeRequestAckData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthorizeRequestAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthorizeRequestAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthorizeRequestAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizeRequestAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:gateway.Response.error)
    pub error: bool,
    // @@protoc_insertion_point(field:gateway.Response.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Response| { &m.message },
            |m: &mut Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Response>(
            "Response",
            fields,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            error: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:gateway.EventType)
pub enum EventType {
    // @@protoc_insertion_point(enum_value:gateway.EventType.BootNotificationRequest)
    BootNotificationRequest = 0,
    // @@protoc_insertion_point(enum_value:gateway.EventType.HeartbeatRequest)
    HeartbeatRequest = 1,
    // @@protoc_insertion_point(enum_value:gateway.EventType.Log)
    Log = 2,
    // @@protoc_insertion_point(enum_value:gateway.EventType.AuthorizeRequest)
    AuthorizeRequest = 3,
    // @@protoc_insertion_point(enum_value:gateway.EventType.AuthorizeRequestAck)
    AuthorizeRequestAck = 4,
}

impl ::protobuf::Enum for EventType {
    const NAME: &'static str = "EventType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::BootNotificationRequest),
            1 => ::std::option::Option::Some(EventType::HeartbeatRequest),
            2 => ::std::option::Option::Some(EventType::Log),
            3 => ::std::option::Option::Some(EventType::AuthorizeRequest),
            4 => ::std::option::Option::Some(EventType::AuthorizeRequestAck),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EventType] = &[
        EventType::BootNotificationRequest,
        EventType::HeartbeatRequest,
        EventType::Log,
        EventType::AuthorizeRequest,
        EventType::AuthorizeRequestAck,
    ];
}

impl ::protobuf::EnumFull for EventType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EventType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::BootNotificationRequest
    }
}

impl EventType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EventType>("EventType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!charge_point_gateway_format.proto\x12\x07gateway\"\xbb\x02\n\x05Event\
    \x12-\n\x08event_id\x18\x01\x20\x01(\x0e2\x12.gateway.EventTypeR\x07even\
    tId\x12k\n\x1eboot_notification_request_data\x18\x02\x20\x01(\x0b2$.gate\
    way.BootNotificationRequestDataH\0R\x1bbootNotificationRequestData\x12-\
    \n\x08log_data\x18\x03\x20\x01(\x0b2\x10.gateway.LogDataH\0R\x07logData\
    \x12_\n\x1aauthorize_request_ack_data\x18\x04\x20\x01(\x0b2\x20.gateway.\
    AuthorizeRequestAckDataH\0R\x17authorizeRequestAckDataB\x06\n\x04data\"\
    \x95\x03\n\x1bBootNotificationRequestData\x127\n\x18charge_box_serial_nu\
    mber\x18\x01\x20\x01(\tR\x15chargeBoxSerialNumber\x12,\n\x12charge_point\
    _model\x18\x02\x20\x01(\tR\x10chargePointModel\x12;\n\x1aCharge_point_se\
    rial_number\x18\x03\x20\x01(\tR\x17ChargePointSerialNumber\x12.\n\x13Cha\
    rge_point_vendor\x18\x04\x20\x01(\tR\x11ChargePointVendor\x12)\n\x10firm\
    ware_version\x18\x05\x20\x01(\tR\x0ffirmwareVersion\x12\x14\n\x05iccid\
    \x18\x06\x20\x01(\tR\x05iccid\x12\x12\n\x04imsi\x18\x07\x20\x01(\tR\x04i\
    msi\x12.\n\x13meter_serial_number\x18\x08\x20\x01(\tR\x11meterSerialNumb\
    er\x12\x1d\n\nmeter_type\x18\t\x20\x01(\tR\tmeterType\"S\n\x07LogData\
    \x12!\n\x0ccurrent_time\x18\x01\x20\x01(\tR\x0bcurrentTime\x12%\n\x04res\
    p\x18\x02\x20\x01(\x0b2\x11.gateway.ResponseR\x04resp\"@\n\x17AuthorizeR\
    equestAckData\x12%\n\x04resp\x18\x01\x20\x01(\x0b2\x11.gateway.ResponseR\
    \x04resp\":\n\x08Response\x12\x14\n\x05error\x18\x01\x20\x01(\x08R\x05er\
    ror\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message*v\n\tEventType\
    \x12\x1b\n\x17BootNotificationRequest\x10\0\x12\x14\n\x10HeartbeatReques\
    t\x10\x01\x12\x07\n\x03Log\x10\x02\x12\x14\n\x10AuthorizeRequest\x10\x03\
    \x12\x17\n\x13AuthorizeRequestAck\x10\x04BWZUgithub.com/peaqnetwork/peaq\
    -network-ev-charging-message-format/golang/gateway;gatewayJ\x87\x0b\n\
    \x06\x12\x04\0\0,\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x10\n\x08\n\x01\x08\x12\x03\x03\0l\n\t\n\x02\x08\x0b\x12\
    \x03\x03\0l\n\n\n\x02\x05\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x05\0\x01\
    \x12\x03\x05\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\x1e\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x06\x02\x19\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x06\x1c\x1d\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x02\x17\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x07\x02\x12\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x07\x15\x16\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\x02\n\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x08\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x08\x08\t\n\x0b\n\x04\x05\0\x02\x03\x12\x03\t\x02\x17\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\t\x02\x12\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\t\x15\x16\n\x0b\n\x04\x05\0\x02\x04\x12\x03\n\x02\x1a\n\x0c\n\
    \x05\x05\0\x02\x04\x01\x12\x03\n\x02\x15\n\x0c\n\x05\x05\0\x02\x04\x02\
    \x12\x03\n\x18\x19\n\n\n\x02\x04\0\x12\x04\r\0\x14\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\r\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02\x19\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x0e\x02\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0e\x0c\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x17\x18\n\x0c\n\
    \x04\x04\0\x08\0\x12\x04\x0f\x02\x13\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\
    \x03\x0f\x08\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x04C\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\x10\x04\x1f\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x10\x20>\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10AB\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x11\x04\x19\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\
    \x11\x04\x0b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\x0c\x14\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x11\x17\x18\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x12\x04;\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x12\x04\x1b\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x12\x1c6\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x129:\n\n\n\x02\x04\x01\x12\x04\x16\0\x20\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x16\x08#\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\x02&\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x17\t!\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17$%\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x18\x02\x20\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x18\t\x1b\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03\x18\x1e\x1f\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x19\x02(\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x19\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x19\t#\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x19&'\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1a\x02!\
    \n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x1a\t\x1c\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\
    \x1a\x1f\x20\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x1b\x02\x1e\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03\x1b\t\x19\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x1b\x1c\x1d\n\
    \x0b\n\x04\x04\x01\x02\x05\x12\x03\x1c\x02\x13\n\x0c\n\x05\x04\x01\x02\
    \x05\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x1c\
    \t\x0e\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x1c\x11\x12\n\x0b\n\x04\
    \x04\x01\x02\x06\x12\x03\x1d\x02\x12\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\
    \x03\x1d\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x1d\t\r\n\x0c\n\
    \x05\x04\x01\x02\x06\x03\x12\x03\x1d\x10\x11\n\x0b\n\x04\x04\x01\x02\x07\
    \x12\x03\x1e\x02!\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x1e\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x1e\t\x1c\n\x0c\n\x05\x04\x01\x02\
    \x07\x03\x12\x03\x1e\x1f\x20\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x1f\x02\
    \x18\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x08\x01\x12\x03\x1f\t\x13\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\
    \x03\x1f\x16\x17\n\n\n\x02\x04\x02\x12\x04\"\0%\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\"\x08\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\x02\x1a\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03#\t\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03#\x18\x19\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03$\x02\x14\n\x0c\n\x05\x04\x02\x02\x01\x06\
    \x12\x03$\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03$\x0b\x0f\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03$\x12\x13\n\t\n\x02\x04\x03\x12\x03'\06\
    \n\n\n\x03\x04\x03\x01\x12\x03'\x08\x1f\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03'\"4\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03'\"*\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03'+/\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03'23\n\n\n\x02\
    \x04\x04\x12\x04)\0,\x01\n\n\n\x03\x04\x04\x01\x12\x03)\x08\x10\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03*\x02\x11\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03*\x02\x06\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03*\x07\x0c\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03*\x0f\x10\n\x0b\n\x04\x04\x04\x02\x01\x12\x03+\
    \x02\x15\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03+\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03+\t\x10\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03+\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::with_capacity(0);
        let mut messages = ::std::vec::Vec::with_capacity(5);
        messages.push(Event::generated_message_descriptor_data());
        messages.push(BootNotificationRequestData::generated_message_descriptor_data());
        messages.push(LogData::generated_message_descriptor_data());
        messages.push(AuthorizeRequestAckData::generated_message_descriptor_data());
        messages.push(Response::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::with_capacity(1);
        enums.push(EventType::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
