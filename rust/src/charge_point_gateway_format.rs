// This file is generated by rust-protobuf 3.0.0-alpha.10. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `charge_point_gateway_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_10;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.Event)
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:gateway.Event.event_id)
    pub event_id: ::protobuf::EnumOrUnknown<EventType>,
    // message oneof groups
    pub data: ::std::option::Option<event::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .gateway.BootNotificationRequestData boot_notification_request_data = 2;

    pub fn boot_notification_request_data(&self) -> &BootNotificationRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(ref v)) => v,
            _ => <BootNotificationRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_boot_notification_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_boot_notification_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boot_notification_request_data(&mut self, v: BootNotificationRequestData) {
        self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_boot_notification_request_data(&mut self) -> &mut BootNotificationRequestData {
        if let ::std::option::Option::Some(event::Data::BootNotificationRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(BootNotificationRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::BootNotificationRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_boot_notification_request_data(&mut self) -> BootNotificationRequestData {
        if self.has_boot_notification_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::BootNotificationRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            BootNotificationRequestData::new()
        }
    }

    // .gateway.LogData log_data = 3;

    pub fn log_data(&self) -> &LogData {
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(ref v)) => v,
            _ => <LogData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_log_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_log_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_data(&mut self, v: LogData) {
        self.data = ::std::option::Option::Some(event::Data::LogData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_data(&mut self) -> &mut LogData {
        if let ::std::option::Option::Some(event::Data::LogData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::LogData(LogData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::LogData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_data(&mut self) -> LogData {
        if self.has_log_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::LogData(v)) => v,
                _ => panic!(),
            }
        } else {
            LogData::new()
        }
    }

    // .gateway.AuthorizeRequestData authorize_request_data = 4;

    pub fn authorize_request_data(&self) -> &AuthorizeRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestData(ref v)) => v,
            _ => <AuthorizeRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_authorize_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_authorize_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authorize_request_data(&mut self, v: AuthorizeRequestData) {
        self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_authorize_request_data(&mut self) -> &mut AuthorizeRequestData {
        if let ::std::option::Option::Some(event::Data::AuthorizeRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestData(AuthorizeRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authorize_request_data(&mut self) -> AuthorizeRequestData {
        if self.has_authorize_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::AuthorizeRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            AuthorizeRequestData::new()
        }
    }

    // .gateway.AuthorizeRequestAckData authorize_request_ack_data = 5;

    pub fn authorize_request_ack_data(&self) -> &AuthorizeRequestAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(ref v)) => v,
            _ => <AuthorizeRequestAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_authorize_request_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_authorize_request_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authorize_request_ack_data(&mut self, v: AuthorizeRequestAckData) {
        self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_authorize_request_ack_data(&mut self) -> &mut AuthorizeRequestAckData {
        if let ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(AuthorizeRequestAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authorize_request_ack_data(&mut self) -> AuthorizeRequestAckData {
        if self.has_authorize_request_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(v)) => v,
                _ => panic!(),
            }
        } else {
            AuthorizeRequestAckData::new()
        }
    }

    // .gateway.CheckAvailabilityRequestData check_availability_request_data = 6;

    pub fn check_availability_request_data(&self) -> &CheckAvailabilityRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(ref v)) => v,
            _ => <CheckAvailabilityRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_check_availability_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_check_availability_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_availability_request_data(&mut self, v: CheckAvailabilityRequestData) {
        self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_availability_request_data(&mut self) -> &mut CheckAvailabilityRequestData {
        if let ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(CheckAvailabilityRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_availability_request_data(&mut self) -> CheckAvailabilityRequestData {
        if self.has_check_availability_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            CheckAvailabilityRequestData::new()
        }
    }

    // .gateway.CheckAvailabilityRequestAckData check_availability_request_ack_data = 7;

    pub fn check_availability_request_ack_data(&self) -> &CheckAvailabilityRequestAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(ref v)) => v,
            _ => <CheckAvailabilityRequestAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_check_availability_request_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_check_availability_request_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_availability_request_ack_data(&mut self, v: CheckAvailabilityRequestAckData) {
        self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_availability_request_ack_data(&mut self) -> &mut CheckAvailabilityRequestAckData {
        if let ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(CheckAvailabilityRequestAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_availability_request_ack_data(&mut self) -> CheckAvailabilityRequestAckData {
        if self.has_check_availability_request_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(v)) => v,
                _ => panic!(),
            }
        } else {
            CheckAvailabilityRequestAckData::new()
        }
    }

    // .gateway.StartChargeRequestData start_charge_request_data = 8;

    pub fn start_charge_request_data(&self) -> &StartChargeRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestData(ref v)) => v,
            _ => <StartChargeRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_start_charge_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_start_charge_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_charge_request_data(&mut self, v: StartChargeRequestData) {
        self.data = ::std::option::Option::Some(event::Data::StartChargeRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_charge_request_data(&mut self) -> &mut StartChargeRequestData {
        if let ::std::option::Option::Some(event::Data::StartChargeRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::StartChargeRequestData(StartChargeRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_charge_request_data(&mut self) -> StartChargeRequestData {
        if self.has_start_charge_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::StartChargeRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            StartChargeRequestData::new()
        }
    }

    // .gateway.StartChargeRequestAckData start_charge_request_ack_data = 9;

    pub fn start_charge_request_ack_data(&self) -> &StartChargeRequestAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestAckData(ref v)) => v,
            _ => <StartChargeRequestAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_start_charge_request_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_start_charge_request_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestAckData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_charge_request_ack_data(&mut self, v: StartChargeRequestAckData) {
        self.data = ::std::option::Option::Some(event::Data::StartChargeRequestAckData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_charge_request_ack_data(&mut self) -> &mut StartChargeRequestAckData {
        if let ::std::option::Option::Some(event::Data::StartChargeRequestAckData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::StartChargeRequestAckData(StartChargeRequestAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::StartChargeRequestAckData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_charge_request_ack_data(&mut self) -> StartChargeRequestAckData {
        if self.has_start_charge_request_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::StartChargeRequestAckData(v)) => v,
                _ => panic!(),
            }
        } else {
            StartChargeRequestAckData::new()
        }
    }

    // .gateway.ChargingStatusData charge_status_data = 10;

    pub fn charge_status_data(&self) -> &ChargingStatusData {
        match self.data {
            ::std::option::Option::Some(event::Data::ChargeStatusData(ref v)) => v,
            _ => <ChargingStatusData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_charge_status_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_charge_status_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::ChargeStatusData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_charge_status_data(&mut self, v: ChargingStatusData) {
        self.data = ::std::option::Option::Some(event::Data::ChargeStatusData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_charge_status_data(&mut self) -> &mut ChargingStatusData {
        if let ::std::option::Option::Some(event::Data::ChargeStatusData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::ChargeStatusData(ChargingStatusData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::ChargeStatusData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_charge_status_data(&mut self) -> ChargingStatusData {
        if self.has_charge_status_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::ChargeStatusData(v)) => v,
                _ => panic!(),
            }
        } else {
            ChargingStatusData::new()
        }
    }

    // .gateway.StopChargeRequestData stop_charge_request_data = 11;

    pub fn stop_charge_request_data(&self) -> &StopChargeRequestData {
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestData(ref v)) => v,
            _ => <StopChargeRequestData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop_charge_request_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_request_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_request_data(&mut self, v: StopChargeRequestData) {
        self.data = ::std::option::Option::Some(event::Data::StopChargeRequestData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_request_data(&mut self) -> &mut StopChargeRequestData {
        if let ::std::option::Option::Some(event::Data::StopChargeRequestData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::StopChargeRequestData(StopChargeRequestData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_request_data(&mut self) -> StopChargeRequestData {
        if self.has_stop_charge_request_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::StopChargeRequestData(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeRequestData::new()
        }
    }

    // .gateway.StopChargeRequestAckData stop_charge_request_ack_data = 12;

    pub fn stop_charge_request_ack_data(&self) -> &StopChargeRequestAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestAckData(ref v)) => v,
            _ => <StopChargeRequestAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop_charge_request_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_request_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestAckData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_request_ack_data(&mut self, v: StopChargeRequestAckData) {
        self.data = ::std::option::Option::Some(event::Data::StopChargeRequestAckData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_request_ack_data(&mut self) -> &mut StopChargeRequestAckData {
        if let ::std::option::Option::Some(event::Data::StopChargeRequestAckData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::StopChargeRequestAckData(StopChargeRequestAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::StopChargeRequestAckData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_request_ack_data(&mut self) -> StopChargeRequestAckData {
        if self.has_stop_charge_request_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::StopChargeRequestAckData(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeRequestAckData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_id",
            |m: &Event| { &m.event_id },
            |m: &mut Event| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BootNotificationRequestData>(
            "boot_notification_request_data",
            Event::has_boot_notification_request_data,
            Event::boot_notification_request_data,
            Event::mut_boot_notification_request_data,
            Event::set_boot_notification_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LogData>(
            "log_data",
            Event::has_log_data,
            Event::log_data,
            Event::mut_log_data,
            Event::set_log_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AuthorizeRequestData>(
            "authorize_request_data",
            Event::has_authorize_request_data,
            Event::authorize_request_data,
            Event::mut_authorize_request_data,
            Event::set_authorize_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AuthorizeRequestAckData>(
            "authorize_request_ack_data",
            Event::has_authorize_request_ack_data,
            Event::authorize_request_ack_data,
            Event::mut_authorize_request_ack_data,
            Event::set_authorize_request_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CheckAvailabilityRequestData>(
            "check_availability_request_data",
            Event::has_check_availability_request_data,
            Event::check_availability_request_data,
            Event::mut_check_availability_request_data,
            Event::set_check_availability_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CheckAvailabilityRequestAckData>(
            "check_availability_request_ack_data",
            Event::has_check_availability_request_ack_data,
            Event::check_availability_request_ack_data,
            Event::mut_check_availability_request_ack_data,
            Event::set_check_availability_request_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StartChargeRequestData>(
            "start_charge_request_data",
            Event::has_start_charge_request_data,
            Event::start_charge_request_data,
            Event::mut_start_charge_request_data,
            Event::set_start_charge_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StartChargeRequestAckData>(
            "start_charge_request_ack_data",
            Event::has_start_charge_request_ack_data,
            Event::start_charge_request_ack_data,
            Event::mut_start_charge_request_ack_data,
            Event::set_start_charge_request_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ChargingStatusData>(
            "charge_status_data",
            Event::has_charge_status_data,
            Event::charge_status_data,
            Event::mut_charge_status_data,
            Event::set_charge_status_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StopChargeRequestData>(
            "stop_charge_request_data",
            Event::has_stop_charge_request_data,
            Event::stop_charge_request_data,
            Event::mut_stop_charge_request_data,
            Event::set_stop_charge_request_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StopChargeRequestAckData>(
            "stop_charge_request_ack_data",
            Event::has_stop_charge_request_ack_data,
            Event::stop_charge_request_ack_data,
            Event::mut_stop_charge_request_ack_data,
            Event::set_stop_charge_request_ack_data,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Event>(
            "Event",
            fields,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        if let Some(event::Data::BootNotificationRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::LogData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::AuthorizeRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::AuthorizeRequestAckData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::CheckAvailabilityRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::CheckAvailabilityRequestAckData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::StartChargeRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::StartChargeRequestAckData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::ChargeStatusData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::StopChargeRequestData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::StopChargeRequestAckData(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event_id = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = ::std::option::Option::Some(event::Data::BootNotificationRequestData(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(event::Data::LogData(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestData(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(event::Data::AuthorizeRequestAckData(is.read_message()?));
                },
                50 => {
                    self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestData(is.read_message()?));
                },
                58 => {
                    self.data = ::std::option::Option::Some(event::Data::CheckAvailabilityRequestAckData(is.read_message()?));
                },
                66 => {
                    self.data = ::std::option::Option::Some(event::Data::StartChargeRequestData(is.read_message()?));
                },
                74 => {
                    self.data = ::std::option::Option::Some(event::Data::StartChargeRequestAckData(is.read_message()?));
                },
                82 => {
                    self.data = ::std::option::Option::Some(event::Data::ChargeStatusData(is.read_message()?));
                },
                90 => {
                    self.data = ::std::option::Option::Some(event::Data::StopChargeRequestData(is.read_message()?));
                },
                98 => {
                    self.data = ::std::option::Option::Some(event::Data::StopChargeRequestAckData(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::BOOT_NOTIFICATION_REQUEST) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.event_id);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::BootNotificationRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::LogData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::AuthorizeRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::AuthorizeRequestAckData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::CheckAvailabilityRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::CheckAvailabilityRequestAckData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::StartChargeRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::StartChargeRequestAckData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::ChargeStatusData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::StopChargeRequestData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::StopChargeRequestAckData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::BOOT_NOTIFICATION_REQUEST) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event_id))?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::BootNotificationRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &event::Data::LogData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &event::Data::AuthorizeRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &event::Data::AuthorizeRequestAckData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &event::Data::CheckAvailabilityRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &event::Data::CheckAvailabilityRequestAckData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &event::Data::StartChargeRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &event::Data::StartChargeRequestAckData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &event::Data::ChargeStatusData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &event::Data::StopChargeRequestData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &event::Data::StopChargeRequestAckData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.event_id = ::protobuf::EnumOrUnknown::new(EventType::BOOT_NOTIFICATION_REQUEST);
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            event_id: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Event").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Event`
pub mod event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:gateway.Event.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:gateway.Event.boot_notification_request_data)
        BootNotificationRequestData(super::BootNotificationRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.log_data)
        LogData(super::LogData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.authorize_request_data)
        AuthorizeRequestData(super::AuthorizeRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.authorize_request_ack_data)
        AuthorizeRequestAckData(super::AuthorizeRequestAckData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.check_availability_request_data)
        CheckAvailabilityRequestData(super::CheckAvailabilityRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.check_availability_request_ack_data)
        CheckAvailabilityRequestAckData(super::CheckAvailabilityRequestAckData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.start_charge_request_data)
        StartChargeRequestData(super::StartChargeRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.start_charge_request_ack_data)
        StartChargeRequestAckData(super::StartChargeRequestAckData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.charge_status_data)
        ChargeStatusData(super::ChargingStatusData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.stop_charge_request_data)
        StopChargeRequestData(super::StopChargeRequestData),
        // @@protoc_insertion_point(oneof_field:gateway.Event.stop_charge_request_ack_data)
        StopChargeRequestAckData(super::StopChargeRequestAckData),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Event as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new_2::<Data>("Event.data", 1234567)
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.BootNotificationRequestData)
pub struct BootNotificationRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_box_serial_number)
    pub charge_box_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.charge_point_model)
    pub charge_point_model: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_serial_number)
    pub Charge_point_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.Charge_point_vendor)
    pub Charge_point_vendor: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.firmware_version)
    pub firmware_version: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.iccid)
    pub iccid: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.imsi)
    pub imsi: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_serial_number)
    pub meter_serial_number: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.BootNotificationRequestData.meter_type)
    pub meter_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.BootNotificationRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BootNotificationRequestData {
    fn default() -> &'a BootNotificationRequestData {
        <BootNotificationRequestData as ::protobuf::Message>::default_instance()
    }
}

impl BootNotificationRequestData {
    pub fn new() -> BootNotificationRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_box_serial_number",
            |m: &BootNotificationRequestData| { &m.charge_box_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.charge_box_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_model",
            |m: &BootNotificationRequestData| { &m.charge_point_model },
            |m: &mut BootNotificationRequestData| { &mut m.charge_point_model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_serial_number",
            |m: &BootNotificationRequestData| { &m.Charge_point_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Charge_point_vendor",
            |m: &BootNotificationRequestData| { &m.Charge_point_vendor },
            |m: &mut BootNotificationRequestData| { &mut m.Charge_point_vendor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "firmware_version",
            |m: &BootNotificationRequestData| { &m.firmware_version },
            |m: &mut BootNotificationRequestData| { &mut m.firmware_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "iccid",
            |m: &BootNotificationRequestData| { &m.iccid },
            |m: &mut BootNotificationRequestData| { &mut m.iccid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "imsi",
            |m: &BootNotificationRequestData| { &m.imsi },
            |m: &mut BootNotificationRequestData| { &mut m.imsi },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_serial_number",
            |m: &BootNotificationRequestData| { &m.meter_serial_number },
            |m: &mut BootNotificationRequestData| { &mut m.meter_serial_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meter_type",
            |m: &BootNotificationRequestData| { &m.meter_type },
            |m: &mut BootNotificationRequestData| { &mut m.meter_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<BootNotificationRequestData>(
            "BootNotificationRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for BootNotificationRequestData {
    const NAME: &'static str = "BootNotificationRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_box_serial_number = is.read_string()?;
                },
                18 => {
                    self.charge_point_model = is.read_string()?;
                },
                26 => {
                    self.Charge_point_serial_number = is.read_string()?;
                },
                34 => {
                    self.Charge_point_vendor = is.read_string()?;
                },
                42 => {
                    self.firmware_version = is.read_string()?;
                },
                50 => {
                    self.iccid = is.read_string()?;
                },
                58 => {
                    self.imsi = is.read_string()?;
                },
                66 => {
                    self.meter_serial_number = is.read_string()?;
                },
                74 => {
                    self.meter_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_box_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_box_serial_number);
        }
        if !self.charge_point_model.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.charge_point_model);
        }
        if !self.Charge_point_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Charge_point_serial_number);
        }
        if !self.Charge_point_vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Charge_point_vendor);
        }
        if !self.firmware_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.firmware_version);
        }
        if !self.iccid.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.iccid);
        }
        if !self.imsi.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.imsi);
        }
        if !self.meter_serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.meter_serial_number);
        }
        if !self.meter_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.meter_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_box_serial_number.is_empty() {
            os.write_string(1, &self.charge_box_serial_number)?;
        }
        if !self.charge_point_model.is_empty() {
            os.write_string(2, &self.charge_point_model)?;
        }
        if !self.Charge_point_serial_number.is_empty() {
            os.write_string(3, &self.Charge_point_serial_number)?;
        }
        if !self.Charge_point_vendor.is_empty() {
            os.write_string(4, &self.Charge_point_vendor)?;
        }
        if !self.firmware_version.is_empty() {
            os.write_string(5, &self.firmware_version)?;
        }
        if !self.iccid.is_empty() {
            os.write_string(6, &self.iccid)?;
        }
        if !self.imsi.is_empty() {
            os.write_string(7, &self.imsi)?;
        }
        if !self.meter_serial_number.is_empty() {
            os.write_string(8, &self.meter_serial_number)?;
        }
        if !self.meter_type.is_empty() {
            os.write_string(9, &self.meter_type)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> BootNotificationRequestData {
        BootNotificationRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_box_serial_number.clear();
        self.charge_point_model.clear();
        self.Charge_point_serial_number.clear();
        self.Charge_point_vendor.clear();
        self.firmware_version.clear();
        self.iccid.clear();
        self.imsi.clear();
        self.meter_serial_number.clear();
        self.meter_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BootNotificationRequestData {
        static instance: BootNotificationRequestData = BootNotificationRequestData {
            charge_box_serial_number: ::std::string::String::new(),
            charge_point_model: ::std::string::String::new(),
            Charge_point_serial_number: ::std::string::String::new(),
            Charge_point_vendor: ::std::string::String::new(),
            firmware_version: ::std::string::String::new(),
            iccid: ::std::string::String::new(),
            imsi: ::std::string::String::new(),
            meter_serial_number: ::std::string::String::new(),
            meter_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BootNotificationRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BootNotificationRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BootNotificationRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BootNotificationRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.LogData)
pub struct LogData {
    // message fields
    // @@protoc_insertion_point(field:gateway.LogData.current_time)
    pub current_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.LogData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.LogData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogData {
    fn default() -> &'a LogData {
        <LogData as ::protobuf::Message>::default_instance()
    }
}

impl LogData {
    pub fn new() -> LogData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_time",
            |m: &LogData| { &m.current_time },
            |m: &mut LogData| { &mut m.current_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &LogData| { &m.resp },
            |m: &mut LogData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<LogData>(
            "LogData",
            fields,
        )
    }
}

impl ::protobuf::Message for LogData {
    const NAME: &'static str = "LogData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.current_time = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.current_time.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.current_time);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.current_time.is_empty() {
            os.write_string(1, &self.current_time)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> LogData {
        LogData::new()
    }

    fn clear(&mut self) {
        self.current_time.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogData {
        static instance: LogData = LogData {
            current_time: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.AuthorizeRequestData)
pub struct AuthorizeRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.AuthorizeRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizeRequestData {
    fn default() -> &'a AuthorizeRequestData {
        <AuthorizeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizeRequestData {
    pub fn new() -> AuthorizeRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &AuthorizeRequestData| { &m.charge_point_client_id },
            |m: &mut AuthorizeRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &AuthorizeRequestData| { &m.consumer_public_key },
            |m: &mut AuthorizeRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<AuthorizeRequestData>(
            "AuthorizeRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for AuthorizeRequestData {
    const NAME: &'static str = "AuthorizeRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                18 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(2, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> AuthorizeRequestData {
        AuthorizeRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizeRequestData {
        static instance: AuthorizeRequestData = AuthorizeRequestData {
            charge_point_client_id: ::std::string::String::new(),
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthorizeRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthorizeRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthorizeRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizeRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.AuthorizeRequestAckData)
pub struct AuthorizeRequestAckData {
    // message fields
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestAckData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.AuthorizeRequestAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.AuthorizeRequestAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizeRequestAckData {
    fn default() -> &'a AuthorizeRequestAckData {
        <AuthorizeRequestAckData as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizeRequestAckData {
    pub fn new() -> AuthorizeRequestAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &AuthorizeRequestAckData| { &m.consumer_public_key },
            |m: &mut AuthorizeRequestAckData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &AuthorizeRequestAckData| { &m.resp },
            |m: &mut AuthorizeRequestAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<AuthorizeRequestAckData>(
            "AuthorizeRequestAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for AuthorizeRequestAckData {
    const NAME: &'static str = "AuthorizeRequestAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> AuthorizeRequestAckData {
        AuthorizeRequestAckData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizeRequestAckData {
        static instance: AuthorizeRequestAckData = AuthorizeRequestAckData {
            consumer_public_key: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthorizeRequestAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthorizeRequestAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthorizeRequestAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizeRequestAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.CheckAvailabilityRequestData)
pub struct CheckAvailabilityRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityRequestData.connector_id)
    pub connector_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.CheckAvailabilityRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAvailabilityRequestData {
    fn default() -> &'a CheckAvailabilityRequestData {
        <CheckAvailabilityRequestData as ::protobuf::Message>::default_instance()
    }
}

impl CheckAvailabilityRequestData {
    pub fn new() -> CheckAvailabilityRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &CheckAvailabilityRequestData| { &m.charge_point_client_id },
            |m: &mut CheckAvailabilityRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &CheckAvailabilityRequestData| { &m.connector_id },
            |m: &mut CheckAvailabilityRequestData| { &mut m.connector_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<CheckAvailabilityRequestData>(
            "CheckAvailabilityRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for CheckAvailabilityRequestData {
    const NAME: &'static str = "CheckAvailabilityRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> CheckAvailabilityRequestData {
        CheckAvailabilityRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAvailabilityRequestData {
        static instance: CheckAvailabilityRequestData = CheckAvailabilityRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAvailabilityRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAvailabilityRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAvailabilityRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAvailabilityRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.CheckAvailabilityRequestAckData)
pub struct CheckAvailabilityRequestAckData {
    // message fields
    // @@protoc_insertion_point(field:gateway.CheckAvailabilityRequestAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.CheckAvailabilityRequestAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckAvailabilityRequestAckData {
    fn default() -> &'a CheckAvailabilityRequestAckData {
        <CheckAvailabilityRequestAckData as ::protobuf::Message>::default_instance()
    }
}

impl CheckAvailabilityRequestAckData {
    pub fn new() -> CheckAvailabilityRequestAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &CheckAvailabilityRequestAckData| { &m.resp },
            |m: &mut CheckAvailabilityRequestAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<CheckAvailabilityRequestAckData>(
            "CheckAvailabilityRequestAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for CheckAvailabilityRequestAckData {
    const NAME: &'static str = "CheckAvailabilityRequestAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> CheckAvailabilityRequestAckData {
        CheckAvailabilityRequestAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckAvailabilityRequestAckData {
        static instance: CheckAvailabilityRequestAckData = CheckAvailabilityRequestAckData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckAvailabilityRequestAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckAvailabilityRequestAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckAvailabilityRequestAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAvailabilityRequestAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StartChargeRequestData)
pub struct StartChargeRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StartChargeRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StartChargeRequestData.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.StartChargeRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StartChargeRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartChargeRequestData {
    fn default() -> &'a StartChargeRequestData {
        <StartChargeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl StartChargeRequestData {
    pub fn new() -> StartChargeRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &StartChargeRequestData| { &m.charge_point_client_id },
            |m: &mut StartChargeRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &StartChargeRequestData| { &m.connector_id },
            |m: &mut StartChargeRequestData| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StartChargeRequestData| { &m.consumer_public_key },
            |m: &mut StartChargeRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StartChargeRequestData>(
            "StartChargeRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for StartChargeRequestData {
    const NAME: &'static str = "StartChargeRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                26 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(3, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StartChargeRequestData {
        StartChargeRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartChargeRequestData {
        static instance: StartChargeRequestData = StartChargeRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartChargeRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartChargeRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartChargeRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartChargeRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StartChargeRequestAckData)
pub struct StartChargeRequestAckData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StartChargeRequestAckData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StartChargeRequestAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StartChargeRequestAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StartChargeRequestAckData {
    fn default() -> &'a StartChargeRequestAckData {
        <StartChargeRequestAckData as ::protobuf::Message>::default_instance()
    }
}

impl StartChargeRequestAckData {
    pub fn new() -> StartChargeRequestAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StartChargeRequestAckData| { &m.consumer_public_key },
            |m: &mut StartChargeRequestAckData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StartChargeRequestAckData| { &m.resp },
            |m: &mut StartChargeRequestAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StartChargeRequestAckData>(
            "StartChargeRequestAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for StartChargeRequestAckData {
    const NAME: &'static str = "StartChargeRequestAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StartChargeRequestAckData {
        StartChargeRequestAckData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StartChargeRequestAckData {
        static instance: StartChargeRequestAckData = StartChargeRequestAckData {
            consumer_public_key: ::std::string::String::new(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StartChargeRequestAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StartChargeRequestAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StartChargeRequestAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartChargeRequestAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:gateway.Response.error)
    pub error: bool,
    // @@protoc_insertion_point(field:gateway.Response.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Response| { &m.message },
            |m: &mut Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Response>(
            "Response",
            fields,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            error: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ChargingStatusData contains status of the current ongoing charging
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ChargingStatusData)
pub struct ChargingStatusData {
    // message fields
    ///  initial EV battery level in percentage before charging
    // @@protoc_insertion_point(field:gateway.ChargingStatusData.initial_battery_level)
    pub initial_battery_level: f32,
    ///  current EV battery level in percentage before charging
    // @@protoc_insertion_point(field:gateway.ChargingStatusData.battery_level)
    pub battery_level: f32,
    ///  the electrical current offered to EV
    // @@protoc_insertion_point(field:gateway.ChargingStatusData.current_offered)
    pub current_offered: f32,
    ///  the initial_battery_level and battery_level value unit - Percent
    // @@protoc_insertion_point(field:gateway.ChargingStatusData.battery_unit)
    pub battery_unit: ::std::string::String,
    ///  the current offered value unit - A
    // @@protoc_insertion_point(field:gateway.ChargingStatusData.current_unit)
    pub current_unit: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ChargingStatusData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargingStatusData {
    fn default() -> &'a ChargingStatusData {
        <ChargingStatusData as ::protobuf::Message>::default_instance()
    }
}

impl ChargingStatusData {
    pub fn new() -> ChargingStatusData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "initial_battery_level",
            |m: &ChargingStatusData| { &m.initial_battery_level },
            |m: &mut ChargingStatusData| { &mut m.initial_battery_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "battery_level",
            |m: &ChargingStatusData| { &m.battery_level },
            |m: &mut ChargingStatusData| { &mut m.battery_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_offered",
            |m: &ChargingStatusData| { &m.current_offered },
            |m: &mut ChargingStatusData| { &mut m.current_offered },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "battery_unit",
            |m: &ChargingStatusData| { &m.battery_unit },
            |m: &mut ChargingStatusData| { &mut m.battery_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_unit",
            |m: &ChargingStatusData| { &m.current_unit },
            |m: &mut ChargingStatusData| { &mut m.current_unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ChargingStatusData>(
            "ChargingStatusData",
            fields,
        )
    }
}

impl ::protobuf::Message for ChargingStatusData {
    const NAME: &'static str = "ChargingStatusData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.initial_battery_level = is.read_float()?;
                },
                21 => {
                    self.battery_level = is.read_float()?;
                },
                29 => {
                    self.current_offered = is.read_float()?;
                },
                34 => {
                    self.battery_unit = is.read_string()?;
                },
                42 => {
                    self.current_unit = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.initial_battery_level != 0. {
            my_size += 5;
        }
        if self.battery_level != 0. {
            my_size += 5;
        }
        if self.current_offered != 0. {
            my_size += 5;
        }
        if !self.battery_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.battery_unit);
        }
        if !self.current_unit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.current_unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.initial_battery_level != 0. {
            os.write_float(1, self.initial_battery_level)?;
        }
        if self.battery_level != 0. {
            os.write_float(2, self.battery_level)?;
        }
        if self.current_offered != 0. {
            os.write_float(3, self.current_offered)?;
        }
        if !self.battery_unit.is_empty() {
            os.write_string(4, &self.battery_unit)?;
        }
        if !self.current_unit.is_empty() {
            os.write_string(5, &self.current_unit)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ChargingStatusData {
        ChargingStatusData::new()
    }

    fn clear(&mut self) {
        self.initial_battery_level = 0.;
        self.battery_level = 0.;
        self.current_offered = 0.;
        self.battery_unit.clear();
        self.current_unit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargingStatusData {
        static instance: ChargingStatusData = ChargingStatusData {
            initial_battery_level: 0.,
            battery_level: 0.,
            current_offered: 0.,
            battery_unit: ::std::string::String::new(),
            current_unit: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChargingStatusData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargingStatusData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargingStatusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargingStatusData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StopChargeRequestData)
pub struct StopChargeRequestData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StopChargeRequestData.charge_point_client_id)
    pub charge_point_client_id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StopChargeRequestData.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.StopChargeRequestData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StopChargeRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopChargeRequestData {
    fn default() -> &'a StopChargeRequestData {
        <StopChargeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeRequestData {
    pub fn new() -> StopChargeRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charge_point_client_id",
            |m: &StopChargeRequestData| { &m.charge_point_client_id },
            |m: &mut StopChargeRequestData| { &mut m.charge_point_client_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &StopChargeRequestData| { &m.connector_id },
            |m: &mut StopChargeRequestData| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StopChargeRequestData| { &m.consumer_public_key },
            |m: &mut StopChargeRequestData| { &mut m.consumer_public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopChargeRequestData>(
            "StopChargeRequestData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeRequestData {
    const NAME: &'static str = "StopChargeRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.charge_point_client_id = is.read_string()?;
                },
                16 => {
                    self.connector_id = is.read_int32()?;
                },
                26 => {
                    self.consumer_public_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.charge_point_client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.charge_point_client_id);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.consumer_public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.charge_point_client_id.is_empty() {
            os.write_string(1, &self.charge_point_client_id)?;
        }
        if self.connector_id != 0 {
            os.write_int32(2, self.connector_id)?;
        }
        if !self.consumer_public_key.is_empty() {
            os.write_string(3, &self.consumer_public_key)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopChargeRequestData {
        StopChargeRequestData::new()
    }

    fn clear(&mut self) {
        self.charge_point_client_id.clear();
        self.connector_id = 0;
        self.consumer_public_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopChargeRequestData {
        static instance: StopChargeRequestData = StopChargeRequestData {
            charge_point_client_id: ::std::string::String::new(),
            connector_id: 0,
            consumer_public_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopChargeRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopChargeRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeRequestData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.StopChargeRequestAckData)
pub struct StopChargeRequestAckData {
    // message fields
    // @@protoc_insertion_point(field:gateway.StopChargeRequestAckData.consumer_public_key)
    pub consumer_public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.StopChargeRequestAckData.transaction_info)
    pub transaction_info: ::protobuf::MessageField<TransactionInfo>,
    // @@protoc_insertion_point(field:gateway.StopChargeRequestAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.StopChargeRequestAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopChargeRequestAckData {
    fn default() -> &'a StopChargeRequestAckData {
        <StopChargeRequestAckData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeRequestAckData {
    pub fn new() -> StopChargeRequestAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer_public_key",
            |m: &StopChargeRequestAckData| { &m.consumer_public_key },
            |m: &mut StopChargeRequestAckData| { &mut m.consumer_public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionInfo>(
            "transaction_info",
            |m: &StopChargeRequestAckData| { &m.transaction_info },
            |m: &mut StopChargeRequestAckData| { &mut m.transaction_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StopChargeRequestAckData| { &m.resp },
            |m: &mut StopChargeRequestAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopChargeRequestAckData>(
            "StopChargeRequestAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeRequestAckData {
    const NAME: &'static str = "StopChargeRequestAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.transaction_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer_public_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction_info)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer_public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer_public_key);
        }
        if let Some(v) = self.transaction_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer_public_key.is_empty() {
            os.write_string(1, &self.consumer_public_key)?;
        }
        if let Some(v) = self.transaction_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopChargeRequestAckData {
        StopChargeRequestAckData::new()
    }

    fn clear(&mut self) {
        self.consumer_public_key.clear();
        self.transaction_info.clear();
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopChargeRequestAckData {
        static instance: StopChargeRequestAckData = StopChargeRequestAckData {
            consumer_public_key: ::std::string::String::new(),
            transaction_info: ::protobuf::MessageField::none(),
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeRequestAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopChargeRequestAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopChargeRequestAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeRequestAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ChargePointState defined connected charge point state data
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ChargePointState)
pub struct ChargePointState {
    // message fields
    // @@protoc_insertion_point(field:gateway.ChargePointState.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.ChargePointState.status)
    pub status: ::std::string::String,
    ///  Charge point connector data using connector Id as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.connectors)
    pub connectors: ::std::collections::HashMap<i32, ConnectorInfo>,
    ///  Charge point transactions data using transaction Id as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.transactions)
    pub transactions: ::std::collections::HashMap<i32, TransactionInfo>,
    ///  current auth data using IdTag as key
    // @@protoc_insertion_point(field:gateway.ChargePointState.auth_list)
    pub auth_list: ::std::collections::HashMap<::std::string::String, ConsumerAuthData>,
    ///  used to inncrement local auth list version
    ///  ocpp requires SendLocalAuthList request to contain new version
    // @@protoc_insertion_point(field:gateway.ChargePointState.current_auth_list_version)
    pub current_auth_list_version: i32,
    ///  used to inncrement transacton Ids by keep the last transaction Id
    // @@protoc_insertion_point(field:gateway.ChargePointState.current_transaction_id)
    pub current_transaction_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ChargePointState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargePointState {
    fn default() -> &'a ChargePointState {
        <ChargePointState as ::protobuf::Message>::default_instance()
    }
}

impl ChargePointState {
    pub fn new() -> ChargePointState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ChargePointState| { &m.id },
            |m: &mut ChargePointState| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ChargePointState| { &m.status },
            |m: &mut ChargePointState| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "connectors",
            |m: &ChargePointState| { &m.connectors },
            |m: &mut ChargePointState| { &mut m.connectors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "transactions",
            |m: &ChargePointState| { &m.transactions },
            |m: &mut ChargePointState| { &mut m.transactions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "auth_list",
            |m: &ChargePointState| { &m.auth_list },
            |m: &mut ChargePointState| { &mut m.auth_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_auth_list_version",
            |m: &ChargePointState| { &m.current_auth_list_version },
            |m: &mut ChargePointState| { &mut m.current_auth_list_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_transaction_id",
            |m: &ChargePointState| { &m.current_transaction_id },
            |m: &mut ChargePointState| { &mut m.current_transaction_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ChargePointState>(
            "ChargePointState",
            fields,
        )
    }
}

impl ::protobuf::Message for ChargePointState {
    const NAME: &'static str = "ChargePointState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.status = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(is, &mut self.connectors)?;
                },
                34 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(is, &mut self.transactions)?;
                },
                42 => {
                    ::protobuf::rt::read_map_into::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(is, &mut self.auth_list)?;
                },
                48 => {
                    self.current_auth_list_version = is.read_int32()?;
                },
                56 => {
                    self.current_transaction_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(3, &self.connectors);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(4, &self.transactions);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(5, &self.auth_list);
        if self.current_auth_list_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.current_auth_list_version, ::protobuf::rt::WireType::Varint);
        }
        if self.current_transaction_id != 0 {
            my_size += ::protobuf::rt::value_size(7, self.current_transaction_id, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<ConnectorInfo>>(3, &self.connectors, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeInt32, ::protobuf::reflect::types::ProtobufTypeMessage<TransactionInfo>>(4, &self.transactions, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::reflect::types::ProtobufTypeString, ::protobuf::reflect::types::ProtobufTypeMessage<ConsumerAuthData>>(5, &self.auth_list, os)?;
        if self.current_auth_list_version != 0 {
            os.write_int32(6, self.current_auth_list_version)?;
        }
        if self.current_transaction_id != 0 {
            os.write_int32(7, self.current_transaction_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ChargePointState {
        ChargePointState::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.status.clear();
        self.connectors.clear();
        self.transactions.clear();
        self.auth_list.clear();
        self.current_auth_list_version = 0;
        self.current_transaction_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargePointState {
        static instance: ::protobuf::rt::Lazy<ChargePointState> = ::protobuf::rt::Lazy::new();
        instance.get(ChargePointState::new)
    }
}

impl ::protobuf::MessageFull for ChargePointState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargePointState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargePointState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargePointState {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ConnectorInfo contains status and ongoing transaction ID for a connector
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ConnectorInfo)
pub struct ConnectorInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.id)
    pub id: i32,
    ///  status of the connector e.g AVAILABLE, PREPARING, CHARGING
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.status)
    pub status: ::std::string::String,
    ///  holds the current Id of ongoing transacton
    // @@protoc_insertion_point(field:gateway.ConnectorInfo.current_transaction)
    pub current_transaction: i32,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ConnectorInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectorInfo {
    fn default() -> &'a ConnectorInfo {
        <ConnectorInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConnectorInfo {
    pub fn new() -> ConnectorInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ConnectorInfo| { &m.id },
            |m: &mut ConnectorInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ConnectorInfo| { &m.status },
            |m: &mut ConnectorInfo| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_transaction",
            |m: &ConnectorInfo| { &m.current_transaction },
            |m: &mut ConnectorInfo| { &mut m.current_transaction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ConnectorInfo>(
            "ConnectorInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for ConnectorInfo {
    const NAME: &'static str = "ConnectorInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.status = is.read_string()?;
                },
                24 => {
                    self.current_transaction = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::rt::WireType::Varint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        if self.current_transaction != 0 {
            my_size += ::protobuf::rt::value_size(3, self.current_transaction, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        if self.current_transaction != 0 {
            os.write_int32(3, self.current_transaction)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ConnectorInfo {
        ConnectorInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status.clear();
        self.current_transaction = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectorInfo {
        static instance: ConnectorInfo = ConnectorInfo {
            id: 0,
            status: ::std::string::String::new(),
            current_transaction: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectorInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectorInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectorInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectorInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  TransactionInfo contains info about a transaction
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.TransactionInfo)
pub struct TransactionInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.TransactionInfo.id)
    pub id: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.id_tag)
    pub id_tag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.connector_id)
    pub connector_id: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.start_time)
    pub start_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.end_time)
    pub end_time: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.start_meter)
    pub start_meter: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.end_meter)
    pub end_meter: i32,
    // @@protoc_insertion_point(field:gateway.TransactionInfo.progress)
    pub progress: ::protobuf::MessageField<ChargingStatusData>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.TransactionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransactionInfo {
    fn default() -> &'a TransactionInfo {
        <TransactionInfo as ::protobuf::Message>::default_instance()
    }
}

impl TransactionInfo {
    pub fn new() -> TransactionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TransactionInfo| { &m.id },
            |m: &mut TransactionInfo| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id_tag",
            |m: &TransactionInfo| { &m.id_tag },
            |m: &mut TransactionInfo| { &mut m.id_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &TransactionInfo| { &m.connector_id },
            |m: &mut TransactionInfo| { &mut m.connector_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_time",
            |m: &TransactionInfo| { &m.start_time },
            |m: &mut TransactionInfo| { &mut m.start_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_time",
            |m: &TransactionInfo| { &m.end_time },
            |m: &mut TransactionInfo| { &mut m.end_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_meter",
            |m: &TransactionInfo| { &m.start_meter },
            |m: &mut TransactionInfo| { &mut m.start_meter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_meter",
            |m: &TransactionInfo| { &m.end_meter },
            |m: &mut TransactionInfo| { &mut m.end_meter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ChargingStatusData>(
            "progress",
            |m: &TransactionInfo| { &m.progress },
            |m: &mut TransactionInfo| { &mut m.progress },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<TransactionInfo>(
            "TransactionInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for TransactionInfo {
    const NAME: &'static str = "TransactionInfo";

    fn is_initialized(&self) -> bool {
        for v in &self.progress {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.id_tag = is.read_string()?;
                },
                24 => {
                    self.connector_id = is.read_int32()?;
                },
                34 => {
                    self.start_time = is.read_string()?;
                },
                42 => {
                    self.end_time = is.read_string()?;
                },
                48 => {
                    self.start_meter = is.read_int32()?;
                },
                56 => {
                    self.end_meter = is.read_int32()?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.progress)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::rt::WireType::Varint);
        }
        if !self.id_tag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id_tag);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        if !self.start_time.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.start_time);
        }
        if !self.end_time.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.end_time);
        }
        if self.start_meter != 0 {
            my_size += ::protobuf::rt::value_size(6, self.start_meter, ::protobuf::rt::WireType::Varint);
        }
        if self.end_meter != 0 {
            my_size += ::protobuf::rt::value_size(7, self.end_meter, ::protobuf::rt::WireType::Varint);
        }
        if let Some(v) = self.progress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.id_tag.is_empty() {
            os.write_string(2, &self.id_tag)?;
        }
        if self.connector_id != 0 {
            os.write_int32(3, self.connector_id)?;
        }
        if !self.start_time.is_empty() {
            os.write_string(4, &self.start_time)?;
        }
        if !self.end_time.is_empty() {
            os.write_string(5, &self.end_time)?;
        }
        if self.start_meter != 0 {
            os.write_int32(6, self.start_meter)?;
        }
        if self.end_meter != 0 {
            os.write_int32(7, self.end_meter)?;
        }
        if let Some(v) = self.progress.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> TransactionInfo {
        TransactionInfo::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.id_tag.clear();
        self.connector_id = 0;
        self.start_time.clear();
        self.end_time.clear();
        self.start_meter = 0;
        self.end_meter = 0;
        self.progress.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransactionInfo {
        static instance: TransactionInfo = TransactionInfo {
            id: 0,
            id_tag: ::std::string::String::new(),
            connector_id: 0,
            start_time: ::std::string::String::new(),
            end_time: ::std::string::String::new(),
            start_meter: 0,
            end_meter: 0,
            progress: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransactionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransactionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransactionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  ConsumerAuthData contains the consumer public key assigned to the local
///  authorized data. This keeps track of consumer auth ownership.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.ConsumerAuthData)
pub struct ConsumerAuthData {
    // message fields
    ///  consumer of the service public key
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.public_key)
    pub public_key: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.transaction_id)
    pub transaction_id: i32,
    ///  local charge point auth data assigned to consumer
    // @@protoc_insertion_point(field:gateway.ConsumerAuthData.auth_data)
    pub auth_data: ::protobuf::MessageField<LocalAuthorizationData>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.ConsumerAuthData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsumerAuthData {
    fn default() -> &'a ConsumerAuthData {
        <ConsumerAuthData as ::protobuf::Message>::default_instance()
    }
}

impl ConsumerAuthData {
    pub fn new() -> ConsumerAuthData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &ConsumerAuthData| { &m.public_key },
            |m: &mut ConsumerAuthData| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transaction_id",
            |m: &ConsumerAuthData| { &m.transaction_id },
            |m: &mut ConsumerAuthData| { &mut m.transaction_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LocalAuthorizationData>(
            "auth_data",
            |m: &ConsumerAuthData| { &m.auth_data },
            |m: &mut ConsumerAuthData| { &mut m.auth_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ConsumerAuthData>(
            "ConsumerAuthData",
            fields,
        )
    }
}

impl ::protobuf::Message for ConsumerAuthData {
    const NAME: &'static str = "ConsumerAuthData";

    fn is_initialized(&self) -> bool {
        for v in &self.auth_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = is.read_string()?;
                },
                16 => {
                    self.transaction_id = is.read_int32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.public_key);
        }
        if self.transaction_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.transaction_id, ::protobuf::rt::WireType::Varint);
        }
        if let Some(v) = self.auth_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.public_key.is_empty() {
            os.write_string(1, &self.public_key)?;
        }
        if self.transaction_id != 0 {
            os.write_int32(2, self.transaction_id)?;
        }
        if let Some(v) = self.auth_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ConsumerAuthData {
        ConsumerAuthData::new()
    }

    fn clear(&mut self) {
        self.public_key.clear();
        self.transaction_id = 0;
        self.auth_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsumerAuthData {
        static instance: ConsumerAuthData = ConsumerAuthData {
            public_key: ::std::string::String::new(),
            transaction_id: 0,
            auth_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsumerAuthData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsumerAuthData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsumerAuthData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsumerAuthData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.LocalAuthorizationData)
pub struct LocalAuthorizationData {
    // message fields
    // @@protoc_insertion_point(field:gateway.LocalAuthorizationData.id_tag)
    pub id_tag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.LocalAuthorizationData.id_tag_info)
    pub id_tag_info: ::protobuf::MessageField<IdTagInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.LocalAuthorizationData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LocalAuthorizationData {
    fn default() -> &'a LocalAuthorizationData {
        <LocalAuthorizationData as ::protobuf::Message>::default_instance()
    }
}

impl LocalAuthorizationData {
    pub fn new() -> LocalAuthorizationData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id_tag",
            |m: &LocalAuthorizationData| { &m.id_tag },
            |m: &mut LocalAuthorizationData| { &mut m.id_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IdTagInfo>(
            "id_tag_info",
            |m: &LocalAuthorizationData| { &m.id_tag_info },
            |m: &mut LocalAuthorizationData| { &mut m.id_tag_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<LocalAuthorizationData>(
            "LocalAuthorizationData",
            fields,
        )
    }
}

impl ::protobuf::Message for LocalAuthorizationData {
    const NAME: &'static str = "LocalAuthorizationData";

    fn is_initialized(&self) -> bool {
        for v in &self.id_tag_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id_tag = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id_tag_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id_tag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id_tag);
        }
        if let Some(v) = self.id_tag_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id_tag.is_empty() {
            os.write_string(1, &self.id_tag)?;
        }
        if let Some(v) = self.id_tag_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> LocalAuthorizationData {
        LocalAuthorizationData::new()
    }

    fn clear(&mut self) {
        self.id_tag.clear();
        self.id_tag_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LocalAuthorizationData {
        static instance: LocalAuthorizationData = LocalAuthorizationData {
            id_tag: ::std::string::String::new(),
            id_tag_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LocalAuthorizationData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LocalAuthorizationData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LocalAuthorizationData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalAuthorizationData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:gateway.IdTagInfo)
pub struct IdTagInfo {
    // message fields
    // @@protoc_insertion_point(field:gateway.IdTagInfo.expiry_date)
    pub expiry_date: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.IdTagInfo.parent_id_Tag)
    pub parent_id_Tag: ::std::string::String,
    // @@protoc_insertion_point(field:gateway.IdTagInfo.status)
    pub status: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:gateway.IdTagInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdTagInfo {
    fn default() -> &'a IdTagInfo {
        <IdTagInfo as ::protobuf::Message>::default_instance()
    }
}

impl IdTagInfo {
    pub fn new() -> IdTagInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expiry_date",
            |m: &IdTagInfo| { &m.expiry_date },
            |m: &mut IdTagInfo| { &mut m.expiry_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_id_Tag",
            |m: &IdTagInfo| { &m.parent_id_Tag },
            |m: &mut IdTagInfo| { &mut m.parent_id_Tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &IdTagInfo| { &m.status },
            |m: &mut IdTagInfo| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<IdTagInfo>(
            "IdTagInfo",
            fields,
        )
    }
}

impl ::protobuf::Message for IdTagInfo {
    const NAME: &'static str = "IdTagInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.expiry_date = is.read_string()?;
                },
                18 => {
                    self.parent_id_Tag = is.read_string()?;
                },
                26 => {
                    self.status = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.expiry_date.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.expiry_date);
        }
        if !self.parent_id_Tag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.parent_id_Tag);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.expiry_date.is_empty() {
            os.write_string(1, &self.expiry_date)?;
        }
        if !self.parent_id_Tag.is_empty() {
            os.write_string(2, &self.parent_id_Tag)?;
        }
        if !self.status.is_empty() {
            os.write_string(3, &self.status)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> IdTagInfo {
        IdTagInfo::new()
    }

    fn clear(&mut self) {
        self.expiry_date.clear();
        self.parent_id_Tag.clear();
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdTagInfo {
        static instance: IdTagInfo = IdTagInfo {
            expiry_date: ::std::string::String::new(),
            parent_id_Tag: ::std::string::String::new(),
            status: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdTagInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdTagInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdTagInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdTagInfo {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:gateway.EventType)
pub enum EventType {
    // @@protoc_insertion_point(enum_value:gateway.EventType.BOOT_NOTIFICATION_REQUEST)
    BOOT_NOTIFICATION_REQUEST = 0,
    // @@protoc_insertion_point(enum_value:gateway.EventType.HEARTBEAT_REQUEST)
    HEARTBEAT_REQUEST = 1,
    // @@protoc_insertion_point(enum_value:gateway.EventType.LOG)
    LOG = 2,
    // @@protoc_insertion_point(enum_value:gateway.EventType.AUTHORIZE_REQUEST)
    AUTHORIZE_REQUEST = 3,
    // @@protoc_insertion_point(enum_value:gateway.EventType.AUTHORIZE_REQUEST_ACK)
    AUTHORIZE_REQUEST_ACK = 4,
    // @@protoc_insertion_point(enum_value:gateway.EventType.CHECK_AVAILABILITY_REQUEST)
    CHECK_AVAILABILITY_REQUEST = 5,
    // @@protoc_insertion_point(enum_value:gateway.EventType.CHECK_AVAILABILITY_REQUEST_ACK)
    CHECK_AVAILABILITY_REQUEST_ACK = 6,
    // @@protoc_insertion_point(enum_value:gateway.EventType.START_CHARGE_REQUEST)
    START_CHARGE_REQUEST = 7,
    // @@protoc_insertion_point(enum_value:gateway.EventType.START_CHARGE_REQUEST_ACK)
    START_CHARGE_REQUEST_ACK = 8,
    // @@protoc_insertion_point(enum_value:gateway.EventType.CHARGE_STATUS)
    CHARGE_STATUS = 9,
    // @@protoc_insertion_point(enum_value:gateway.EventType.STOP_CHARGE_REQUEST)
    STOP_CHARGE_REQUEST = 10,
    // @@protoc_insertion_point(enum_value:gateway.EventType.STOP_CHARGE_REQUEST_ACK)
    STOP_CHARGE_REQUEST_ACK = 11,
}

impl ::protobuf::Enum for EventType {
    const NAME: &'static str = "EventType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::BOOT_NOTIFICATION_REQUEST),
            1 => ::std::option::Option::Some(EventType::HEARTBEAT_REQUEST),
            2 => ::std::option::Option::Some(EventType::LOG),
            3 => ::std::option::Option::Some(EventType::AUTHORIZE_REQUEST),
            4 => ::std::option::Option::Some(EventType::AUTHORIZE_REQUEST_ACK),
            5 => ::std::option::Option::Some(EventType::CHECK_AVAILABILITY_REQUEST),
            6 => ::std::option::Option::Some(EventType::CHECK_AVAILABILITY_REQUEST_ACK),
            7 => ::std::option::Option::Some(EventType::START_CHARGE_REQUEST),
            8 => ::std::option::Option::Some(EventType::START_CHARGE_REQUEST_ACK),
            9 => ::std::option::Option::Some(EventType::CHARGE_STATUS),
            10 => ::std::option::Option::Some(EventType::STOP_CHARGE_REQUEST),
            11 => ::std::option::Option::Some(EventType::STOP_CHARGE_REQUEST_ACK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EventType] = &[
        EventType::BOOT_NOTIFICATION_REQUEST,
        EventType::HEARTBEAT_REQUEST,
        EventType::LOG,
        EventType::AUTHORIZE_REQUEST,
        EventType::AUTHORIZE_REQUEST_ACK,
        EventType::CHECK_AVAILABILITY_REQUEST,
        EventType::CHECK_AVAILABILITY_REQUEST_ACK,
        EventType::START_CHARGE_REQUEST,
        EventType::START_CHARGE_REQUEST_ACK,
        EventType::CHARGE_STATUS,
        EventType::STOP_CHARGE_REQUEST,
        EventType::STOP_CHARGE_REQUEST_ACK,
    ];
}

impl ::protobuf::EnumFull for EventType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EventType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::BOOT_NOTIFICATION_REQUEST
    }
}

impl EventType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EventType>("EventType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!charge_point_gateway_format.proto\x12\x07gateway\"\xcf\x08\n\x05Event\
    \x12-\n\x08event_id\x18\x01\x20\x01(\x0e2\x12.gateway.EventTypeR\x07even\
    tId\x12k\n\x1eboot_notification_request_data\x18\x02\x20\x01(\x0b2$.gate\
    way.BootNotificationRequestDataH\0R\x1bbootNotificationRequestData\x12-\
    \n\x08log_data\x18\x03\x20\x01(\x0b2\x10.gateway.LogDataH\0R\x07logData\
    \x12U\n\x16authorize_request_data\x18\x04\x20\x01(\x0b2\x1d.gateway.Auth\
    orizeRequestDataH\0R\x14authorizeRequestData\x12_\n\x1aauthorize_request\
    _ack_data\x18\x05\x20\x01(\x0b2\x20.gateway.AuthorizeRequestAckDataH\0R\
    \x17authorizeRequestAckData\x12n\n\x1fcheck_availability_request_data\
    \x18\x06\x20\x01(\x0b2%.gateway.CheckAvailabilityRequestDataH\0R\x1cchec\
    kAvailabilityRequestData\x12x\n#check_availability_request_ack_data\x18\
    \x07\x20\x01(\x0b2(.gateway.CheckAvailabilityRequestAckDataH\0R\x1fcheck\
    AvailabilityRequestAckData\x12\\\n\x19start_charge_request_data\x18\x08\
    \x20\x01(\x0b2\x1f.gateway.StartChargeRequestDataH\0R\x16startChargeRequ\
    estData\x12f\n\x1dstart_charge_request_ack_data\x18\t\x20\x01(\x0b2\".ga\
    teway.StartChargeRequestAckDataH\0R\x19startChargeRequestAckData\x12K\n\
    \x12charge_status_data\x18\n\x20\x01(\x0b2\x1b.gateway.ChargingStatusDat\
    aH\0R\x10chargeStatusData\x12Y\n\x18stop_charge_request_data\x18\x0b\x20\
    \x01(\x0b2\x1e.gateway.StopChargeRequestDataH\0R\x15stopChargeRequestDat\
    a\x12c\n\x1cstop_charge_request_ack_data\x18\x0c\x20\x01(\x0b2!.gateway.\
    StopChargeRequestAckDataH\0R\x18stopChargeRequestAckDataB\x06\n\x04data\
    \"\x95\x03\n\x1bBootNotificationRequestData\x127\n\x18charge_box_serial_\
    number\x18\x01\x20\x01(\tR\x15chargeBoxSerialNumber\x12,\n\x12charge_poi\
    nt_model\x18\x02\x20\x01(\tR\x10chargePointModel\x12;\n\x1aCharge_point_\
    serial_number\x18\x03\x20\x01(\tR\x17ChargePointSerialNumber\x12.\n\x13C\
    harge_point_vendor\x18\x04\x20\x01(\tR\x11ChargePointVendor\x12)\n\x10fi\
    rmware_version\x18\x05\x20\x01(\tR\x0ffirmwareVersion\x12\x14\n\x05iccid\
    \x18\x06\x20\x01(\tR\x05iccid\x12\x12\n\x04imsi\x18\x07\x20\x01(\tR\x04i\
    msi\x12.\n\x13meter_serial_number\x18\x08\x20\x01(\tR\x11meterSerialNumb\
    er\x12\x1d\n\nmeter_type\x18\t\x20\x01(\tR\tmeterType\"S\n\x07LogData\
    \x12!\n\x0ccurrent_time\x18\x01\x20\x01(\tR\x0bcurrentTime\x12%\n\x04res\
    p\x18\x02\x20\x01(\x0b2\x11.gateway.ResponseR\x04resp\"{\n\x14AuthorizeR\
    equestData\x123\n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13charg\
    ePointClientId\x12.\n\x13consumer_public_key\x18\x02\x20\x01(\tR\x11cons\
    umerPublicKey\"p\n\x17AuthorizeRequestAckData\x12.\n\x13consumer_public_\
    key\x18\x01\x20\x01(\tR\x11consumerPublicKey\x12%\n\x04resp\x18\x02\x20\
    \x01(\x0b2\x11.gateway.ResponseR\x04resp\"v\n\x1cCheckAvailabilityReques\
    tData\x123\n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargePoin\
    tClientId\x12!\n\x0cconnector_id\x18\x02\x20\x01(\x05R\x0bconnectorId\"H\
    \n\x1fCheckAvailabilityRequestAckData\x12%\n\x04resp\x18\x01\x20\x01(\
    \x0b2\x11.gateway.ResponseR\x04resp\"\xa0\x01\n\x16StartChargeRequestDat\
    a\x123\n\x16charge_point_client_id\x18\x01\x20\x01(\tR\x13chargePointCli\
    entId\x12!\n\x0cconnector_id\x18\x02\x20\x01(\x05R\x0bconnectorId\x12.\n\
    \x13consumer_public_key\x18\x03\x20\x01(\tR\x11consumerPublicKey\"r\n\
    \x19StartChargeRequestAckData\x12.\n\x13consumer_public_key\x18\x01\x20\
    \x01(\tR\x11consumerPublicKey\x12%\n\x04resp\x18\x02\x20\x01(\x0b2\x11.g\
    ateway.ResponseR\x04resp\":\n\x08Response\x12\x14\n\x05error\x18\x01\x20\
    \x01(\x08R\x05error\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\
    \"\xdc\x01\n\x12ChargingStatusData\x122\n\x15initial_battery_level\x18\
    \x01\x20\x01(\x02R\x13initialBatteryLevel\x12#\n\rbattery_level\x18\x02\
    \x20\x01(\x02R\x0cbatteryLevel\x12'\n\x0fcurrent_offered\x18\x03\x20\x01\
    (\x02R\x0ecurrentOffered\x12!\n\x0cbattery_unit\x18\x04\x20\x01(\tR\x0bb\
    atteryUnit\x12!\n\x0ccurrent_unit\x18\x05\x20\x01(\tR\x0bcurrentUnit\"\
    \x9f\x01\n\x15StopChargeRequestData\x123\n\x16charge_point_client_id\x18\
    \x01\x20\x01(\tR\x13chargePointClientId\x12!\n\x0cconnector_id\x18\x02\
    \x20\x01(\x05R\x0bconnectorId\x12.\n\x13consumer_public_key\x18\x03\x20\
    \x01(\tR\x11consumerPublicKey\"\xb6\x01\n\x18StopChargeRequestAckData\
    \x12.\n\x13consumer_public_key\x18\x01\x20\x01(\tR\x11consumerPublicKey\
    \x12C\n\x10transaction_info\x18\x02\x20\x01(\x0b2\x18.gateway.Transactio\
    nInfoR\x0ftransactionInfo\x12%\n\x04resp\x18\x03\x20\x01(\x0b2\x11.gatew\
    ay.ResponseR\x04resp\"\x97\x05\n\x10ChargePointState\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x16\n\x06status\x18\x02\x20\x01(\tR\x06status\
    \x12I\n\nconnectors\x18\x03\x20\x03(\x0b2).gateway.ChargePointState.Conn\
    ectorsEntryR\nconnectors\x12O\n\x0ctransactions\x18\x04\x20\x03(\x0b2+.g\
    ateway.ChargePointState.TransactionsEntryR\x0ctransactions\x12D\n\tauth_\
    list\x18\x05\x20\x03(\x0b2'.gateway.ChargePointState.AuthListEntryR\x08a\
    uthList\x129\n\x19current_auth_list_version\x18\x06\x20\x01(\x05R\x16cur\
    rentAuthListVersion\x124\n\x16current_transaction_id\x18\x07\x20\x01(\
    \x05R\x14currentTransactionId\x1aU\n\x0fConnectorsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\x05R\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.\
    gateway.ConnectorInfoR\x05value:\x028\x01\x1aY\n\x11TransactionsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\x05R\x03key\x12.\n\x05value\x18\x02\
    \x20\x01(\x0b2\x18.gateway.TransactionInfoR\x05value:\x028\x01\x1aV\n\rA\
    uthListEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12/\n\x05value\
    \x18\x02\x20\x01(\x0b2\x19.gateway.ConsumerAuthDataR\x05value:\x028\x01\
    \"h\n\rConnectorInfo\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x16\
    \n\x06status\x18\x02\x20\x01(\tR\x06status\x12/\n\x13current_transaction\
    \x18\x03\x20\x01(\x05R\x12currentTransaction\"\x8c\x02\n\x0fTransactionI\
    nfo\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x15\n\x06id_tag\x18\
    \x02\x20\x01(\tR\x05idTag\x12!\n\x0cconnector_id\x18\x03\x20\x01(\x05R\
    \x0bconnectorId\x12\x1d\n\nstart_time\x18\x04\x20\x01(\tR\tstartTime\x12\
    \x19\n\x08end_time\x18\x05\x20\x01(\tR\x07endTime\x12\x1f\n\x0bstart_met\
    er\x18\x06\x20\x01(\x05R\nstartMeter\x12\x1b\n\tend_meter\x18\x07\x20\
    \x01(\x05R\x08endMeter\x127\n\x08progress\x18\x08\x20\x01(\x0b2\x1b.gate\
    way.ChargingStatusDataR\x08progress\"\x96\x01\n\x10ConsumerAuthData\x12\
    \x1d\n\npublic_key\x18\x01\x20\x01(\tR\tpublicKey\x12%\n\x0etransaction_\
    id\x18\x02\x20\x01(\x05R\rtransactionId\x12<\n\tauth_data\x18\x03\x20\
    \x01(\x0b2\x1f.gateway.LocalAuthorizationDataR\x08authData\"c\n\x16Local\
    AuthorizationData\x12\x15\n\x06id_tag\x18\x01\x20\x01(\tR\x05idTag\x122\
    \n\x0bid_tag_info\x18\x02\x20\x01(\x0b2\x12.gateway.IdTagInfoR\tidTagInf\
    o\"h\n\tIdTagInfo\x12\x1f\n\x0bexpiry_date\x18\x01\x20\x01(\tR\nexpiryDa\
    te\x12\"\n\rparent_id_Tag\x18\x02\x20\x01(\tR\x0bparentIdTag\x12\x16\n\
    \x06status\x18\x03\x20\x01(\tR\x06status*\xc1\x02\n\tEventType\x12\x1d\n\
    \x19BOOT_NOTIFICATION_REQUEST\x10\0\x12\x15\n\x11HEARTBEAT_REQUEST\x10\
    \x01\x12\x07\n\x03LOG\x10\x02\x12\x15\n\x11AUTHORIZE_REQUEST\x10\x03\x12\
    \x19\n\x15AUTHORIZE_REQUEST_ACK\x10\x04\x12\x1e\n\x1aCHECK_AVAILABILITY_\
    REQUEST\x10\x05\x12\"\n\x1eCHECK_AVAILABILITY_REQUEST_ACK\x10\x06\x12\
    \x18\n\x14START_CHARGE_REQUEST\x10\x07\x12\x1c\n\x18START_CHARGE_REQUEST\
    _ACK\x10\x08\x12\x11\n\rCHARGE_STATUS\x10\t\x12\x17\n\x13STOP_CHARGE_REQ\
    UEST\x10\n\x12\x1b\n\x17STOP_CHARGE_REQUEST_ACK\x10\x0bBWZUgithub.com/pe\
    aqnetwork/peaq-network-ev-charging-message-format/golang/gateway;gateway\
    J\x8a2\n\x07\x12\x05\0\0\xa7\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x10\n\x08\n\x01\x08\x12\x03\x03\0l\n\t\n\
    \x02\x08\x0b\x12\x03\x03\0l\n\n\n\x02\x05\0\x12\x04\x05\0\x12\x01\n\n\n\
    \x03\x05\0\x01\x12\x03\x05\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\
    \x02\x20\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x02\x1b\n\x0c\n\x05\x05\
    \0\x02\0\x02\x12\x03\x06\x1e\x1f\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\
    \x02\x18\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\x02\x13\n\x0c\n\x05\
    \x05\0\x02\x01\x02\x12\x03\x07\x16\x17\n\x0b\n\x04\x05\0\x02\x02\x12\x03\
    \x08\x02\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x08\x02\x05\n\x0c\n\x05\
    \x05\0\x02\x02\x02\x12\x03\x08\x08\t\n\x0b\n\x04\x05\0\x02\x03\x12\x03\t\
    \x02\x18\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\t\x02\x13\n\x0c\n\x05\x05\
    \0\x02\x03\x02\x12\x03\t\x16\x17\n\x0b\n\x04\x05\0\x02\x04\x12\x03\n\x02\
    \x1c\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\n\x02\x17\n\x0c\n\x05\x05\0\
    \x02\x04\x02\x12\x03\n\x1a\x1b\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x0b\x02\
    !\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x0b\x02\x1c\n\x0c\n\x05\x05\0\
    \x02\x05\x02\x12\x03\x0b\x1f\x20\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0c\
    \x02%\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x0c\x02\x20\n\x0c\n\x05\x05\
    \0\x02\x06\x02\x12\x03\x0c#$\n\x0b\n\x04\x05\0\x02\x07\x12\x03\r\x02\x1b\
    \n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\r\x02\x16\n\x0c\n\x05\x05\0\x02\
    \x07\x02\x12\x03\r\x19\x1a\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x0e\x02\x1f\
    \n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0e\x02\x1a\n\x0c\n\x05\x05\0\x02\
    \x08\x02\x12\x03\x0e\x1d\x1e\n\x0b\n\x04\x05\0\x02\t\x12\x03\x0f\x02\x14\
    \n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x0f\x02\x0f\n\x0c\n\x05\x05\0\x02\t\
    \x02\x12\x03\x0f\x12\x13\n\x0b\n\x04\x05\0\x02\n\x12\x03\x10\x02\x1b\n\
    \x0c\n\x05\x05\0\x02\n\x01\x12\x03\x10\x02\x15\n\x0c\n\x05\x05\0\x02\n\
    \x02\x12\x03\x10\x18\x1a\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x11\x02\x1f\n\
    \x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x11\x02\x19\n\x0c\n\x05\x05\0\x02\
    \x0b\x02\x12\x03\x11\x1c\x1e\n\n\n\x02\x04\0\x12\x04\x14\0#\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x14\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x15\x02\
    \x19\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x15\x02\x0b\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x15\x0c\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\
    \x17\x18\n\x0c\n\x04\x04\0\x08\0\x12\x04\x16\x02\"\x03\n\x0c\n\x05\x04\0\
    \x08\0\x01\x12\x03\x16\x08\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x17\x04\
    C\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x17\x04\x1f\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x17\x20>\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x17A\
    B\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x18\x04\x19\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03\x18\x04\x0b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x18\
    \x0c\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x19\x044\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\
    \x19\x04\x18\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x19\x19/\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x1923\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x1a\
    \x04;\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x1a\x04\x1b\n\x0c\n\x05\x04\
    \0\x02\x04\x01\x12\x03\x1a\x1c6\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \x1a9:\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x1b\x04E\n\x0c\n\x05\x04\0\x02\
    \x05\x06\x12\x03\x1b\x04\x20\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1b!@\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1bCD\n\x0b\n\x04\x04\0\x02\x06\
    \x12\x03\x1c\x04L\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x1c\x04#\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03\x1c$G\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x1cJK\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x1d\x049\n\x0c\n\x05\x04\0\
    \x02\x07\x06\x12\x03\x1d\x04\x1a\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\
    \x1d\x1b4\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1d78\n\x0b\n\x04\x04\0\
    \x02\x08\x12\x03\x1e\x04@\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03\x1e\x04\
    \x1d\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x1e\x1e;\n\x0c\n\x05\x04\0\
    \x02\x08\x03\x12\x03\x1e>?\n\x0b\n\x04\x04\0\x02\t\x12\x03\x1f\x04/\n\
    \x0c\n\x05\x04\0\x02\t\x06\x12\x03\x1f\x04\x16\n\x0c\n\x05\x04\0\x02\t\
    \x01\x12\x03\x1f\x17)\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\x1f,.\n\x0b\n\
    \x04\x04\0\x02\n\x12\x03\x20\x048\n\x0c\n\x05\x04\0\x02\n\x06\x12\x03\
    \x20\x04\x19\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x20\x1a2\n\x0c\n\x05\
    \x04\0\x02\n\x03\x12\x03\x2057\n\x0b\n\x04\x04\0\x02\x0b\x12\x03!\x04?\n\
    \x0c\n\x05\x04\0\x02\x0b\x06\x12\x03!\x04\x1c\n\x0c\n\x05\x04\0\x02\x0b\
    \x01\x12\x03!\x1d9\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03!<>\n\n\n\x02\
    \x04\x01\x12\x04%\0/\x01\n\n\n\x03\x04\x01\x01\x12\x03%\x08#\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03&\x02&\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03&\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03&\t!\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03&$%\n\x0b\n\x04\x04\x01\x02\x01\x12\x03'\x02\x20\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03'\t\x1b\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03'\x1e\x1f\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03(\x02(\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03(\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03(\t#\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03(&'\n\x0b\n\x04\x04\x01\x02\x03\x12\x03)\x02\
    !\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03)\t\x1c\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03)\x1f\
    \x20\n\x0b\n\x04\x04\x01\x02\x04\x12\x03*\x02\x1e\n\x0c\n\x05\x04\x01\
    \x02\x04\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03*\t\
    \x19\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03*\x1c\x1d\n\x0b\n\x04\x04\
    \x01\x02\x05\x12\x03+\x02\x13\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03+\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03+\t\x0e\n\x0c\n\x05\x04\
    \x01\x02\x05\x03\x12\x03+\x11\x12\n\x0b\n\x04\x04\x01\x02\x06\x12\x03,\
    \x02\x12\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03,\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x06\x01\x12\x03,\t\r\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\
    \x03,\x10\x11\n\x0b\n\x04\x04\x01\x02\x07\x12\x03-\x02!\n\x0c\n\x05\x04\
    \x01\x02\x07\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\
    \x03-\t\x1c\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03-\x1f\x20\n\x0b\n\x04\
    \x04\x01\x02\x08\x12\x03.\x02\x18\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\
    \x03.\x02\x08\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03.\t\x13\n\x0c\n\x05\
    \x04\x01\x02\x08\x03\x12\x03.\x16\x17\n\n\n\x02\x04\x02\x12\x041\04\x01\
    \n\n\n\x03\x04\x02\x01\x12\x031\x08\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x032\x02\x1a\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x032\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x032\t\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x032\
    \x18\x19\n\x0b\n\x04\x04\x02\x02\x01\x12\x033\x02\x14\n\x0c\n\x05\x04\
    \x02\x02\x01\x06\x12\x033\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x033\
    \x0b\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x033\x12\x13\n\n\n\x02\x04\
    \x03\x12\x046\09\x01\n\n\n\x03\x04\x03\x01\x12\x036\x08\x1c\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x037\x02$\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x037\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x037\t\x1f\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x037\"#\n\x0b\n\x04\x04\x03\x02\x01\x12\x038\x02!\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x038\t\x1c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x038\x1f\x20\n\n\
    \n\x02\x04\x04\x12\x04:\0=\x01\n\n\n\x03\x04\x04\x01\x12\x03:\x08\x1f\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03;\x02!\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x03;\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03;\t\x1c\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03;\x1f\x20\n\x0b\n\x04\x04\x04\x02\x01\x12\x03<\
    \x02\x14\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03<\x02\n\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03<\x0b\x0f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03<\x12\x13\n\n\n\x02\x04\x05\x12\x04?\0B\x01\n\n\n\x03\x04\x05\x01\
    \x12\x03?\x08$\n\x0b\n\x04\x04\x05\x02\0\x12\x03@\x02$\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03@\t\
    \x1f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03@\"#\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03A\x02\x19\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03A\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03A\x08\x14\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03A\x17\x18\n\t\n\x02\x04\x06\x12\x03C\0>\n\n\n\x03\x04\
    \x06\x01\x12\x03C\x08'\n\x0b\n\x04\x04\x06\x02\0\x12\x03C*<\n\x0c\n\x05\
    \x04\x06\x02\0\x06\x12\x03C*2\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03C37\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03C:;\n\n\n\x02\x04\x07\x12\x04E\0I\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03E\x08\x1e\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03F\x02$\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03F\x02\x08\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03F\t\x1f\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03F\"#\n\x0b\n\x04\x04\x07\x02\x01\x12\x03G\x02\x19\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x03G\x02\x07\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03G\x08\x14\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03G\x17\x18\n\x0b\n\
    \x04\x04\x07\x02\x02\x12\x03H\x02!\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\
    \x03H\x02\x08\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03H\t\x1c\n\x0c\n\x05\
    \x04\x07\x02\x02\x03\x12\x03H\x1f\x20\n\n\n\x02\x04\x08\x12\x04J\0M\x01\
    \n\n\n\x03\x04\x08\x01\x12\x03J\x08!\n\x0b\n\x04\x04\x08\x02\0\x12\x03K\
    \x02!\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03K\x02\x08\n\x0c\n\x05\x04\x08\
    \x02\0\x01\x12\x03K\t\x1c\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03K\x1f\x20\
    \n\x0b\n\x04\x04\x08\x02\x01\x12\x03L\x02\x14\n\x0c\n\x05\x04\x08\x02\
    \x01\x06\x12\x03L\x02\n\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03L\x0b\x0f\
    \n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03L\x12\x13\n\n\n\x02\x04\t\x12\
    \x04O\0R\x01\n\n\n\x03\x04\t\x01\x12\x03O\x08\x10\n\x0b\n\x04\x04\t\x02\
    \0\x12\x03P\x02\x11\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03P\x02\x06\n\x0c\n\
    \x05\x04\t\x02\0\x01\x12\x03P\x07\x0c\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x03P\x0f\x10\n\x0b\n\x04\x04\t\x02\x01\x12\x03Q\x02\x15\n\x0c\n\x05\x04\
    \t\x02\x01\x05\x12\x03Q\x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03Q\t\
    \x10\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03Q\x13\x14\nP\n\x02\x04\n\x12\
    \x04U\0`\x01\x1aD\x20ChargingStatusData\x20contains\x20status\x20of\x20t\
    he\x20current\x20ongoing\x20charging\n\n\n\n\x03\x04\n\x01\x12\x03U\x08\
    \x1a\nE\n\x04\x04\n\x02\0\x12\x03W\x02\"\x1a8\x20initial\x20EV\x20batter\
    y\x20level\x20in\x20percentage\x20before\x20charging\n\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x03W\x02\x07\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03W\x08\x1d\
    \n\x0c\n\x05\x04\n\x02\0\x03\x12\x03W\x20!\nE\n\x04\x04\n\x02\x01\x12\
    \x03Y\x02\x1a\x1a8\x20current\x20EV\x20battery\x20level\x20in\x20percent\
    age\x20before\x20charging\n\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03Y\x02\
    \x07\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03Y\x08\x15\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03Y\x18\x19\n3\n\x04\x04\n\x02\x02\x12\x03[\x02\x1c\
    \x1a&\x20the\x20electrical\x20current\x20offered\x20to\x20EV\n\n\x0c\n\
    \x05\x04\n\x02\x02\x05\x12\x03[\x02\x07\n\x0c\n\x05\x04\n\x02\x02\x01\
    \x12\x03[\x08\x17\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03[\x1a\x1b\nO\n\
    \x04\x04\n\x02\x03\x12\x03]\x02\x1a\x1aB\x20the\x20initial_battery_level\
    \x20and\x20battery_level\x20value\x20unit\x20-\x20Percent\n\n\x0c\n\x05\
    \x04\n\x02\x03\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\
    \x03]\t\x15\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03]\x18\x19\n1\n\x04\x04\
    \n\x02\x04\x12\x03_\x02\x1a\x1a$\x20the\x20current\x20offered\x20value\
    \x20unit\x20-\x20A\n\n\x0c\n\x05\x04\n\x02\x04\x05\x12\x03_\x02\x08\n\
    \x0c\n\x05\x04\n\x02\x04\x01\x12\x03_\t\x15\n\x0c\n\x05\x04\n\x02\x04\
    \x03\x12\x03_\x18\x19\n\n\n\x02\x04\x0b\x12\x04b\0f\x01\n\n\n\x03\x04\
    \x0b\x01\x12\x03b\x08\x1d\n\x0b\n\x04\x04\x0b\x02\0\x12\x03c\x02$\n\x0c\
    \n\x05\x04\x0b\x02\0\x05\x12\x03c\x02\x08\n\x0c\n\x05\x04\x0b\x02\0\x01\
    \x12\x03c\t\x1f\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03c\"#\n\x0b\n\x04\
    \x04\x0b\x02\x01\x12\x03d\x02\x19\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\
    \x03d\x02\x07\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03d\x08\x14\n\x0c\n\
    \x05\x04\x0b\x02\x01\x03\x12\x03d\x17\x18\n\x0b\n\x04\x04\x0b\x02\x02\
    \x12\x03e\x02!\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\x03e\x02\x08\n\x0c\n\
    \x05\x04\x0b\x02\x02\x01\x12\x03e\t\x1c\n\x0c\n\x05\x04\x0b\x02\x02\x03\
    \x12\x03e\x1f\x20\n\n\n\x02\x04\x0c\x12\x04h\0l\x01\n\n\n\x03\x04\x0c\
    \x01\x12\x03h\x08\x20\n\x0b\n\x04\x04\x0c\x02\0\x12\x03i\x02!\n\x0c\n\
    \x05\x04\x0c\x02\0\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x0c\x02\0\x01\
    \x12\x03i\t\x1c\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03i\x1f\x20\n\x0b\n\
    \x04\x04\x0c\x02\x01\x12\x03j\x02'\n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\
    \x03j\x02\x11\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03j\x12\"\n\x0c\n\x05\
    \x04\x0c\x02\x01\x03\x12\x03j%&\n\x0b\n\x04\x04\x0c\x02\x02\x12\x03k\x02\
    \x14\n\x0c\n\x05\x04\x0c\x02\x02\x06\x12\x03k\x02\n\n\x0c\n\x05\x04\x0c\
    \x02\x02\x01\x12\x03k\x0b\x0f\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03k\
    \x12\x13\nH\n\x02\x04\r\x12\x04o\0}\x01\x1a<\x20ChargePointState\x20defi\
    ned\x20connected\x20charge\x20point\x20state\x20data\n\n\n\n\x03\x04\r\
    \x01\x12\x03o\x08\x18\n\x0b\n\x04\x04\r\x02\0\x12\x03p\x02\x10\n\x0c\n\
    \x05\x04\r\x02\0\x05\x12\x03p\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\
    \x03p\t\x0b\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03p\x0e\x0f\n\x0b\n\x04\x04\
    \r\x02\x01\x12\x03q\x02\x14\n\x0c\n\x05\x04\r\x02\x01\x05\x12\x03q\x02\
    \x08\n\x0c\n\x05\x04\r\x02\x01\x01\x12\x03q\t\x0f\n\x0c\n\x05\x04\r\x02\
    \x01\x03\x12\x03q\x12\x13\nD\n\x04\x04\r\x02\x02\x12\x03s\x02+\x1a7\x20C\
    harge\x20point\x20connector\x20data\x20using\x20connector\x20Id\x20as\
    \x20key\n\n\x0c\n\x05\x04\r\x02\x02\x06\x12\x03s\x02\x1b\n\x0c\n\x05\x04\
    \r\x02\x02\x01\x12\x03s\x1c&\n\x0c\n\x05\x04\r\x02\x02\x03\x12\x03s)*\nI\
    \n\x04\x04\r\x02\x03\x12\x03u\x02/\x1a<\x20Charge\x20point\x20transactio\
    ns\x20data\x20using\x20transaction\x20Id\x20as\x20key\n\n\x0c\n\x05\x04\
    \r\x02\x03\x06\x12\x03u\x02\x1d\n\x0c\n\x05\x04\r\x02\x03\x01\x12\x03u\
    \x1e*\n\x0c\n\x05\x04\r\x02\x03\x03\x12\x03u-.\n3\n\x04\x04\r\x02\x04\
    \x12\x03w\x02.\x1a&\x20current\x20auth\x20data\x20using\x20IdTag\x20as\
    \x20key\n\n\x0c\n\x05\x04\r\x02\x04\x06\x12\x03w\x02\x1f\n\x0c\n\x05\x04\
    \r\x02\x04\x01\x12\x03w\x20)\n\x0c\n\x05\x04\r\x02\x04\x03\x12\x03w,-\ny\
    \n\x04\x04\r\x02\x05\x12\x03z\x02&\x1al\x20used\x20to\x20inncrement\x20l\
    ocal\x20auth\x20list\x20version\n\x20ocpp\x20requires\x20SendLocalAuthLi\
    st\x20request\x20to\x20contain\x20new\x20version\n\n\x0c\n\x05\x04\r\x02\
    \x05\x05\x12\x03z\x02\x07\n\x0c\n\x05\x04\r\x02\x05\x01\x12\x03z\x08!\n\
    \x0c\n\x05\x04\r\x02\x05\x03\x12\x03z$%\nP\n\x04\x04\r\x02\x06\x12\x03|\
    \x02#\x1aC\x20used\x20to\x20inncrement\x20transacton\x20Ids\x20by\x20kee\
    p\x20the\x20last\x20transaction\x20Id\n\n\x0c\n\x05\x04\r\x02\x06\x05\
    \x12\x03|\x02\x07\n\x0c\n\x05\x04\r\x02\x06\x01\x12\x03|\x08\x1e\n\x0c\n\
    \x05\x04\r\x02\x06\x03\x12\x03|!\"\nX\n\x02\x04\x0e\x12\x06\x80\x01\0\
    \x86\x01\x01\x1aJ\x20ConnectorInfo\x20contains\x20status\x20and\x20ongoi\
    ng\x20transaction\x20ID\x20for\x20a\x20connector\n\n\x0b\n\x03\x04\x0e\
    \x01\x12\x04\x80\x01\x08\x15\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\x81\x01\
    \x02\x0f\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\x81\x01\x02\x07\n\r\n\x05\
    \x04\x0e\x02\0\x01\x12\x04\x81\x01\x08\n\n\r\n\x05\x04\x0e\x02\0\x03\x12\
    \x04\x81\x01\r\x0e\nJ\n\x04\x04\x0e\x02\x01\x12\x04\x83\x01\x02\x14\x1a<\
    \x20status\x20of\x20the\x20connector\x20e.g\x20AVAILABLE,\x20PREPARING,\
    \x20CHARGING\n\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\x83\x01\x02\x08\n\r\
    \n\x05\x04\x0e\x02\x01\x01\x12\x04\x83\x01\t\x0f\n\r\n\x05\x04\x0e\x02\
    \x01\x03\x12\x04\x83\x01\x12\x13\n:\n\x04\x04\x0e\x02\x02\x12\x04\x85\
    \x01\x02\x20\x1a,\x20holds\x20the\x20current\x20Id\x20of\x20ongoing\x20t\
    ransacton\n\n\r\n\x05\x04\x0e\x02\x02\x05\x12\x04\x85\x01\x02\x07\n\r\n\
    \x05\x04\x0e\x02\x02\x01\x12\x04\x85\x01\x08\x1b\n\r\n\x05\x04\x0e\x02\
    \x02\x03\x12\x04\x85\x01\x1e\x1f\nA\n\x02\x04\x0f\x12\x06\x89\x01\0\x92\
    \x01\x01\x1a3\x20TransactionInfo\x20contains\x20info\x20about\x20a\x20tr\
    ansaction\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\x89\x01\x08\x17\n\x0c\n\x04\
    \x04\x0f\x02\0\x12\x04\x8a\x01\x02\x0f\n\r\n\x05\x04\x0f\x02\0\x05\x12\
    \x04\x8a\x01\x02\x07\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x8a\x01\x08\n\n\
    \r\n\x05\x04\x0f\x02\0\x03\x12\x04\x8a\x01\r\x0e\n\x0c\n\x04\x04\x0f\x02\
    \x01\x12\x04\x8b\x01\x02\x14\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\x8b\
    \x01\x02\x08\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\x8b\x01\t\x0f\n\r\n\
    \x05\x04\x0f\x02\x01\x03\x12\x04\x8b\x01\x12\x13\n\x0c\n\x04\x04\x0f\x02\
    \x02\x12\x04\x8c\x01\x02\x19\n\r\n\x05\x04\x0f\x02\x02\x05\x12\x04\x8c\
    \x01\x02\x07\n\r\n\x05\x04\x0f\x02\x02\x01\x12\x04\x8c\x01\x08\x14\n\r\n\
    \x05\x04\x0f\x02\x02\x03\x12\x04\x8c\x01\x17\x18\n\x0c\n\x04\x04\x0f\x02\
    \x03\x12\x04\x8d\x01\x02\x18\n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\x8d\
    \x01\x02\x08\n\r\n\x05\x04\x0f\x02\x03\x01\x12\x04\x8d\x01\t\x13\n\r\n\
    \x05\x04\x0f\x02\x03\x03\x12\x04\x8d\x01\x16\x17\n\x0c\n\x04\x04\x0f\x02\
    \x04\x12\x04\x8e\x01\x02\x16\n\r\n\x05\x04\x0f\x02\x04\x05\x12\x04\x8e\
    \x01\x02\x08\n\r\n\x05\x04\x0f\x02\x04\x01\x12\x04\x8e\x01\t\x11\n\r\n\
    \x05\x04\x0f\x02\x04\x03\x12\x04\x8e\x01\x14\x15\n\x0c\n\x04\x04\x0f\x02\
    \x05\x12\x04\x8f\x01\x02\x18\n\r\n\x05\x04\x0f\x02\x05\x05\x12\x04\x8f\
    \x01\x02\x07\n\r\n\x05\x04\x0f\x02\x05\x01\x12\x04\x8f\x01\x08\x13\n\r\n\
    \x05\x04\x0f\x02\x05\x03\x12\x04\x8f\x01\x16\x17\n\x0c\n\x04\x04\x0f\x02\
    \x06\x12\x04\x90\x01\x02\x16\n\r\n\x05\x04\x0f\x02\x06\x05\x12\x04\x90\
    \x01\x02\x07\n\r\n\x05\x04\x0f\x02\x06\x01\x12\x04\x90\x01\x08\x11\n\r\n\
    \x05\x04\x0f\x02\x06\x03\x12\x04\x90\x01\x14\x15\n\x0c\n\x04\x04\x0f\x02\
    \x07\x12\x04\x91\x01\x02\"\n\r\n\x05\x04\x0f\x02\x07\x06\x12\x04\x91\x01\
    \x02\x14\n\r\n\x05\x04\x0f\x02\x07\x01\x12\x04\x91\x01\x15\x1d\n\r\n\x05\
    \x04\x0f\x02\x07\x03\x12\x04\x91\x01\x20!\n\x97\x01\n\x02\x04\x10\x12\
    \x06\x96\x01\0\x9c\x01\x01\x1a\x88\x01\x20ConsumerAuthData\x20contains\
    \x20the\x20consumer\x20public\x20key\x20assigned\x20to\x20the\x20local\n\
    \x20authorized\x20data.\x20This\x20keeps\x20track\x20of\x20consumer\x20a\
    uth\x20ownership.\n\n\x0b\n\x03\x04\x10\x01\x12\x04\x96\x01\x08\x18\n2\n\
    \x04\x04\x10\x02\0\x12\x04\x98\x01\x02\x18\x1a$\x20consumer\x20of\x20the\
    \x20service\x20public\x20key\n\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\x98\
    \x01\x02\x08\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x98\x01\t\x13\n\r\n\x05\
    \x04\x10\x02\0\x03\x12\x04\x98\x01\x16\x17\n\x0c\n\x04\x04\x10\x02\x01\
    \x12\x04\x99\x01\x02\x1b\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\x99\x01\
    \x02\x07\n\r\n\x05\x04\x10\x02\x01\x01\x12\x04\x99\x01\x08\x16\n\r\n\x05\
    \x04\x10\x02\x01\x03\x12\x04\x99\x01\x19\x1a\nA\n\x04\x04\x10\x02\x02\
    \x12\x04\x9b\x01\x02'\x1a3\x20local\x20charge\x20point\x20auth\x20data\
    \x20assigned\x20to\x20consumer\n\n\r\n\x05\x04\x10\x02\x02\x06\x12\x04\
    \x9b\x01\x02\x18\n\r\n\x05\x04\x10\x02\x02\x01\x12\x04\x9b\x01\x19\"\n\r\
    \n\x05\x04\x10\x02\x02\x03\x12\x04\x9b\x01%&\n\x0c\n\x02\x04\x11\x12\x06\
    \x9e\x01\0\xa1\x01\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\x9e\x01\x08\x1e\n\
    \x0c\n\x04\x04\x11\x02\0\x12\x04\x9f\x01\x02\x14\n\r\n\x05\x04\x11\x02\0\
    \x05\x12\x04\x9f\x01\x02\x08\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\x9f\x01\
    \t\x0f\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\x9f\x01\x12\x13\n\x0c\n\x04\
    \x04\x11\x02\x01\x12\x04\xa0\x01\x02\x1c\n\r\n\x05\x04\x11\x02\x01\x06\
    \x12\x04\xa0\x01\x02\x0b\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\xa0\x01\
    \x0c\x17\n\r\n\x05\x04\x11\x02\x01\x03\x12\x04\xa0\x01\x1a\x1b\n\x0c\n\
    \x02\x04\x12\x12\x06\xa3\x01\0\xa7\x01\x01\n\x0b\n\x03\x04\x12\x01\x12\
    \x04\xa3\x01\x08\x11\n\x0c\n\x04\x04\x12\x02\0\x12\x04\xa4\x01\x02\x19\n\
    \r\n\x05\x04\x12\x02\0\x05\x12\x04\xa4\x01\x02\x08\n\r\n\x05\x04\x12\x02\
    \0\x01\x12\x04\xa4\x01\t\x14\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\xa4\x01\
    \x17\x18\n\x0c\n\x04\x04\x12\x02\x01\x12\x04\xa5\x01\x02\x1b\n\r\n\x05\
    \x04\x12\x02\x01\x05\x12\x04\xa5\x01\x02\x08\n\r\n\x05\x04\x12\x02\x01\
    \x01\x12\x04\xa5\x01\t\x16\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\xa5\x01\
    \x19\x1a\n\x0c\n\x04\x04\x12\x02\x02\x12\x04\xa6\x01\x02\x14\n\r\n\x05\
    \x04\x12\x02\x02\x05\x12\x04\xa6\x01\x02\x08\n\r\n\x05\x04\x12\x02\x02\
    \x01\x12\x04\xa6\x01\t\x0f\n\r\n\x05\x04\x12\x02\x02\x03\x12\x04\xa6\x01\
    \x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::with_capacity(0);
        let mut messages = ::std::vec::Vec::with_capacity(19);
        messages.push(Event::generated_message_descriptor_data());
        messages.push(BootNotificationRequestData::generated_message_descriptor_data());
        messages.push(LogData::generated_message_descriptor_data());
        messages.push(AuthorizeRequestData::generated_message_descriptor_data());
        messages.push(AuthorizeRequestAckData::generated_message_descriptor_data());
        messages.push(CheckAvailabilityRequestData::generated_message_descriptor_data());
        messages.push(CheckAvailabilityRequestAckData::generated_message_descriptor_data());
        messages.push(StartChargeRequestData::generated_message_descriptor_data());
        messages.push(StartChargeRequestAckData::generated_message_descriptor_data());
        messages.push(Response::generated_message_descriptor_data());
        messages.push(ChargingStatusData::generated_message_descriptor_data());
        messages.push(StopChargeRequestData::generated_message_descriptor_data());
        messages.push(StopChargeRequestAckData::generated_message_descriptor_data());
        messages.push(ChargePointState::generated_message_descriptor_data());
        messages.push(ConnectorInfo::generated_message_descriptor_data());
        messages.push(TransactionInfo::generated_message_descriptor_data());
        messages.push(ConsumerAuthData::generated_message_descriptor_data());
        messages.push(LocalAuthorizationData::generated_message_descriptor_data());
        messages.push(IdTagInfo::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::with_capacity(1);
        enums.push(EventType::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
