// This file is generated by rust-protobuf 3.0.0-alpha.10. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `p2p_message_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_10;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ChargingStatusData)
pub struct ChargingStatusData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.progress)
    pub progress: f32,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.charging_period)
    pub charging_period: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.energy_consumption)
    pub energy_consumption: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.token_spent)
    pub token_spent: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ChargingStatusData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChargingStatusData {
    fn default() -> &'a ChargingStatusData {
        <ChargingStatusData as ::protobuf::Message>::default_instance()
    }
}

impl ChargingStatusData {
    pub fn new() -> ChargingStatusData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "progress",
            |m: &ChargingStatusData| { &m.progress },
            |m: &mut ChargingStatusData| { &mut m.progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charging_period",
            |m: &ChargingStatusData| { &m.charging_period },
            |m: &mut ChargingStatusData| { &mut m.charging_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "energy_consumption",
            |m: &ChargingStatusData| { &m.energy_consumption },
            |m: &mut ChargingStatusData| { &mut m.energy_consumption },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_spent",
            |m: &ChargingStatusData| { &m.token_spent },
            |m: &mut ChargingStatusData| { &mut m.token_spent },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ChargingStatusData>(
            "ChargingStatusData",
            fields,
        )
    }
}

impl ::protobuf::Message for ChargingStatusData {
    const NAME: &'static str = "ChargingStatusData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.progress = is.read_float()?;
                },
                18 => {
                    self.charging_period = is.read_string()?;
                },
                26 => {
                    self.energy_consumption = is.read_string()?;
                },
                34 => {
                    self.token_spent = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.progress != 0. {
            my_size += 5;
        }
        if !self.charging_period.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.charging_period);
        }
        if !self.energy_consumption.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.energy_consumption);
        }
        if !self.token_spent.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token_spent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.progress != 0. {
            os.write_float(1, self.progress)?;
        }
        if !self.charging_period.is_empty() {
            os.write_string(2, &self.charging_period)?;
        }
        if !self.energy_consumption.is_empty() {
            os.write_string(3, &self.energy_consumption)?;
        }
        if !self.token_spent.is_empty() {
            os.write_string(4, &self.token_spent)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ChargingStatusData {
        ChargingStatusData::new()
    }

    fn clear(&mut self) {
        self.progress = 0.;
        self.charging_period.clear();
        self.energy_consumption.clear();
        self.token_spent.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChargingStatusData {
        static instance: ChargingStatusData = ChargingStatusData {
            progress: 0.,
            charging_period: ::std::string::String::new(),
            energy_consumption: ::std::string::String::new(),
            token_spent: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChargingStatusData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChargingStatusData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChargingStatusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargingStatusData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceAckData)
pub struct ServiceAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceAckData {
    fn default() -> &'a ServiceAckData {
        <ServiceAckData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceAckData {
    pub fn new() -> ServiceAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ServiceAckData| { &m.resp },
            |m: &mut ServiceAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ServiceAckData>(
            "ServiceAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceAckData {
    const NAME: &'static str = "ServiceAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ServiceAckData {
        ServiceAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceAckData {
        static instance: ServiceAckData = ServiceAckData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceRequestedAckData)
pub struct ServiceRequestedAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceRequestedAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceRequestedAckData {
    fn default() -> &'a ServiceRequestedAckData {
        <ServiceRequestedAckData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceRequestedAckData {
    pub fn new() -> ServiceRequestedAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ServiceRequestedAckData| { &m.resp },
            |m: &mut ServiceRequestedAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ServiceRequestedAckData>(
            "ServiceRequestedAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceRequestedAckData {
    const NAME: &'static str = "ServiceRequestedAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ServiceRequestedAckData {
        ServiceRequestedAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceRequestedAckData {
        static instance: ServiceRequestedAckData = ServiceRequestedAckData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceRequestedAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceRequestedAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceRequestedAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceRequestedAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceRequestedData)
pub struct ServiceRequestedData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.consumer)
    pub consumer: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.provider)
    pub provider: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.token_deposited)
    pub token_deposited: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.connector_id)
    pub connector_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceRequestedData {
    fn default() -> &'a ServiceRequestedData {
        <ServiceRequestedData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceRequestedData {
    pub fn new() -> ServiceRequestedData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer",
            |m: &ServiceRequestedData| { &m.consumer },
            |m: &mut ServiceRequestedData| { &mut m.consumer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provider",
            |m: &ServiceRequestedData| { &m.provider },
            |m: &mut ServiceRequestedData| { &mut m.provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_deposited",
            |m: &ServiceRequestedData| { &m.token_deposited },
            |m: &mut ServiceRequestedData| { &mut m.token_deposited },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connector_id",
            |m: &ServiceRequestedData| { &m.connector_id },
            |m: &mut ServiceRequestedData| { &mut m.connector_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ServiceRequestedData>(
            "ServiceRequestedData",
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceRequestedData {
    const NAME: &'static str = "ServiceRequestedData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer = is.read_string()?;
                },
                18 => {
                    self.provider = is.read_string()?;
                },
                26 => {
                    self.token_deposited = is.read_string()?;
                },
                32 => {
                    self.connector_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if !self.token_deposited.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.token_deposited);
        }
        if self.connector_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.connector_id, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if !self.token_deposited.is_empty() {
            os.write_string(3, &self.token_deposited)?;
        }
        if self.connector_id != 0 {
            os.write_int32(4, self.connector_id)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ServiceRequestedData {
        ServiceRequestedData::new()
    }

    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.token_deposited.clear();
        self.connector_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceRequestedData {
        static instance: ServiceRequestedData = ServiceRequestedData {
            consumer: ::std::string::String::new(),
            provider: ::std::string::String::new(),
            token_deposited: ::std::string::String::new(),
            connector_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceRequestedData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceRequestedData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceRequestedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceRequestedData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceDeliveredData)
pub struct ServiceDeliveredData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.consumer)
    pub consumer: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.provider)
    pub provider: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.refund_info)
    pub refund_info: ::protobuf::MessageField<TransactionValue>,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.spent_info)
    pub spent_info: ::protobuf::MessageField<TransactionValue>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceDeliveredData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceDeliveredData {
    fn default() -> &'a ServiceDeliveredData {
        <ServiceDeliveredData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceDeliveredData {
    pub fn new() -> ServiceDeliveredData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer",
            |m: &ServiceDeliveredData| { &m.consumer },
            |m: &mut ServiceDeliveredData| { &mut m.consumer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provider",
            |m: &ServiceDeliveredData| { &m.provider },
            |m: &mut ServiceDeliveredData| { &mut m.provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionValue>(
            "refund_info",
            |m: &ServiceDeliveredData| { &m.refund_info },
            |m: &mut ServiceDeliveredData| { &mut m.refund_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionValue>(
            "spent_info",
            |m: &ServiceDeliveredData| { &m.spent_info },
            |m: &mut ServiceDeliveredData| { &mut m.spent_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ServiceDeliveredData>(
            "ServiceDeliveredData",
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceDeliveredData {
    const NAME: &'static str = "ServiceDeliveredData";

    fn is_initialized(&self) -> bool {
        for v in &self.refund_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spent_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.consumer = is.read_string()?;
                },
                18 => {
                    self.provider = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.refund_info)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spent_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if let Some(v) = self.refund_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spent_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if let Some(v) = self.refund_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.spent_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ServiceDeliveredData {
        ServiceDeliveredData::new()
    }

    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.refund_info.clear();
        self.spent_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceDeliveredData {
        static instance: ServiceDeliveredData = ServiceDeliveredData {
            consumer: ::std::string::String::new(),
            provider: ::std::string::String::new(),
            refund_info: ::protobuf::MessageField::none(),
            spent_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceDeliveredData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceDeliveredData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceDeliveredData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceDeliveredData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.StopChargeResponseData)
pub struct StopChargeResponseData {
    // message fields
    // @@protoc_insertion_point(field:p2p.StopChargeResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.StopChargeResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopChargeResponseData {
    fn default() -> &'a StopChargeResponseData {
        <StopChargeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeResponseData {
    pub fn new() -> StopChargeResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StopChargeResponseData| { &m.resp },
            |m: &mut StopChargeResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopChargeResponseData>(
            "StopChargeResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeResponseData {
    const NAME: &'static str = "StopChargeResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopChargeResponseData {
        StopChargeResponseData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopChargeResponseData {
        static instance: StopChargeResponseData = StopChargeResponseData {
            resp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopChargeResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopChargeResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.IdentityChallengeData)
pub struct IdentityChallengeData {
    // message fields
    // @@protoc_insertion_point(field:p2p.IdentityChallengeData.plain_data)
    pub plain_data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.IdentityChallengeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdentityChallengeData {
    fn default() -> &'a IdentityChallengeData {
        <IdentityChallengeData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityChallengeData {
    pub fn new() -> IdentityChallengeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plain_data",
            |m: &IdentityChallengeData| { &m.plain_data },
            |m: &mut IdentityChallengeData| { &mut m.plain_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<IdentityChallengeData>(
            "IdentityChallengeData",
            fields,
        )
    }
}

impl ::protobuf::Message for IdentityChallengeData {
    const NAME: &'static str = "IdentityChallengeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plain_data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plain_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plain_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plain_data.is_empty() {
            os.write_string(1, &self.plain_data)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> IdentityChallengeData {
        IdentityChallengeData::new()
    }

    fn clear(&mut self) {
        self.plain_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdentityChallengeData {
        static instance: IdentityChallengeData = IdentityChallengeData {
            plain_data: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentityChallengeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdentityChallengeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdentityChallengeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityChallengeData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.IdentityResponseData)
pub struct IdentityResponseData {
    // message fields
    // @@protoc_insertion_point(field:p2p.IdentityResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.IdentityResponseData.signature)
    pub signature: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.IdentityResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IdentityResponseData {
    fn default() -> &'a IdentityResponseData {
        <IdentityResponseData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityResponseData {
    pub fn new() -> IdentityResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &IdentityResponseData| { &m.resp },
            |m: &mut IdentityResponseData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &IdentityResponseData| { &m.signature },
            |m: &mut IdentityResponseData| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<IdentityResponseData>(
            "IdentityResponseData",
            fields,
        )
    }
}

impl ::protobuf::Message for IdentityResponseData {
    const NAME: &'static str = "IdentityResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                26 => {
                    self.signature = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> IdentityResponseData {
        IdentityResponseData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IdentityResponseData {
        static instance: IdentityResponseData = IdentityResponseData {
            resp: ::protobuf::MessageField::none(),
            signature: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentityResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IdentityResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IdentityResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:p2p.Response.error)
    pub error: bool,
    // @@protoc_insertion_point(field:p2p.Response.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Response| { &m.message },
            |m: &mut Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Response>(
            "Response",
            fields,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            error: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.TransactionValue)
pub struct TransactionValue {
    // message fields
    // @@protoc_insertion_point(field:p2p.TransactionValue.token_num)
    pub token_num: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.TransactionValue.tx_hash)
    pub tx_hash: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.TransactionValue.time_point)
    pub time_point: ::protobuf::MessageField<transaction_value::TimePoint>,
    // @@protoc_insertion_point(field:p2p.TransactionValue.call_hash)
    pub call_hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.TransactionValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransactionValue {
    fn default() -> &'a TransactionValue {
        <TransactionValue as ::protobuf::Message>::default_instance()
    }
}

impl TransactionValue {
    pub fn new() -> TransactionValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_num",
            |m: &TransactionValue| { &m.token_num },
            |m: &mut TransactionValue| { &mut m.token_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_hash",
            |m: &TransactionValue| { &m.tx_hash },
            |m: &mut TransactionValue| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, transaction_value::TimePoint>(
            "time_point",
            |m: &TransactionValue| { &m.time_point },
            |m: &mut TransactionValue| { &mut m.time_point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "call_hash",
            |m: &TransactionValue| { &m.call_hash },
            |m: &mut TransactionValue| { &mut m.call_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<TransactionValue>(
            "TransactionValue",
            fields,
        )
    }
}

impl ::protobuf::Message for TransactionValue {
    const NAME: &'static str = "TransactionValue";

    fn is_initialized(&self) -> bool {
        for v in &self.time_point {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token_num = is.read_string()?;
                },
                18 => {
                    self.tx_hash = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time_point)?;
                },
                34 => {
                    self.call_hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token_num.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token_num);
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tx_hash);
        }
        if let Some(v) = self.time_point.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.call_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.call_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token_num.is_empty() {
            os.write_string(1, &self.token_num)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_string(2, &self.tx_hash)?;
        }
        if let Some(v) = self.time_point.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.call_hash.is_empty() {
            os.write_string(4, &self.call_hash)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> TransactionValue {
        TransactionValue::new()
    }

    fn clear(&mut self) {
        self.token_num.clear();
        self.tx_hash.clear();
        self.time_point.clear();
        self.call_hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransactionValue {
        static instance: TransactionValue = TransactionValue {
            token_num: ::std::string::String::new(),
            tx_hash: ::std::string::String::new(),
            time_point: ::protobuf::MessageField::none(),
            call_hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransactionValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransactionValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransactionValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionValue {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TransactionValue`
pub mod transaction_value {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:p2p.TransactionValue.TimePoint)
    pub struct TimePoint {
        // message fields
        // @@protoc_insertion_point(field:p2p.TransactionValue.TimePoint.height)
        pub height: i64,
        // @@protoc_insertion_point(field:p2p.TransactionValue.TimePoint.index)
        pub index: i64,
        // special fields
        // @@protoc_insertion_point(special_field:p2p.TransactionValue.TimePoint.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TimePoint {
        fn default() -> &'a TimePoint {
            <TimePoint as ::protobuf::Message>::default_instance()
        }
    }

    impl TimePoint {
        pub fn new() -> TimePoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "height",
                |m: &TimePoint| { &m.height },
                |m: &mut TimePoint| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "index",
                |m: &TimePoint| { &m.index },
                |m: &mut TimePoint| { &mut m.index },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new::<TimePoint>(
                "TransactionValue.TimePoint",
                fields,
            )
        }
    }

    impl ::protobuf::Message for TimePoint {
        const NAME: &'static str = "TimePoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.height = is.read_int64()?;
                    },
                    16 => {
                        self.index = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.height != 0 {
                my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::rt::WireType::Varint);
            }
            if self.index != 0 {
                my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::rt::WireType::Varint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.height != 0 {
                os.write_int64(1, self.height)?;
            }
            if self.index != 0 {
                os.write_int64(2, self.index)?;
            }
            os.write_unknown_fields(self.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn cached_size(&self) -> u32 {
            self.special_fields.cached_size().get()
        }

        fn unknown_fields(&self) -> &::protobuf::UnknownFields {
            self.special_fields.unknown_fields()
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            self.special_fields.mut_unknown_fields()
        }

        fn new() -> TimePoint {
            TimePoint::new()
        }

        fn clear(&mut self) {
            self.height = 0;
            self.index = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TimePoint {
            static instance: TimePoint = TimePoint {
                height: 0,
                index: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TimePoint {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("TransactionValue.TimePoint").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TimePoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TimePoint {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ChainEventData)
pub struct ChainEventData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ChainEventData.event_id)
    pub event_id: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChainEventData.attributes)
    pub attributes: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ChainEventData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChainEventData {
    fn default() -> &'a ChainEventData {
        <ChainEventData as ::protobuf::Message>::default_instance()
    }
}

impl ChainEventData {
    pub fn new() -> ChainEventData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_id",
            |m: &ChainEventData| { &m.event_id },
            |m: &mut ChainEventData| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attributes",
            |m: &ChainEventData| { &m.attributes },
            |m: &mut ChainEventData| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ChainEventData>(
            "ChainEventData",
            fields,
        )
    }
}

impl ::protobuf::Message for ChainEventData {
    const NAME: &'static str = "ChainEventData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.event_id = is.read_string()?;
                },
                18 => {
                    self.attributes = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.event_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.event_id);
        }
        if !self.attributes.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.attributes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.event_id.is_empty() {
            os.write_string(1, &self.event_id)?;
        }
        if !self.attributes.is_empty() {
            os.write_string(2, &self.attributes)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ChainEventData {
        ChainEventData::new()
    }

    fn clear(&mut self) {
        self.event_id.clear();
        self.attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChainEventData {
        static instance: ChainEventData = ChainEventData {
            event_id: ::std::string::String::new(),
            attributes: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChainEventData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChainEventData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChainEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainEventData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.EmitShowInfoData)
pub struct EmitShowInfoData {
    // message fields
    // @@protoc_insertion_point(field:p2p.EmitShowInfoData.type)
    pub field_type: ::protobuf::EnumOrUnknown<emit_show_info_data::ShowInfoType>,
    // @@protoc_insertion_point(field:p2p.EmitShowInfoData.data)
    pub data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.EmitShowInfoData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmitShowInfoData {
    fn default() -> &'a EmitShowInfoData {
        <EmitShowInfoData as ::protobuf::Message>::default_instance()
    }
}

impl EmitShowInfoData {
    pub fn new() -> EmitShowInfoData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &EmitShowInfoData| { &m.field_type },
            |m: &mut EmitShowInfoData| { &mut m.field_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &EmitShowInfoData| { &m.data },
            |m: &mut EmitShowInfoData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<EmitShowInfoData>(
            "EmitShowInfoData",
            fields,
        )
    }
}

impl ::protobuf::Message for EmitShowInfoData {
    const NAME: &'static str = "EmitShowInfoData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field_type != ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field_type != ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.field_type))?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> EmitShowInfoData {
        EmitShowInfoData::new()
    }

    fn clear(&mut self) {
        self.field_type = ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmitShowInfoData {
        static instance: EmitShowInfoData = EmitShowInfoData {
            field_type: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmitShowInfoData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmitShowInfoData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmitShowInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmitShowInfoData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EmitShowInfoData`
pub mod emit_show_info_data {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:p2p.EmitShowInfoData.ShowInfoType)
    pub enum ShowInfoType {
        // @@protoc_insertion_point(enum_value:p2p.EmitShowInfoData.ShowInfoType.LOG_INFO)
        LOG_INFO = 0,
        // @@protoc_insertion_point(enum_value:p2p.EmitShowInfoData.ShowInfoType.EVENT_INFO)
        EVENT_INFO = 1,
    }

    impl ::protobuf::Enum for ShowInfoType {
        const NAME: &'static str = "ShowInfoType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ShowInfoType> {
            match value {
                0 => ::std::option::Option::Some(ShowInfoType::LOG_INFO),
                1 => ::std::option::Option::Some(ShowInfoType::EVENT_INFO),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ShowInfoType] = &[
            ShowInfoType::LOG_INFO,
            ShowInfoType::EVENT_INFO,
        ];
    }

    impl ::protobuf::EnumFull for ShowInfoType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("EmitShowInfoData.ShowInfoType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ShowInfoType {
        fn default() -> Self {
            ShowInfoType::LOG_INFO
        }
    }

    impl ShowInfoType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ShowInfoType>("EmitShowInfoData.ShowInfoType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.GetBalanceAckData)
pub struct GetBalanceAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.GetBalanceAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.GetBalanceAckData.balance)
    pub balance: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.GetBalanceAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBalanceAckData {
    fn default() -> &'a GetBalanceAckData {
        <GetBalanceAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceAckData {
    pub fn new() -> GetBalanceAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &GetBalanceAckData| { &m.resp },
            |m: &mut GetBalanceAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "balance",
            |m: &GetBalanceAckData| { &m.balance },
            |m: &mut GetBalanceAckData| { &mut m.balance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<GetBalanceAckData>(
            "GetBalanceAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for GetBalanceAckData {
    const NAME: &'static str = "GetBalanceAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.balance = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.balance);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.balance.is_empty() {
            os.write_string(2, &self.balance)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> GetBalanceAckData {
        GetBalanceAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.balance.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBalanceAckData {
        static instance: GetBalanceAckData = GetBalanceAckData {
            resp: ::protobuf::MessageField::none(),
            balance: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBalanceAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBalanceAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBalanceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.GetPKAckData)
pub struct GetPKAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.GetPKAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.GetPKAckData.pk)
    pub pk: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.GetPKAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPKAckData {
    fn default() -> &'a GetPKAckData {
        <GetPKAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetPKAckData {
    pub fn new() -> GetPKAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &GetPKAckData| { &m.resp },
            |m: &mut GetPKAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &GetPKAckData| { &m.pk },
            |m: &mut GetPKAckData| { &mut m.pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<GetPKAckData>(
            "GetPKAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for GetPKAckData {
    const NAME: &'static str = "GetPKAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.pk = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.pk.is_empty() {
            os.write_string(2, &self.pk)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> GetPKAckData {
        GetPKAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.pk.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPKAckData {
        static instance: GetPKAckData = GetPKAckData {
            resp: ::protobuf::MessageField::none(),
            pk: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPKAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPKAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPKAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPKAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.RePublishDIDAckData)
pub struct RePublishDIDAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.RePublishDIDAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.RePublishDIDAckData.pk)
    pub pk: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.RePublishDIDAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RePublishDIDAckData {
    fn default() -> &'a RePublishDIDAckData {
        <RePublishDIDAckData as ::protobuf::Message>::default_instance()
    }
}

impl RePublishDIDAckData {
    pub fn new() -> RePublishDIDAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &RePublishDIDAckData| { &m.resp },
            |m: &mut RePublishDIDAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &RePublishDIDAckData| { &m.pk },
            |m: &mut RePublishDIDAckData| { &mut m.pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<RePublishDIDAckData>(
            "RePublishDIDAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for RePublishDIDAckData {
    const NAME: &'static str = "RePublishDIDAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.pk = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.pk.is_empty() {
            os.write_string(2, &self.pk)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> RePublishDIDAckData {
        RePublishDIDAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.pk.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RePublishDIDAckData {
        static instance: RePublishDIDAckData = RePublishDIDAckData {
            resp: ::protobuf::MessageField::none(),
            pk: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RePublishDIDAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RePublishDIDAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RePublishDIDAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RePublishDIDAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ReconnectAckData)
pub struct ReconnectAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ReconnectAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.ReconnectAckData.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ReconnectAckData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReconnectAckData {
    fn default() -> &'a ReconnectAckData {
        <ReconnectAckData as ::protobuf::Message>::default_instance()
    }
}

impl ReconnectAckData {
    pub fn new() -> ReconnectAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ReconnectAckData| { &m.resp },
            |m: &mut ReconnectAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ReconnectAckData| { &m.message },
            |m: &mut ReconnectAckData| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<ReconnectAckData>(
            "ReconnectAckData",
            fields,
        )
    }
}

impl ::protobuf::Message for ReconnectAckData {
    const NAME: &'static str = "ReconnectAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> ReconnectAckData {
        ReconnectAckData::new()
    }

    fn clear(&mut self) {
        self.resp.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReconnectAckData {
        static instance: ReconnectAckData = ReconnectAckData {
            resp: ::protobuf::MessageField::none(),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReconnectAckData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReconnectAckData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReconnectAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReconnectAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.StopChargeData)
pub struct StopChargeData {
    // message fields
    // @@protoc_insertion_point(field:p2p.StopChargeData.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.StopChargeData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StopChargeData {
    fn default() -> &'a StopChargeData {
        <StopChargeData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeData {
    pub fn new() -> StopChargeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &StopChargeData| { &m.success },
            |m: &mut StopChargeData| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<StopChargeData>(
            "StopChargeData",
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeData {
    const NAME: &'static str = "StopChargeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> StopChargeData {
        StopChargeData::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StopChargeData {
        static instance: StopChargeData = StopChargeData {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StopChargeData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StopChargeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18p2p_message_format.proto\x12\x03p2p\"\xa9\x01\n\x12ChargingStatusD\
    ata\x12\x1a\n\x08progress\x18\x01\x20\x01(\x02R\x08progress\x12'\n\x0fch\
    arging_period\x18\x02\x20\x01(\tR\x0echargingPeriod\x12-\n\x12energy_con\
    sumption\x18\x03\x20\x01(\tR\x11energyConsumption\x12\x1f\n\x0btoken_spe\
    nt\x18\x04\x20\x01(\tR\ntokenSpent\"3\n\x0eServiceAckData\x12!\n\x04resp\
    \x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\"<\n\x17ServiceRequestedA\
    ckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\"\
    \x9a\x01\n\x14ServiceRequestedData\x12\x1a\n\x08consumer\x18\x01\x20\x01\
    (\tR\x08consumer\x12\x1a\n\x08provider\x18\x02\x20\x01(\tR\x08provider\
    \x12'\n\x0ftoken_deposited\x18\x03\x20\x01(\tR\x0etokenDeposited\x12!\n\
    \x0cconnector_id\x18\x04\x20\x01(\x05R\x0bconnectorId\"\xbc\x01\n\x14Ser\
    viceDeliveredData\x12\x1a\n\x08consumer\x18\x01\x20\x01(\tR\x08consumer\
    \x12\x1a\n\x08provider\x18\x02\x20\x01(\tR\x08provider\x126\n\x0brefund_\
    info\x18\x03\x20\x01(\x0b2\x15.p2p.TransactionValueR\nrefundInfo\x124\n\
    \nspent_info\x18\x04\x20\x01(\x0b2\x15.p2p.TransactionValueR\tspentInfo\
    \";\n\x16StopChargeResponseData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p\
    2p.ResponseR\x04resp\"6\n\x15IdentityChallengeData\x12\x1d\n\nplain_data\
    \x18\x01\x20\x01(\tR\tplainData\"W\n\x14IdentityResponseData\x12!\n\x04r\
    esp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\x1c\n\tsignature\
    \x18\x03\x20\x01(\tR\tsignature\":\n\x08Response\x12\x14\n\x05error\x18\
    \x01\x20\x01(\x08R\x05error\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07\
    message\"\xe0\x01\n\x10TransactionValue\x12\x1b\n\ttoken_num\x18\x01\x20\
    \x01(\tR\x08tokenNum\x12\x17\n\x07tx_hash\x18\x02\x20\x01(\tR\x06txHash\
    \x12>\n\ntime_point\x18\x03\x20\x01(\x0b2\x1f.p2p.TransactionValue.TimeP\
    ointR\ttimePoint\x12\x1b\n\tcall_hash\x18\x04\x20\x01(\tR\x08callHash\
    \x1a9\n\tTimePoint\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\
    \x12\x14\n\x05index\x18\x02\x20\x01(\x03R\x05index\"K\n\x0eChainEventDat\
    a\x12\x19\n\x08event_id\x18\x01\x20\x01(\tR\x07eventId\x12\x1e\n\nattrib\
    utes\x18\x02\x20\x01(\tR\nattributes\"\x8c\x01\n\x10EmitShowInfoData\x12\
    6\n\x04type\x18\x01\x20\x01(\x0e2\".p2p.EmitShowInfoData.ShowInfoTypeR\
    \x04type\x12\x12\n\x04data\x18\x02\x20\x01(\tR\x04data\",\n\x0cShowInfoT\
    ype\x12\x0c\n\x08LOG_INFO\x10\0\x12\x0e\n\nEVENT_INFO\x10\x01\"P\n\x11Ge\
    tBalanceAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04\
    resp\x12\x18\n\x07balance\x18\x02\x20\x01(\tR\x07balance\"A\n\x0cGetPKAc\
    kData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\
    \x0e\n\x02pk\x18\x02\x20\x01(\tR\x02pk\"H\n\x13RePublishDIDAckData\x12!\
    \n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\x0e\n\x02pk\
    \x18\x02\x20\x01(\tR\x02pk\"O\n\x10ReconnectAckData\x12!\n\x04resp\x18\
    \x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\x18\n\x07message\x18\x02\
    \x20\x01(\tR\x07message\"*\n\x0eStopChargeData\x12\x18\n\x07success\x18\
    \x01\x20\x01(\x08R\x07successBWZUgithub.com/peaqnetwork/peaq-network-ev-\
    charging-message-format/golang/message;messageJ\xcc\x15\n\x06\x12\x04\0\
    \0],\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0c\n\
    \x08\n\x01\x08\x12\x03\x03\0l\n\t\n\x02\x08\x0b\x12\x03\x03\0l\n\n\n\x02\
    \x04\0\x12\x04\x05\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x1a\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x06\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x06\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x08\x10\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x07\x02\x1d\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\x07\t\x18\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x07\x1b\x1c\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x02\x20\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x08\t\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\x1e\x1f\
    \n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x02\x19\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\t\x14\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x17\x18\n\t\n\x02\x04\x01\x12\x03\
    \x0c\0-\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x16\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x0c\x19+\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0c\x19!\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\"&\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\x0c)*\n\n\n\x02\x04\x02\x12\x04\r\0\x0f\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\r\x08\x1f\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0e\x02\x14\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x0e\x0b\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0e\x12\
    \x13\n\n\n\x02\x04\x03\x12\x04\x11\0\x16\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x11\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x12\x02\x16\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x12\t\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x12\x14\x15\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03\x13\x02\x16\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x13\
    \t\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x13\x14\x15\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03\x14\x02\x1d\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\
    \x03\x14\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x14\t\x18\n\x0c\
    \n\x05\x04\x03\x02\x02\x03\x12\x03\x14\x1b\x1c\n\x0b\n\x04\x04\x03\x02\
    \x03\x12\x03\x15\x02\x19\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x15\x02\
    \x07\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x15\x08\x14\n\x0c\n\x05\x04\
    \x03\x02\x03\x03\x12\x03\x15\x17\x18\n\n\n\x02\x04\x04\x12\x04\x18\0\x1d\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03\x18\x08\x1c\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x19\x02\x16\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x19\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x19\t\x11\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03\x19\x14\x15\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1a\x02\x16\
    \n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03\x1a\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\
    \x1a\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\x1b\x02#\n\x0c\n\x05\
    \x04\x04\x02\x02\x06\x12\x03\x1b\x02\x12\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03\x1b\x13\x1e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\x1b!\"\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03\x1c\x02\"\n\x0c\n\x05\x04\x04\x02\x03\
    \x06\x12\x03\x1c\x02\x12\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03\x1c\x13\
    \x1d\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03\x1c\x20!\n\t\n\x02\x04\x05\
    \x12\x03\x1f\05\n\n\n\x03\x04\x05\x01\x12\x03\x1f\x08\x1e\n\x0b\n\x04\
    \x04\x05\x02\0\x12\x03\x1f!3\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03\x1f!)\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x1f*.\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03\x1f12\n\t\n\x02\x04\x06\x12\x03!\08\n\n\n\x03\x04\x06\x01\
    \x12\x03!\x08\x1d\n\x0b\n\x04\x04\x06\x02\0\x12\x03!\x206\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x03!\x20&\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03!'\
    1\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03!45\n\n\n\x02\x04\x07\x12\x04#\0&\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03#\x08\x1c\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03$\x02\x14\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03$\x02\n\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03$\x0b\x0f\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03$\x12\x13\n\x0b\n\x04\x04\x07\x02\x01\x12\x03%\x02\x17\n\x0c\n\
    \x05\x04\x07\x02\x01\x05\x12\x03%\x02\x08\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x03%\t\x12\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03%\x15\x16\n\n\
    \n\x02\x04\x08\x12\x04(\0+\x01\n\n\n\x03\x04\x08\x01\x12\x03(\x08\x10\n\
    \x0b\n\x04\x04\x08\x02\0\x12\x03)\x02\x11\n\x0c\n\x05\x04\x08\x02\0\x05\
    \x12\x03)\x02\x06\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03)\x07\x0c\n\x0c\n\
    \x05\x04\x08\x02\0\x03\x12\x03)\x0f\x10\n\x0b\n\x04\x04\x08\x02\x01\x12\
    \x03*\x02\x15\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03*\x02\x08\n\x0c\n\
    \x05\x04\x08\x02\x01\x01\x12\x03*\t\x10\n\x0c\n\x05\x04\x08\x02\x01\x03\
    \x12\x03*\x13\x14\n\n\n\x02\x04\t\x12\x04-\08\x01\n\n\n\x03\x04\t\x01\
    \x12\x03-\x08\x18\n\x0b\n\x04\x04\t\x02\0\x12\x03.\x02\x17\n\x0c\n\x05\
    \x04\t\x02\0\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03.\t\
    \x12\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03.\x15\x16\n\x0b\n\x04\x04\t\x02\
    \x01\x12\x03/\x02\x15\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03/\x02\x08\n\
    \x0c\n\x05\x04\t\x02\x01\x01\x12\x03/\t\x10\n\x0c\n\x05\x04\t\x02\x01\
    \x03\x12\x03/\x13\x14\n\x0c\n\x04\x04\t\x03\0\x12\x041\x024\x03\n\x0c\n\
    \x05\x04\t\x03\0\x01\x12\x031\n\x13\n\r\n\x06\x04\t\x03\0\x02\0\x12\x032\
    \x04\x15\n\x0e\n\x07\x04\t\x03\0\x02\0\x05\x12\x032\x04\t\n\x0e\n\x07\
    \x04\t\x03\0\x02\0\x01\x12\x032\n\x10\n\x0e\n\x07\x04\t\x03\0\x02\0\x03\
    \x12\x032\x13\x14\n\r\n\x06\x04\t\x03\0\x02\x01\x12\x033\x04\x14\n\x0e\n\
    \x07\x04\t\x03\0\x02\x01\x05\x12\x033\x04\t\n\x0e\n\x07\x04\t\x03\0\x02\
    \x01\x01\x12\x033\n\x0f\n\x0e\n\x07\x04\t\x03\0\x02\x01\x03\x12\x033\x12\
    \x13\n\x0b\n\x04\x04\t\x02\x02\x12\x036\x02\x1b\n\x0c\n\x05\x04\t\x02\
    \x02\x06\x12\x036\x02\x0b\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x036\x0c\x16\
    \n\x0c\n\x05\x04\t\x02\x02\x03\x12\x036\x19\x1a\n\x0b\n\x04\x04\t\x02\
    \x03\x12\x037\x02\x17\n\x0c\n\x05\x04\t\x02\x03\x05\x12\x037\x02\x08\n\
    \x0c\n\x05\x04\t\x02\x03\x01\x12\x037\t\x12\n\x0c\n\x05\x04\t\x02\x03\
    \x03\x12\x037\x15\x16\n\n\n\x02\x04\n\x12\x04:\0=\x01\n\n\n\x03\x04\n\
    \x01\x12\x03:\x08\x16\n\x0b\n\x04\x04\n\x02\0\x12\x03;\x02\x16\n\x0c\n\
    \x05\x04\n\x02\0\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\
    \x03;\t\x11\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03;\x14\x15\n\x0b\n\x04\x04\
    \n\x02\x01\x12\x03<\x02\x18\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03<\x02\
    \x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03<\t\x13\n\x0c\n\x05\x04\n\x02\
    \x01\x03\x12\x03<\x16\x17\n\n\n\x02\x04\x0b\x12\x04?\0G\x01\n\n\n\x03\
    \x04\x0b\x01\x12\x03?\x08\x18\n\x0c\n\x04\x04\x0b\x04\0\x12\x04@\x02C\
    \x03\n\x0c\n\x05\x04\x0b\x04\0\x01\x12\x03@\x07\x13\n\r\n\x06\x04\x0b\
    \x04\0\x02\0\x12\x03A\x04\x11\n\x0e\n\x07\x04\x0b\x04\0\x02\0\x01\x12\
    \x03A\x04\x0c\n\x0e\n\x07\x04\x0b\x04\0\x02\0\x02\x12\x03A\x0f\x10\n\r\n\
    \x06\x04\x0b\x04\0\x02\x01\x12\x03B\x04\x13\n\x0e\n\x07\x04\x0b\x04\0\
    \x02\x01\x01\x12\x03B\x04\x0e\n\x0e\n\x07\x04\x0b\x04\0\x02\x01\x02\x12\
    \x03B\x11\x12\n\x0b\n\x04\x04\x0b\x02\0\x12\x03E\x02\x18\n\x0c\n\x05\x04\
    \x0b\x02\0\x06\x12\x03E\x02\x0e\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03E\
    \x0f\x13\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03E\x16\x17\n\x0b\n\x04\x04\
    \x0b\x02\x01\x12\x03F\x02\x12\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03F\
    \x02\x08\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03F\t\r\n\x0c\n\x05\x04\
    \x0b\x02\x01\x03\x12\x03F\x10\x11\n\n\n\x02\x04\x0c\x12\x04I\0L\x01\n\n\
    \n\x03\x04\x0c\x01\x12\x03I\x08\x19\n\x0b\n\x04\x04\x0c\x02\0\x12\x03J\
    \x02\x14\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03J\x02\n\n\x0c\n\x05\x04\
    \x0c\x02\0\x01\x12\x03J\x0b\x0f\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03J\
    \x12\x13\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03K\x02\x15\n\x0c\n\x05\x04\
    \x0c\x02\x01\x05\x12\x03K\x02\x08\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\
    \x03K\t\x10\n\x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03K\x13\x14\n\n\n\x02\
    \x04\r\x12\x04N\0Q\x01\n\n\n\x03\x04\r\x01\x12\x03N\x08\x14\n\x0b\n\x04\
    \x04\r\x02\0\x12\x03O\x02\x14\n\x0c\n\x05\x04\r\x02\0\x06\x12\x03O\x02\n\
    \n\x0c\n\x05\x04\r\x02\0\x01\x12\x03O\x0b\x0f\n\x0c\n\x05\x04\r\x02\0\
    \x03\x12\x03O\x12\x13\n\x0b\n\x04\x04\r\x02\x01\x12\x03P\x02\x10\n\x0c\n\
    \x05\x04\r\x02\x01\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\r\x02\x01\x01\
    \x12\x03P\t\x0b\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03P\x0e\x0f\n\n\n\x02\
    \x04\x0e\x12\x04S\0V\x01\n\n\n\x03\x04\x0e\x01\x12\x03S\x08\x1b\n\x0b\n\
    \x04\x04\x0e\x02\0\x12\x03T\x02\x14\n\x0c\n\x05\x04\x0e\x02\0\x06\x12\
    \x03T\x02\n\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\x03T\x0b\x0f\n\x0c\n\x05\
    \x04\x0e\x02\0\x03\x12\x03T\x12\x13\n\x0b\n\x04\x04\x0e\x02\x01\x12\x03U\
    \x02\x10\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03U\x02\x08\n\x0c\n\x05\
    \x04\x0e\x02\x01\x01\x12\x03U\t\x0b\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\
    \x03U\x0e\x0f\n\n\n\x02\x04\x0f\x12\x04X\0[\x01\n\n\n\x03\x04\x0f\x01\
    \x12\x03X\x08\x18\n\x0b\n\x04\x04\x0f\x02\0\x12\x03Y\x02\x14\n\x0c\n\x05\
    \x04\x0f\x02\0\x06\x12\x03Y\x02\n\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03Y\
    \x0b\x0f\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03Y\x12\x13\n\x0b\n\x04\x04\
    \x0f\x02\x01\x12\x03Z\x02\x15\n\x0c\n\x05\x04\x0f\x02\x01\x05\x12\x03Z\
    \x02\x08\n\x0c\n\x05\x04\x0f\x02\x01\x01\x12\x03Z\t\x10\n\x0c\n\x05\x04\
    \x0f\x02\x01\x03\x12\x03Z\x13\x14\n\t\n\x02\x04\x10\x12\x03]\0,\n\n\n\
    \x03\x04\x10\x01\x12\x03]\x08\x16\n\x0b\n\x04\x04\x10\x02\0\x12\x03]\x19\
    *\n\x0c\n\x05\x04\x10\x02\0\x05\x12\x03]\x19\x1d\n\x0c\n\x05\x04\x10\x02\
    \0\x01\x12\x03]\x1e%\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03]()b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::with_capacity(0);
        let mut messages = ::std::vec::Vec::with_capacity(18);
        messages.push(ChargingStatusData::generated_message_descriptor_data());
        messages.push(ServiceAckData::generated_message_descriptor_data());
        messages.push(ServiceRequestedAckData::generated_message_descriptor_data());
        messages.push(ServiceRequestedData::generated_message_descriptor_data());
        messages.push(ServiceDeliveredData::generated_message_descriptor_data());
        messages.push(StopChargeResponseData::generated_message_descriptor_data());
        messages.push(IdentityChallengeData::generated_message_descriptor_data());
        messages.push(IdentityResponseData::generated_message_descriptor_data());
        messages.push(Response::generated_message_descriptor_data());
        messages.push(TransactionValue::generated_message_descriptor_data());
        messages.push(ChainEventData::generated_message_descriptor_data());
        messages.push(EmitShowInfoData::generated_message_descriptor_data());
        messages.push(GetBalanceAckData::generated_message_descriptor_data());
        messages.push(GetPKAckData::generated_message_descriptor_data());
        messages.push(RePublishDIDAckData::generated_message_descriptor_data());
        messages.push(ReconnectAckData::generated_message_descriptor_data());
        messages.push(StopChargeData::generated_message_descriptor_data());
        messages.push(transaction_value::TimePoint::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::with_capacity(1);
        enums.push(emit_show_info_data::ShowInfoType::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
