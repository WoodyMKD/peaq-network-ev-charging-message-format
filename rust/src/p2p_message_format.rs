// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `p2p_message_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub event_id: EventType,
    // message oneof groups
    pub data: ::std::option::Option<Event_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Event_oneof_data {
    charging_status_data(ChargingStatusData),
    service_ack_data(ServiceAckData),
    service_requested_data(ServiceRequestedData),
    service_delivered_data(ServiceDeliveredData),
    stop_charge_data(StopChargeData),
    stop_charge_resp_data(StopChargeResponseData),
    identity_challenge_data(IdentityChallengeData),
    identity_response_data(IdentityResponseData),
    chain_event_data(ChainEventData),
    emit_show_info_data(EmitShowInfoData),
    get_balance_data(GetBalanceData),
    get_balance_ack_data(GetBalanceAckData),
    get_pk_data(GetPKData),
    get_pk_ack_data(GetPKAckData),
    republish_did_data(RePublishDIDData),
    republish_ack_data(RePublishDIDAckData),
    reconnect_data(ReconnectData),
    reconnect_ack_data(ReconnectAckData),
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .p2p.EventType event_id = 1;


    pub fn get_event_id(&self) -> EventType {
        self.event_id
    }
    pub fn clear_event_id(&mut self) {
        self.event_id = EventType::CHARGING_STATUS;
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: EventType) {
        self.event_id = v;
    }

    // .p2p.ChargingStatusData charging_status_data = 2;


    pub fn get_charging_status_data(&self) -> &ChargingStatusData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::charging_status_data(ref v)) => v,
            _ => <ChargingStatusData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_charging_status_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_charging_status_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::charging_status_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_charging_status_data(&mut self, v: ChargingStatusData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::charging_status_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_charging_status_data(&mut self) -> &mut ChargingStatusData {
        if let ::std::option::Option::Some(Event_oneof_data::charging_status_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::charging_status_data(ChargingStatusData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::charging_status_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_charging_status_data(&mut self) -> ChargingStatusData {
        if self.has_charging_status_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::charging_status_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ChargingStatusData::new()
        }
    }

    // .p2p.ServiceAckData service_ack_data = 3;


    pub fn get_service_ack_data(&self) -> &ServiceAckData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_ack_data(ref v)) => v,
            _ => <ServiceAckData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_service_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_ack_data(&mut self, v: ServiceAckData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::service_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_ack_data(&mut self) -> &mut ServiceAckData {
        if let ::std::option::Option::Some(Event_oneof_data::service_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::service_ack_data(ServiceAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_ack_data(&mut self) -> ServiceAckData {
        if self.has_service_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::service_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceAckData::new()
        }
    }

    // .p2p.ServiceRequestedData service_requested_data = 4;


    pub fn get_service_requested_data(&self) -> &ServiceRequestedData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_requested_data(ref v)) => v,
            _ => <ServiceRequestedData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_service_requested_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_requested_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_requested_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_requested_data(&mut self, v: ServiceRequestedData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::service_requested_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_requested_data(&mut self) -> &mut ServiceRequestedData {
        if let ::std::option::Option::Some(Event_oneof_data::service_requested_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::service_requested_data(ServiceRequestedData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_requested_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_requested_data(&mut self) -> ServiceRequestedData {
        if self.has_service_requested_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::service_requested_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceRequestedData::new()
        }
    }

    // .p2p.ServiceDeliveredData service_delivered_data = 5;


    pub fn get_service_delivered_data(&self) -> &ServiceDeliveredData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_delivered_data(ref v)) => v,
            _ => <ServiceDeliveredData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_service_delivered_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_delivered_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_delivered_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_delivered_data(&mut self, v: ServiceDeliveredData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::service_delivered_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_delivered_data(&mut self) -> &mut ServiceDeliveredData {
        if let ::std::option::Option::Some(Event_oneof_data::service_delivered_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::service_delivered_data(ServiceDeliveredData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::service_delivered_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_delivered_data(&mut self) -> ServiceDeliveredData {
        if self.has_service_delivered_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::service_delivered_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceDeliveredData::new()
        }
    }

    // .p2p.StopChargeData stop_charge_data = 6;


    pub fn get_stop_charge_data(&self) -> &StopChargeData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_data(ref v)) => v,
            _ => <StopChargeData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_stop_charge_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_data(&mut self, v: StopChargeData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_data(&mut self) -> &mut StopChargeData {
        if let ::std::option::Option::Some(Event_oneof_data::stop_charge_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_data(StopChargeData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_data(&mut self) -> StopChargeData {
        if self.has_stop_charge_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::stop_charge_data(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeData::new()
        }
    }

    // .p2p.StopChargeResponseData stop_charge_resp_data = 7;


    pub fn get_stop_charge_resp_data(&self) -> &StopChargeResponseData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(ref v)) => v,
            _ => <StopChargeResponseData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_stop_charge_resp_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_resp_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_resp_data(&mut self, v: StopChargeResponseData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_resp_data(&mut self) -> &mut StopChargeResponseData {
        if let ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(StopChargeResponseData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_resp_data(&mut self) -> StopChargeResponseData {
        if self.has_stop_charge_resp_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeResponseData::new()
        }
    }

    // .p2p.IdentityChallengeData identity_challenge_data = 8;


    pub fn get_identity_challenge_data(&self) -> &IdentityChallengeData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(ref v)) => v,
            _ => <IdentityChallengeData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_identity_challenge_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_identity_challenge_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_identity_challenge_data(&mut self, v: IdentityChallengeData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_identity_challenge_data(&mut self) -> &mut IdentityChallengeData {
        if let ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(IdentityChallengeData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_identity_challenge_data(&mut self) -> IdentityChallengeData {
        if self.has_identity_challenge_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(v)) => v,
                _ => panic!(),
            }
        } else {
            IdentityChallengeData::new()
        }
    }

    // .p2p.IdentityResponseData identity_response_data = 9;


    pub fn get_identity_response_data(&self) -> &IdentityResponseData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_response_data(ref v)) => v,
            _ => <IdentityResponseData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_identity_response_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_identity_response_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_response_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_identity_response_data(&mut self, v: IdentityResponseData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::identity_response_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_identity_response_data(&mut self) -> &mut IdentityResponseData {
        if let ::std::option::Option::Some(Event_oneof_data::identity_response_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::identity_response_data(IdentityResponseData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::identity_response_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_identity_response_data(&mut self) -> IdentityResponseData {
        if self.has_identity_response_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::identity_response_data(v)) => v,
                _ => panic!(),
            }
        } else {
            IdentityResponseData::new()
        }
    }

    // .p2p.ChainEventData chain_event_data = 10;


    pub fn get_chain_event_data(&self) -> &ChainEventData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::chain_event_data(ref v)) => v,
            _ => <ChainEventData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_chain_event_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_chain_event_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::chain_event_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chain_event_data(&mut self, v: ChainEventData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::chain_event_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chain_event_data(&mut self) -> &mut ChainEventData {
        if let ::std::option::Option::Some(Event_oneof_data::chain_event_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::chain_event_data(ChainEventData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::chain_event_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chain_event_data(&mut self) -> ChainEventData {
        if self.has_chain_event_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::chain_event_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ChainEventData::new()
        }
    }

    // .p2p.EmitShowInfoData emit_show_info_data = 11;


    pub fn get_emit_show_info_data(&self) -> &EmitShowInfoData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(ref v)) => v,
            _ => <EmitShowInfoData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_emit_show_info_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_emit_show_info_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_emit_show_info_data(&mut self, v: EmitShowInfoData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_emit_show_info_data(&mut self) -> &mut EmitShowInfoData {
        if let ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(EmitShowInfoData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_emit_show_info_data(&mut self) -> EmitShowInfoData {
        if self.has_emit_show_info_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(v)) => v,
                _ => panic!(),
            }
        } else {
            EmitShowInfoData::new()
        }
    }

    // .p2p.GetBalanceData get_balance_data = 12;


    pub fn get_get_balance_data(&self) -> &GetBalanceData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_data(ref v)) => v,
            _ => <GetBalanceData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_balance_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_balance_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_balance_data(&mut self, v: GetBalanceData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_balance_data(&mut self) -> &mut GetBalanceData {
        if let ::std::option::Option::Some(Event_oneof_data::get_balance_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_data(GetBalanceData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_balance_data(&mut self) -> GetBalanceData {
        if self.has_get_balance_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::get_balance_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetBalanceData::new()
        }
    }

    // .p2p.GetBalanceAckData get_balance_ack_data = 13;


    pub fn get_get_balance_ack_data(&self) -> &GetBalanceAckData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(ref v)) => v,
            _ => <GetBalanceAckData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_balance_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_balance_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_balance_ack_data(&mut self, v: GetBalanceAckData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_balance_ack_data(&mut self) -> &mut GetBalanceAckData {
        if let ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(GetBalanceAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_balance_ack_data(&mut self) -> GetBalanceAckData {
        if self.has_get_balance_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetBalanceAckData::new()
        }
    }

    // .p2p.GetPKData get_pk_data = 14;


    pub fn get_get_pk_data(&self) -> &GetPKData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_data(ref v)) => v,
            _ => <GetPKData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_pk_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_pk_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_pk_data(&mut self, v: GetPKData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_pk_data(&mut self) -> &mut GetPKData {
        if let ::std::option::Option::Some(Event_oneof_data::get_pk_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_data(GetPKData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_pk_data(&mut self) -> GetPKData {
        if self.has_get_pk_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::get_pk_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetPKData::new()
        }
    }

    // .p2p.GetPKAckData get_pk_ack_data = 15;


    pub fn get_get_pk_ack_data(&self) -> &GetPKAckData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(ref v)) => v,
            _ => <GetPKAckData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_get_pk_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_pk_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_pk_ack_data(&mut self, v: GetPKAckData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_pk_ack_data(&mut self) -> &mut GetPKAckData {
        if let ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(GetPKAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_pk_ack_data(&mut self) -> GetPKAckData {
        if self.has_get_pk_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetPKAckData::new()
        }
    }

    // .p2p.RePublishDIDData republish_did_data = 16;


    pub fn get_republish_did_data(&self) -> &RePublishDIDData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_did_data(ref v)) => v,
            _ => <RePublishDIDData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_republish_did_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_republish_did_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_did_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_republish_did_data(&mut self, v: RePublishDIDData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::republish_did_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_republish_did_data(&mut self) -> &mut RePublishDIDData {
        if let ::std::option::Option::Some(Event_oneof_data::republish_did_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::republish_did_data(RePublishDIDData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_did_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_republish_did_data(&mut self) -> RePublishDIDData {
        if self.has_republish_did_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::republish_did_data(v)) => v,
                _ => panic!(),
            }
        } else {
            RePublishDIDData::new()
        }
    }

    // .p2p.RePublishDIDAckData republish_ack_data = 17;


    pub fn get_republish_ack_data(&self) -> &RePublishDIDAckData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_ack_data(ref v)) => v,
            _ => <RePublishDIDAckData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_republish_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_republish_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_republish_ack_data(&mut self, v: RePublishDIDAckData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::republish_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_republish_ack_data(&mut self) -> &mut RePublishDIDAckData {
        if let ::std::option::Option::Some(Event_oneof_data::republish_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::republish_ack_data(RePublishDIDAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::republish_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_republish_ack_data(&mut self) -> RePublishDIDAckData {
        if self.has_republish_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::republish_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            RePublishDIDAckData::new()
        }
    }

    // .p2p.ReconnectData reconnect_data = 18;


    pub fn get_reconnect_data(&self) -> &ReconnectData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_data(ref v)) => v,
            _ => <ReconnectData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reconnect_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_reconnect_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reconnect_data(&mut self, v: ReconnectData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reconnect_data(&mut self) -> &mut ReconnectData {
        if let ::std::option::Option::Some(Event_oneof_data::reconnect_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_data(ReconnectData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reconnect_data(&mut self) -> ReconnectData {
        if self.has_reconnect_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::reconnect_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ReconnectData::new()
        }
    }

    // .p2p.ReconnectAckData reconnect_ack_data = 19;


    pub fn get_reconnect_ack_data(&self) -> &ReconnectAckData {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(ref v)) => v,
            _ => <ReconnectAckData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reconnect_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_reconnect_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reconnect_ack_data(&mut self, v: ReconnectAckData) {
        self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reconnect_ack_data(&mut self) -> &mut ReconnectAckData {
        if let ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(ReconnectAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reconnect_ack_data(&mut self) -> ReconnectAckData {
        if self.has_reconnect_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ReconnectAckData::new()
        }
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        if let Some(Event_oneof_data::charging_status_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::service_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::service_requested_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::service_delivered_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::stop_charge_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::stop_charge_resp_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::identity_challenge_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::identity_response_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::chain_event_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::emit_show_info_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::get_balance_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::get_balance_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::get_pk_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::get_pk_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::republish_did_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::republish_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::reconnect_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_data::reconnect_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_id, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::charging_status_data(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::service_ack_data(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::service_requested_data(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::service_delivered_data(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_data(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::stop_charge_resp_data(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::identity_challenge_data(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::identity_response_data(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::chain_event_data(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::emit_show_info_data(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_data(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::get_balance_ack_data(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_data(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::get_pk_ack_data(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::republish_did_data(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::republish_ack_data(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_data(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(Event_oneof_data::reconnect_ack_data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_id != EventType::CHARGING_STATUS {
            my_size += ::protobuf::rt::enum_size(1, self.event_id);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &Event_oneof_data::charging_status_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::service_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::service_requested_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::service_delivered_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::stop_charge_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::stop_charge_resp_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::identity_challenge_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::identity_response_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::chain_event_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::emit_show_info_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::get_balance_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::get_balance_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::get_pk_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::get_pk_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::republish_did_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::republish_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::reconnect_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_data::reconnect_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_id != EventType::CHARGING_STATUS {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.event_id))?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &Event_oneof_data::charging_status_data(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::service_ack_data(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::service_requested_data(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::service_delivered_data(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::stop_charge_data(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::stop_charge_resp_data(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::identity_challenge_data(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::identity_response_data(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::chain_event_data(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::emit_show_info_data(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::get_balance_data(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::get_balance_ack_data(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::get_pk_data(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::get_pk_ack_data(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::republish_did_data(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::republish_ack_data(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::reconnect_data(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_data::reconnect_ack_data(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                "event_id",
                |m: &Event| { &m.event_id },
                |m: &mut Event| { &mut m.event_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChargingStatusData>(
                "charging_status_data",
                Event::has_charging_status_data,
                Event::get_charging_status_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServiceAckData>(
                "service_ack_data",
                Event::has_service_ack_data,
                Event::get_service_ack_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServiceRequestedData>(
                "service_requested_data",
                Event::has_service_requested_data,
                Event::get_service_requested_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServiceDeliveredData>(
                "service_delivered_data",
                Event::has_service_delivered_data,
                Event::get_service_delivered_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StopChargeData>(
                "stop_charge_data",
                Event::has_stop_charge_data,
                Event::get_stop_charge_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StopChargeResponseData>(
                "stop_charge_resp_data",
                Event::has_stop_charge_resp_data,
                Event::get_stop_charge_resp_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IdentityChallengeData>(
                "identity_challenge_data",
                Event::has_identity_challenge_data,
                Event::get_identity_challenge_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IdentityResponseData>(
                "identity_response_data",
                Event::has_identity_response_data,
                Event::get_identity_response_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ChainEventData>(
                "chain_event_data",
                Event::has_chain_event_data,
                Event::get_chain_event_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EmitShowInfoData>(
                "emit_show_info_data",
                Event::has_emit_show_info_data,
                Event::get_emit_show_info_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetBalanceData>(
                "get_balance_data",
                Event::has_get_balance_data,
                Event::get_get_balance_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetBalanceAckData>(
                "get_balance_ack_data",
                Event::has_get_balance_ack_data,
                Event::get_get_balance_ack_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetPKData>(
                "get_pk_data",
                Event::has_get_pk_data,
                Event::get_get_pk_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetPKAckData>(
                "get_pk_ack_data",
                Event::has_get_pk_ack_data,
                Event::get_get_pk_ack_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RePublishDIDData>(
                "republish_did_data",
                Event::has_republish_did_data,
                Event::get_republish_did_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RePublishDIDAckData>(
                "republish_ack_data",
                Event::has_republish_ack_data,
                Event::get_republish_ack_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReconnectData>(
                "reconnect_data",
                Event::has_reconnect_data,
                Event::get_reconnect_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReconnectAckData>(
                "reconnect_ack_data",
                Event::has_reconnect_ack_data,
                Event::get_reconnect_ack_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.event_id = EventType::CHARGING_STATUS;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChargingStatusData {
    // message fields
    pub progress: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChargingStatusData {
    fn default() -> &'a ChargingStatusData {
        <ChargingStatusData as ::protobuf::Message>::default_instance()
    }
}

impl ChargingStatusData {
    pub fn new() -> ChargingStatusData {
        ::std::default::Default::default()
    }

    // float progress = 1;


    pub fn get_progress(&self) -> f32 {
        self.progress
    }
    pub fn clear_progress(&mut self) {
        self.progress = 0.;
    }

    // Param is passed by value, moved
    pub fn set_progress(&mut self, v: f32) {
        self.progress = v;
    }
}

impl ::protobuf::Message for ChargingStatusData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.progress = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.progress != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.progress != 0. {
            os.write_float(1, self.progress)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChargingStatusData {
        ChargingStatusData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "progress",
                |m: &ChargingStatusData| { &m.progress },
                |m: &mut ChargingStatusData| { &mut m.progress },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChargingStatusData>(
                "ChargingStatusData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChargingStatusData {
        static instance: ::protobuf::rt::LazyV2<ChargingStatusData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChargingStatusData::new)
    }
}

impl ::protobuf::Clear for ChargingStatusData {
    fn clear(&mut self) {
        self.progress = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChargingStatusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargingStatusData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServiceAckData {
    // message fields
    pub resp: ::protobuf::SingularPtrField<Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceAckData {
    fn default() -> &'a ServiceAckData {
        <ServiceAckData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceAckData {
    pub fn new() -> ServiceAckData {
        ::std::default::Default::default()
    }

    // .p2p.Response resp = 1;


    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| <Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }
}

impl ::protobuf::Message for ServiceAckData {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServiceAckData {
        ServiceAckData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                "resp",
                |m: &ServiceAckData| { &m.resp },
                |m: &mut ServiceAckData| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServiceAckData>(
                "ServiceAckData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServiceAckData {
        static instance: ::protobuf::rt::LazyV2<ServiceAckData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServiceAckData::new)
    }
}

impl ::protobuf::Clear for ServiceAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServiceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceAckData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServiceRequestedData {
    // message fields
    pub consumer: ::std::string::String,
    pub provider: ::std::string::String,
    pub token_deposited: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceRequestedData {
    fn default() -> &'a ServiceRequestedData {
        <ServiceRequestedData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceRequestedData {
    pub fn new() -> ServiceRequestedData {
        ::std::default::Default::default()
    }

    // string consumer = 1;


    pub fn get_consumer(&self) -> &str {
        &self.consumer
    }
    pub fn clear_consumer(&mut self) {
        self.consumer.clear();
    }

    // Param is passed by value, moved
    pub fn set_consumer(&mut self, v: ::std::string::String) {
        self.consumer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consumer(&mut self) -> &mut ::std::string::String {
        &mut self.consumer
    }

    // Take field
    pub fn take_consumer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consumer, ::std::string::String::new())
    }

    // string provider = 2;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // string token_deposited = 3;


    pub fn get_token_deposited(&self) -> &str {
        &self.token_deposited
    }
    pub fn clear_token_deposited(&mut self) {
        self.token_deposited.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_deposited(&mut self, v: ::std::string::String) {
        self.token_deposited = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_deposited(&mut self) -> &mut ::std::string::String {
        &mut self.token_deposited
    }

    // Take field
    pub fn take_token_deposited(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_deposited, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ServiceRequestedData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consumer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_deposited)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if !self.token_deposited.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.token_deposited);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if !self.token_deposited.is_empty() {
            os.write_string(3, &self.token_deposited)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServiceRequestedData {
        ServiceRequestedData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consumer",
                |m: &ServiceRequestedData| { &m.consumer },
                |m: &mut ServiceRequestedData| { &mut m.consumer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider",
                |m: &ServiceRequestedData| { &m.provider },
                |m: &mut ServiceRequestedData| { &mut m.provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_deposited",
                |m: &ServiceRequestedData| { &m.token_deposited },
                |m: &mut ServiceRequestedData| { &mut m.token_deposited },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServiceRequestedData>(
                "ServiceRequestedData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServiceRequestedData {
        static instance: ::protobuf::rt::LazyV2<ServiceRequestedData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServiceRequestedData::new)
    }
}

impl ::protobuf::Clear for ServiceRequestedData {
    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.token_deposited.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServiceRequestedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceRequestedData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServiceDeliveredData {
    // message fields
    pub consumer: ::std::string::String,
    pub provider: ::std::string::String,
    pub refund_info: ::protobuf::SingularPtrField<TransactionValue>,
    pub spent_info: ::protobuf::SingularPtrField<TransactionValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceDeliveredData {
    fn default() -> &'a ServiceDeliveredData {
        <ServiceDeliveredData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceDeliveredData {
    pub fn new() -> ServiceDeliveredData {
        ::std::default::Default::default()
    }

    // string consumer = 1;


    pub fn get_consumer(&self) -> &str {
        &self.consumer
    }
    pub fn clear_consumer(&mut self) {
        self.consumer.clear();
    }

    // Param is passed by value, moved
    pub fn set_consumer(&mut self, v: ::std::string::String) {
        self.consumer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consumer(&mut self) -> &mut ::std::string::String {
        &mut self.consumer
    }

    // Take field
    pub fn take_consumer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consumer, ::std::string::String::new())
    }

    // string provider = 2;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // .p2p.TransactionValue refund_info = 3;


    pub fn get_refund_info(&self) -> &TransactionValue {
        self.refund_info.as_ref().unwrap_or_else(|| <TransactionValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_refund_info(&mut self) {
        self.refund_info.clear();
    }

    pub fn has_refund_info(&self) -> bool {
        self.refund_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refund_info(&mut self, v: TransactionValue) {
        self.refund_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refund_info(&mut self) -> &mut TransactionValue {
        if self.refund_info.is_none() {
            self.refund_info.set_default();
        }
        self.refund_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_refund_info(&mut self) -> TransactionValue {
        self.refund_info.take().unwrap_or_else(|| TransactionValue::new())
    }

    // .p2p.TransactionValue spent_info = 4;


    pub fn get_spent_info(&self) -> &TransactionValue {
        self.spent_info.as_ref().unwrap_or_else(|| <TransactionValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_spent_info(&mut self) {
        self.spent_info.clear();
    }

    pub fn has_spent_info(&self) -> bool {
        self.spent_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spent_info(&mut self, v: TransactionValue) {
        self.spent_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spent_info(&mut self) -> &mut TransactionValue {
        if self.spent_info.is_none() {
            self.spent_info.set_default();
        }
        self.spent_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_spent_info(&mut self) -> TransactionValue {
        self.spent_info.take().unwrap_or_else(|| TransactionValue::new())
    }
}

impl ::protobuf::Message for ServiceDeliveredData {
    fn is_initialized(&self) -> bool {
        for v in &self.refund_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spent_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consumer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.refund_info)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.spent_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if let Some(ref v) = self.refund_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.spent_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if let Some(ref v) = self.refund_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.spent_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServiceDeliveredData {
        ServiceDeliveredData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consumer",
                |m: &ServiceDeliveredData| { &m.consumer },
                |m: &mut ServiceDeliveredData| { &mut m.consumer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider",
                |m: &ServiceDeliveredData| { &m.provider },
                |m: &mut ServiceDeliveredData| { &mut m.provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionValue>>(
                "refund_info",
                |m: &ServiceDeliveredData| { &m.refund_info },
                |m: &mut ServiceDeliveredData| { &mut m.refund_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionValue>>(
                "spent_info",
                |m: &ServiceDeliveredData| { &m.spent_info },
                |m: &mut ServiceDeliveredData| { &mut m.spent_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServiceDeliveredData>(
                "ServiceDeliveredData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServiceDeliveredData {
        static instance: ::protobuf::rt::LazyV2<ServiceDeliveredData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServiceDeliveredData::new)
    }
}

impl ::protobuf::Clear for ServiceDeliveredData {
    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.refund_info.clear();
        self.spent_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServiceDeliveredData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceDeliveredData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopChargeResponseData {
    // message fields
    pub resp: ::protobuf::SingularPtrField<Response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopChargeResponseData {
    fn default() -> &'a StopChargeResponseData {
        <StopChargeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeResponseData {
    pub fn new() -> StopChargeResponseData {
        ::std::default::Default::default()
    }

    // .p2p.Response resp = 1;


    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| <Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }
}

impl ::protobuf::Message for StopChargeResponseData {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopChargeResponseData {
        StopChargeResponseData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                "resp",
                |m: &StopChargeResponseData| { &m.resp },
                |m: &mut StopChargeResponseData| { &mut m.resp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopChargeResponseData>(
                "StopChargeResponseData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopChargeResponseData {
        static instance: ::protobuf::rt::LazyV2<StopChargeResponseData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopChargeResponseData::new)
    }
}

impl ::protobuf::Clear for StopChargeResponseData {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopChargeResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeResponseData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdentityChallengeData {
    // message fields
    pub plain_data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityChallengeData {
    fn default() -> &'a IdentityChallengeData {
        <IdentityChallengeData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityChallengeData {
    pub fn new() -> IdentityChallengeData {
        ::std::default::Default::default()
    }

    // string plain_data = 1;


    pub fn get_plain_data(&self) -> &str {
        &self.plain_data
    }
    pub fn clear_plain_data(&mut self) {
        self.plain_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_plain_data(&mut self, v: ::std::string::String) {
        self.plain_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plain_data(&mut self) -> &mut ::std::string::String {
        &mut self.plain_data
    }

    // Take field
    pub fn take_plain_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.plain_data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IdentityChallengeData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.plain_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.plain_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plain_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.plain_data.is_empty() {
            os.write_string(1, &self.plain_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentityChallengeData {
        IdentityChallengeData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "plain_data",
                |m: &IdentityChallengeData| { &m.plain_data },
                |m: &mut IdentityChallengeData| { &mut m.plain_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentityChallengeData>(
                "IdentityChallengeData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentityChallengeData {
        static instance: ::protobuf::rt::LazyV2<IdentityChallengeData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentityChallengeData::new)
    }
}

impl ::protobuf::Clear for IdentityChallengeData {
    fn clear(&mut self) {
        self.plain_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentityChallengeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityChallengeData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdentityResponseData {
    // message fields
    pub resp: ::protobuf::SingularPtrField<Response>,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityResponseData {
    fn default() -> &'a IdentityResponseData {
        <IdentityResponseData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityResponseData {
    pub fn new() -> IdentityResponseData {
        ::std::default::Default::default()
    }

    // .p2p.Response resp = 1;


    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| <Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }

    // string signature = 3;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IdentityResponseData {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentityResponseData {
        IdentityResponseData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                "resp",
                |m: &IdentityResponseData| { &m.resp },
                |m: &mut IdentityResponseData| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "signature",
                |m: &IdentityResponseData| { &m.signature },
                |m: &mut IdentityResponseData| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentityResponseData>(
                "IdentityResponseData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentityResponseData {
        static instance: ::protobuf::rt::LazyV2<IdentityResponseData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentityResponseData::new)
    }
}

impl ::protobuf::Clear for IdentityResponseData {
    fn clear(&mut self) {
        self.resp.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentityResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityResponseData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub error: bool,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // bool error = 1;


    pub fn get_error(&self) -> bool {
        self.error
    }
    pub fn clear_error(&mut self) {
        self.error = false;
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: bool) {
        self.error = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.error = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "error",
                |m: &Response| { &m.error },
                |m: &mut Response| { &mut m.error },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Response| { &m.message },
                |m: &mut Response| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionValue {
    // message fields
    pub token_num: ::std::string::String,
    pub tx_hash: ::std::string::String,
    pub time_point: ::protobuf::SingularPtrField<TransactionValue_TimePoint>,
    pub call_hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionValue {
    fn default() -> &'a TransactionValue {
        <TransactionValue as ::protobuf::Message>::default_instance()
    }
}

impl TransactionValue {
    pub fn new() -> TransactionValue {
        ::std::default::Default::default()
    }

    // string token_num = 1;


    pub fn get_token_num(&self) -> &str {
        &self.token_num
    }
    pub fn clear_token_num(&mut self) {
        self.token_num.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_num(&mut self, v: ::std::string::String) {
        self.token_num = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_num(&mut self) -> &mut ::std::string::String {
        &mut self.token_num
    }

    // Take field
    pub fn take_token_num(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_num, ::std::string::String::new())
    }

    // string tx_hash = 2;


    pub fn get_tx_hash(&self) -> &str {
        &self.tx_hash
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::string::String) {
        self.tx_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::string::String {
        &mut self.tx_hash
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_hash, ::std::string::String::new())
    }

    // .p2p.TransactionValue.TimePoint time_point = 3;


    pub fn get_time_point(&self) -> &TransactionValue_TimePoint {
        self.time_point.as_ref().unwrap_or_else(|| <TransactionValue_TimePoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_point(&mut self) {
        self.time_point.clear();
    }

    pub fn has_time_point(&self) -> bool {
        self.time_point.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_point(&mut self, v: TransactionValue_TimePoint) {
        self.time_point = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_point(&mut self) -> &mut TransactionValue_TimePoint {
        if self.time_point.is_none() {
            self.time_point.set_default();
        }
        self.time_point.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_point(&mut self) -> TransactionValue_TimePoint {
        self.time_point.take().unwrap_or_else(|| TransactionValue_TimePoint::new())
    }

    // string call_hash = 4;


    pub fn get_call_hash(&self) -> &str {
        &self.call_hash
    }
    pub fn clear_call_hash(&mut self) {
        self.call_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_call_hash(&mut self, v: ::std::string::String) {
        self.call_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_call_hash(&mut self) -> &mut ::std::string::String {
        &mut self.call_hash
    }

    // Take field
    pub fn take_call_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.call_hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TransactionValue {
    fn is_initialized(&self) -> bool {
        for v in &self.time_point {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_num)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_point)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.call_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token_num.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token_num);
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tx_hash);
        }
        if let Some(ref v) = self.time_point.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.call_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.call_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token_num.is_empty() {
            os.write_string(1, &self.token_num)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_string(2, &self.tx_hash)?;
        }
        if let Some(ref v) = self.time_point.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.call_hash.is_empty() {
            os.write_string(4, &self.call_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionValue {
        TransactionValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_num",
                |m: &TransactionValue| { &m.token_num },
                |m: &mut TransactionValue| { &mut m.token_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tx_hash",
                |m: &TransactionValue| { &m.tx_hash },
                |m: &mut TransactionValue| { &mut m.tx_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionValue_TimePoint>>(
                "time_point",
                |m: &TransactionValue| { &m.time_point },
                |m: &mut TransactionValue| { &mut m.time_point },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "call_hash",
                |m: &TransactionValue| { &m.call_hash },
                |m: &mut TransactionValue| { &mut m.call_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionValue>(
                "TransactionValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionValue {
        static instance: ::protobuf::rt::LazyV2<TransactionValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionValue::new)
    }
}

impl ::protobuf::Clear for TransactionValue {
    fn clear(&mut self) {
        self.token_num.clear();
        self.tx_hash.clear();
        self.time_point.clear();
        self.call_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionValue_TimePoint {
    // message fields
    pub height: i64,
    pub index: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionValue_TimePoint {
    fn default() -> &'a TransactionValue_TimePoint {
        <TransactionValue_TimePoint as ::protobuf::Message>::default_instance()
    }
}

impl TransactionValue_TimePoint {
    pub fn new() -> TransactionValue_TimePoint {
        ::std::default::Default::default()
    }

    // int64 height = 1;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // int64 index = 2;


    pub fn get_index(&self) -> i64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i64) {
        self.index = v;
    }
}

impl ::protobuf::Message for TransactionValue_TimePoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.index != 0 {
            os.write_int64(2, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionValue_TimePoint {
        TransactionValue_TimePoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &TransactionValue_TimePoint| { &m.height },
                |m: &mut TransactionValue_TimePoint| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "index",
                |m: &TransactionValue_TimePoint| { &m.index },
                |m: &mut TransactionValue_TimePoint| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionValue_TimePoint>(
                "TransactionValue.TimePoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionValue_TimePoint {
        static instance: ::protobuf::rt::LazyV2<TransactionValue_TimePoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionValue_TimePoint::new)
    }
}

impl ::protobuf::Clear for TransactionValue_TimePoint {
    fn clear(&mut self) {
        self.height = 0;
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionValue_TimePoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionValue_TimePoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChainEventData {
    // message fields
    pub event_id: ::std::string::String,
    pub attributes: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainEventData {
    fn default() -> &'a ChainEventData {
        <ChainEventData as ::protobuf::Message>::default_instance()
    }
}

impl ChainEventData {
    pub fn new() -> ChainEventData {
        ::std::default::Default::default()
    }

    // string event_id = 1;


    pub fn get_event_id(&self) -> &str {
        &self.event_id
    }
    pub fn clear_event_id(&mut self) {
        self.event_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_event_id(&mut self, v: ::std::string::String) {
        self.event_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_id(&mut self) -> &mut ::std::string::String {
        &mut self.event_id
    }

    // Take field
    pub fn take_event_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.event_id, ::std::string::String::new())
    }

    // string attributes = 2;


    pub fn get_attributes(&self) -> &str {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::std::string::String) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attributes(&mut self) -> &mut ::std::string::String {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.attributes, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ChainEventData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.event_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.event_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.event_id);
        }
        if !self.attributes.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.attributes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.event_id.is_empty() {
            os.write_string(1, &self.event_id)?;
        }
        if !self.attributes.is_empty() {
            os.write_string(2, &self.attributes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainEventData {
        ChainEventData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "event_id",
                |m: &ChainEventData| { &m.event_id },
                |m: &mut ChainEventData| { &mut m.event_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "attributes",
                |m: &ChainEventData| { &m.attributes },
                |m: &mut ChainEventData| { &mut m.attributes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChainEventData>(
                "ChainEventData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChainEventData {
        static instance: ::protobuf::rt::LazyV2<ChainEventData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChainEventData::new)
    }
}

impl ::protobuf::Clear for ChainEventData {
    fn clear(&mut self) {
        self.event_id.clear();
        self.attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainEventData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmitShowInfoData {
    // message fields
    pub field_type: EmitShowInfoData_ShowInfoType,
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmitShowInfoData {
    fn default() -> &'a EmitShowInfoData {
        <EmitShowInfoData as ::protobuf::Message>::default_instance()
    }
}

impl EmitShowInfoData {
    pub fn new() -> EmitShowInfoData {
        ::std::default::Default::default()
    }

    // .p2p.EmitShowInfoData.ShowInfoType type = 1;


    pub fn get_field_type(&self) -> EmitShowInfoData_ShowInfoType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = EmitShowInfoData_ShowInfoType::LOG_INFO;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EmitShowInfoData_ShowInfoType) {
        self.field_type = v;
    }

    // string data = 2;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EmitShowInfoData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != EmitShowInfoData_ShowInfoType::LOG_INFO {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != EmitShowInfoData_ShowInfoType::LOG_INFO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmitShowInfoData {
        EmitShowInfoData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EmitShowInfoData_ShowInfoType>>(
                "type",
                |m: &EmitShowInfoData| { &m.field_type },
                |m: &mut EmitShowInfoData| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &EmitShowInfoData| { &m.data },
                |m: &mut EmitShowInfoData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmitShowInfoData>(
                "EmitShowInfoData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmitShowInfoData {
        static instance: ::protobuf::rt::LazyV2<EmitShowInfoData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmitShowInfoData::new)
    }
}

impl ::protobuf::Clear for EmitShowInfoData {
    fn clear(&mut self) {
        self.field_type = EmitShowInfoData_ShowInfoType::LOG_INFO;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmitShowInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmitShowInfoData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EmitShowInfoData_ShowInfoType {
    LOG_INFO = 0,
    EVENT_INFO = 1,
}

impl ::protobuf::ProtobufEnum for EmitShowInfoData_ShowInfoType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EmitShowInfoData_ShowInfoType> {
        match value {
            0 => ::std::option::Option::Some(EmitShowInfoData_ShowInfoType::LOG_INFO),
            1 => ::std::option::Option::Some(EmitShowInfoData_ShowInfoType::EVENT_INFO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EmitShowInfoData_ShowInfoType] = &[
            EmitShowInfoData_ShowInfoType::LOG_INFO,
            EmitShowInfoData_ShowInfoType::EVENT_INFO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EmitShowInfoData_ShowInfoType>("EmitShowInfoData.ShowInfoType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EmitShowInfoData_ShowInfoType {
}

impl ::std::default::Default for EmitShowInfoData_ShowInfoType {
    fn default() -> Self {
        EmitShowInfoData_ShowInfoType::LOG_INFO
    }
}

impl ::protobuf::reflect::ProtobufValue for EmitShowInfoData_ShowInfoType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalanceData {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalanceData {
    fn default() -> &'a GetBalanceData {
        <GetBalanceData as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceData {
    pub fn new() -> GetBalanceData {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetBalanceData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalanceData {
        GetBalanceData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBalanceData>(
                "GetBalanceData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBalanceData {
        static instance: ::protobuf::rt::LazyV2<GetBalanceData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBalanceData::new)
    }
}

impl ::protobuf::Clear for GetBalanceData {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalanceData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBalanceAckData {
    // message fields
    pub balance: ::std::string::String,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalanceAckData {
    fn default() -> &'a GetBalanceAckData {
        <GetBalanceAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceAckData {
    pub fn new() -> GetBalanceAckData {
        ::std::default::Default::default()
    }

    // string balance = 1;


    pub fn get_balance(&self) -> &str {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::string::String) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::string::String {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balance, ::std::string::String::new())
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for GetBalanceAckData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balance)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.balance);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.balance.is_empty() {
            os.write_string(1, &self.balance)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBalanceAckData {
        GetBalanceAckData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balance",
                |m: &GetBalanceAckData| { &m.balance },
                |m: &mut GetBalanceAckData| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &GetBalanceAckData| { &m.success },
                |m: &mut GetBalanceAckData| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBalanceAckData>(
                "GetBalanceAckData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBalanceAckData {
        static instance: ::protobuf::rt::LazyV2<GetBalanceAckData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBalanceAckData::new)
    }
}

impl ::protobuf::Clear for GetBalanceAckData {
    fn clear(&mut self) {
        self.balance.clear();
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBalanceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceAckData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPKData {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPKData {
    fn default() -> &'a GetPKData {
        <GetPKData as ::protobuf::Message>::default_instance()
    }
}

impl GetPKData {
    pub fn new() -> GetPKData {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetPKData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPKData {
        GetPKData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPKData>(
                "GetPKData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPKData {
        static instance: ::protobuf::rt::LazyV2<GetPKData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPKData::new)
    }
}

impl ::protobuf::Clear for GetPKData {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPKData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPKData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPKAckData {
    // message fields
    pub pk: ::std::string::String,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPKAckData {
    fn default() -> &'a GetPKAckData {
        <GetPKAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetPKAckData {
    pub fn new() -> GetPKAckData {
        ::std::default::Default::default()
    }

    // string pk = 1;


    pub fn get_pk(&self) -> &str {
        &self.pk
    }
    pub fn clear_pk(&mut self) {
        self.pk.clear();
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: ::std::string::String) {
        self.pk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pk(&mut self) -> &mut ::std::string::String {
        &mut self.pk
    }

    // Take field
    pub fn take_pk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pk, ::std::string::String::new())
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for GetPKAckData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pk)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pk);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pk.is_empty() {
            os.write_string(1, &self.pk)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPKAckData {
        GetPKAckData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pk",
                |m: &GetPKAckData| { &m.pk },
                |m: &mut GetPKAckData| { &mut m.pk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &GetPKAckData| { &m.success },
                |m: &mut GetPKAckData| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPKAckData>(
                "GetPKAckData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPKAckData {
        static instance: ::protobuf::rt::LazyV2<GetPKAckData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPKAckData::new)
    }
}

impl ::protobuf::Clear for GetPKAckData {
    fn clear(&mut self) {
        self.pk.clear();
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPKAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPKAckData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RePublishDIDData {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RePublishDIDData {
    fn default() -> &'a RePublishDIDData {
        <RePublishDIDData as ::protobuf::Message>::default_instance()
    }
}

impl RePublishDIDData {
    pub fn new() -> RePublishDIDData {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RePublishDIDData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RePublishDIDData {
        RePublishDIDData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RePublishDIDData>(
                "RePublishDIDData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RePublishDIDData {
        static instance: ::protobuf::rt::LazyV2<RePublishDIDData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RePublishDIDData::new)
    }
}

impl ::protobuf::Clear for RePublishDIDData {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RePublishDIDData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RePublishDIDData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RePublishDIDAckData {
    // message fields
    pub resp: ::protobuf::SingularPtrField<Response>,
    pub pk: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RePublishDIDAckData {
    fn default() -> &'a RePublishDIDAckData {
        <RePublishDIDAckData as ::protobuf::Message>::default_instance()
    }
}

impl RePublishDIDAckData {
    pub fn new() -> RePublishDIDAckData {
        ::std::default::Default::default()
    }

    // .p2p.Response resp = 1;


    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| <Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }

    // string pk = 2;


    pub fn get_pk(&self) -> &str {
        &self.pk
    }
    pub fn clear_pk(&mut self) {
        self.pk.clear();
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: ::std::string::String) {
        self.pk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pk(&mut self) -> &mut ::std::string::String {
        &mut self.pk
    }

    // Take field
    pub fn take_pk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pk, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RePublishDIDAckData {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.pk.is_empty() {
            os.write_string(2, &self.pk)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RePublishDIDAckData {
        RePublishDIDAckData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                "resp",
                |m: &RePublishDIDAckData| { &m.resp },
                |m: &mut RePublishDIDAckData| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pk",
                |m: &RePublishDIDAckData| { &m.pk },
                |m: &mut RePublishDIDAckData| { &mut m.pk },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RePublishDIDAckData>(
                "RePublishDIDAckData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RePublishDIDAckData {
        static instance: ::protobuf::rt::LazyV2<RePublishDIDAckData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RePublishDIDAckData::new)
    }
}

impl ::protobuf::Clear for RePublishDIDAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.pk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RePublishDIDAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RePublishDIDAckData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReconnectData {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReconnectData {
    fn default() -> &'a ReconnectData {
        <ReconnectData as ::protobuf::Message>::default_instance()
    }
}

impl ReconnectData {
    pub fn new() -> ReconnectData {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReconnectData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReconnectData {
        ReconnectData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReconnectData>(
                "ReconnectData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReconnectData {
        static instance: ::protobuf::rt::LazyV2<ReconnectData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReconnectData::new)
    }
}

impl ::protobuf::Clear for ReconnectData {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReconnectData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReconnectData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReconnectAckData {
    // message fields
    pub data: ::std::string::String,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReconnectAckData {
    fn default() -> &'a ReconnectAckData {
        <ReconnectAckData as ::protobuf::Message>::default_instance()
    }
}

impl ReconnectAckData {
    pub fn new() -> ReconnectAckData {
        ::std::default::Default::default()
    }

    // string data = 1;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for ReconnectAckData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReconnectAckData {
        ReconnectAckData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &ReconnectAckData| { &m.data },
                |m: &mut ReconnectAckData| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &ReconnectAckData| { &m.success },
                |m: &mut ReconnectAckData| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReconnectAckData>(
                "ReconnectAckData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReconnectAckData {
        static instance: ::protobuf::rt::LazyV2<ReconnectAckData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReconnectAckData::new)
    }
}

impl ::protobuf::Clear for ReconnectAckData {
    fn clear(&mut self) {
        self.data.clear();
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReconnectAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReconnectAckData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopChargeData {
    // message fields
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopChargeData {
    fn default() -> &'a StopChargeData {
        <StopChargeData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeData {
    pub fn new() -> StopChargeData {
        ::std::default::Default::default()
    }

    // bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for StopChargeData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopChargeData {
        StopChargeData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &StopChargeData| { &m.success },
                |m: &mut StopChargeData| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopChargeData>(
                "StopChargeData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopChargeData {
        static instance: ::protobuf::rt::LazyV2<StopChargeData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopChargeData::new)
    }
}

impl ::protobuf::Clear for StopChargeData {
    fn clear(&mut self) {
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopChargeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    CHARGING_STATUS = 0,
    SERVICE_REQUEST_ACK = 1,
    SERVICE_DELIVERY_ACK = 2,
    SERVICE_REQUESTED = 3,
    SERVICE_DELIVERED = 4,
    STOP_CHARGE = 5,
    STOP_CHARGE_RESPONSE = 6,
    IDENTITY_CHALLENGE = 7,
    IDENTITY_RESPONSE = 8,
    RECEIVE_CHAIN_EVENT = 9,
    EMIT_SHOW_INFO = 10,
    GET_BALANCE = 11,
    GET_BALANCE_ACK = 12,
    GET_PK = 13,
    GET_PK_ACK = 14,
    REPUBLISH_DID = 15,
    REPUBLISH_DID_ACK = 16,
    RECONNECT = 17,
    RECONNECT_ACK = 18,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::CHARGING_STATUS),
            1 => ::std::option::Option::Some(EventType::SERVICE_REQUEST_ACK),
            2 => ::std::option::Option::Some(EventType::SERVICE_DELIVERY_ACK),
            3 => ::std::option::Option::Some(EventType::SERVICE_REQUESTED),
            4 => ::std::option::Option::Some(EventType::SERVICE_DELIVERED),
            5 => ::std::option::Option::Some(EventType::STOP_CHARGE),
            6 => ::std::option::Option::Some(EventType::STOP_CHARGE_RESPONSE),
            7 => ::std::option::Option::Some(EventType::IDENTITY_CHALLENGE),
            8 => ::std::option::Option::Some(EventType::IDENTITY_RESPONSE),
            9 => ::std::option::Option::Some(EventType::RECEIVE_CHAIN_EVENT),
            10 => ::std::option::Option::Some(EventType::EMIT_SHOW_INFO),
            11 => ::std::option::Option::Some(EventType::GET_BALANCE),
            12 => ::std::option::Option::Some(EventType::GET_BALANCE_ACK),
            13 => ::std::option::Option::Some(EventType::GET_PK),
            14 => ::std::option::Option::Some(EventType::GET_PK_ACK),
            15 => ::std::option::Option::Some(EventType::REPUBLISH_DID),
            16 => ::std::option::Option::Some(EventType::REPUBLISH_DID_ACK),
            17 => ::std::option::Option::Some(EventType::RECONNECT),
            18 => ::std::option::Option::Some(EventType::RECONNECT_ACK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::CHARGING_STATUS,
            EventType::SERVICE_REQUEST_ACK,
            EventType::SERVICE_DELIVERY_ACK,
            EventType::SERVICE_REQUESTED,
            EventType::SERVICE_DELIVERED,
            EventType::STOP_CHARGE,
            EventType::STOP_CHARGE_RESPONSE,
            EventType::IDENTITY_CHALLENGE,
            EventType::IDENTITY_RESPONSE,
            EventType::RECEIVE_CHAIN_EVENT,
            EventType::EMIT_SHOW_INFO,
            EventType::GET_BALANCE,
            EventType::GET_BALANCE_ACK,
            EventType::GET_PK,
            EventType::GET_PK_ACK,
            EventType::REPUBLISH_DID,
            EventType::REPUBLISH_DID_ACK,
            EventType::RECONNECT,
            EventType::RECONNECT_ACK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::CHARGING_STATUS
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18p2p_message_format.proto\x12\x03p2p\"\xc2\n\n\x05Event\x12)\n\x08e\
    vent_id\x18\x01\x20\x01(\x0e2\x0e.p2p.EventTypeR\x07eventId\x12K\n\x14ch\
    arging_status_data\x18\x02\x20\x01(\x0b2\x17.p2p.ChargingStatusDataH\0R\
    \x12chargingStatusData\x12?\n\x10service_ack_data\x18\x03\x20\x01(\x0b2\
    \x13.p2p.ServiceAckDataH\0R\x0eserviceAckData\x12Q\n\x16service_requeste\
    d_data\x18\x04\x20\x01(\x0b2\x19.p2p.ServiceRequestedDataH\0R\x14service\
    RequestedData\x12Q\n\x16service_delivered_data\x18\x05\x20\x01(\x0b2\x19\
    .p2p.ServiceDeliveredDataH\0R\x14serviceDeliveredData\x12?\n\x10stop_cha\
    rge_data\x18\x06\x20\x01(\x0b2\x13.p2p.StopChargeDataH\0R\x0estopChargeD\
    ata\x12P\n\x15stop_charge_resp_data\x18\x07\x20\x01(\x0b2\x1b.p2p.StopCh\
    argeResponseDataH\0R\x12stopChargeRespData\x12T\n\x17identity_challenge_\
    data\x18\x08\x20\x01(\x0b2\x1a.p2p.IdentityChallengeDataH\0R\x15identity\
    ChallengeData\x12Q\n\x16identity_response_data\x18\t\x20\x01(\x0b2\x19.p\
    2p.IdentityResponseDataH\0R\x14identityResponseData\x12?\n\x10chain_even\
    t_data\x18\n\x20\x01(\x0b2\x13.p2p.ChainEventDataH\0R\x0echainEventData\
    \x12F\n\x13emit_show_info_data\x18\x0b\x20\x01(\x0b2\x15.p2p.EmitShowInf\
    oDataH\0R\x10emitShowInfoData\x12?\n\x10get_balance_data\x18\x0c\x20\x01\
    (\x0b2\x13.p2p.GetBalanceDataH\0R\x0egetBalanceData\x12I\n\x14get_balanc\
    e_ack_data\x18\r\x20\x01(\x0b2\x16.p2p.GetBalanceAckDataH\0R\x11getBalan\
    ceAckData\x120\n\x0bget_pk_data\x18\x0e\x20\x01(\x0b2\x0e.p2p.GetPKDataH\
    \0R\tgetPkData\x12:\n\x0fget_pk_ack_data\x18\x0f\x20\x01(\x0b2\x11.p2p.G\
    etPKAckDataH\0R\x0cgetPkAckData\x12E\n\x12republish_did_data\x18\x10\x20\
    \x01(\x0b2\x15.p2p.RePublishDIDDataH\0R\x10republishDidData\x12H\n\x12re\
    publish_ack_data\x18\x11\x20\x01(\x0b2\x18.p2p.RePublishDIDAckDataH\0R\
    \x10republishAckData\x12;\n\x0ereconnect_data\x18\x12\x20\x01(\x0b2\x12.\
    p2p.ReconnectDataH\0R\rreconnectData\x12E\n\x12reconnect_ack_data\x18\
    \x13\x20\x01(\x0b2\x15.p2p.ReconnectAckDataH\0R\x10reconnectAckDataB\x06\
    \n\x04data\"0\n\x12ChargingStatusData\x12\x1a\n\x08progress\x18\x01\x20\
    \x01(\x02R\x08progress\"3\n\x0eServiceAckData\x12!\n\x04resp\x18\x01\x20\
    \x01(\x0b2\r.p2p.ResponseR\x04resp\"w\n\x14ServiceRequestedData\x12\x1a\
    \n\x08consumer\x18\x01\x20\x01(\tR\x08consumer\x12\x1a\n\x08provider\x18\
    \x02\x20\x01(\tR\x08provider\x12'\n\x0ftoken_deposited\x18\x03\x20\x01(\
    \tR\x0etokenDeposited\"\xbc\x01\n\x14ServiceDeliveredData\x12\x1a\n\x08c\
    onsumer\x18\x01\x20\x01(\tR\x08consumer\x12\x1a\n\x08provider\x18\x02\
    \x20\x01(\tR\x08provider\x126\n\x0brefund_info\x18\x03\x20\x01(\x0b2\x15\
    .p2p.TransactionValueR\nrefundInfo\x124\n\nspent_info\x18\x04\x20\x01(\
    \x0b2\x15.p2p.TransactionValueR\tspentInfo\";\n\x16StopChargeResponseDat\
    a\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\"6\n\x15I\
    dentityChallengeData\x12\x1d\n\nplain_data\x18\x01\x20\x01(\tR\tplainDat\
    a\"W\n\x14IdentityResponseData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2\
    p.ResponseR\x04resp\x12\x1c\n\tsignature\x18\x03\x20\x01(\tR\tsignature\
    \":\n\x08Response\x12\x14\n\x05error\x18\x01\x20\x01(\x08R\x05error\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"\xe0\x01\n\x10Transact\
    ionValue\x12\x1b\n\ttoken_num\x18\x01\x20\x01(\tR\x08tokenNum\x12\x17\n\
    \x07tx_hash\x18\x02\x20\x01(\tR\x06txHash\x12>\n\ntime_point\x18\x03\x20\
    \x01(\x0b2\x1f.p2p.TransactionValue.TimePointR\ttimePoint\x12\x1b\n\tcal\
    l_hash\x18\x04\x20\x01(\tR\x08callHash\x1a9\n\tTimePoint\x12\x16\n\x06he\
    ight\x18\x01\x20\x01(\x03R\x06height\x12\x14\n\x05index\x18\x02\x20\x01(\
    \x03R\x05index\"K\n\x0eChainEventData\x12\x19\n\x08event_id\x18\x01\x20\
    \x01(\tR\x07eventId\x12\x1e\n\nattributes\x18\x02\x20\x01(\tR\nattribute\
    s\"\x8c\x01\n\x10EmitShowInfoData\x126\n\x04type\x18\x01\x20\x01(\x0e2\"\
    .p2p.EmitShowInfoData.ShowInfoTypeR\x04type\x12\x12\n\x04data\x18\x02\
    \x20\x01(\tR\x04data\",\n\x0cShowInfoType\x12\x0c\n\x08LOG_INFO\x10\0\
    \x12\x0e\n\nEVENT_INFO\x10\x01\"\x10\n\x0eGetBalanceData\"G\n\x11GetBala\
    nceAckData\x12\x18\n\x07balance\x18\x01\x20\x01(\tR\x07balance\x12\x18\n\
    \x07success\x18\x02\x20\x01(\x08R\x07success\"\x0b\n\tGetPKData\"8\n\x0c\
    GetPKAckData\x12\x0e\n\x02pk\x18\x01\x20\x01(\tR\x02pk\x12\x18\n\x07succ\
    ess\x18\x02\x20\x01(\x08R\x07success\"\x12\n\x10RePublishDIDData\"H\n\
    \x13RePublishDIDAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.Respo\
    nseR\x04resp\x12\x0e\n\x02pk\x18\x02\x20\x01(\tR\x02pk\"\x0f\n\rReconnec\
    tData\"@\n\x10ReconnectAckData\x12\x12\n\x04data\x18\x01\x20\x01(\tR\x04\
    data\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success\"*\n\x0eStopC\
    hargeData\x12\x18\n\x07success\x18\x01\x20\x01(\x08R\x07success*\x96\x03\
    \n\tEventType\x12\x13\n\x0fCHARGING_STATUS\x10\0\x12\x17\n\x13SERVICE_RE\
    QUEST_ACK\x10\x01\x12\x18\n\x14SERVICE_DELIVERY_ACK\x10\x02\x12\x15\n\
    \x11SERVICE_REQUESTED\x10\x03\x12\x15\n\x11SERVICE_DELIVERED\x10\x04\x12\
    \x0f\n\x0bSTOP_CHARGE\x10\x05\x12\x18\n\x14STOP_CHARGE_RESPONSE\x10\x06\
    \x12\x16\n\x12IDENTITY_CHALLENGE\x10\x07\x12\x15\n\x11IDENTITY_RESPONSE\
    \x10\x08\x12\x17\n\x13RECEIVE_CHAIN_EVENT\x10\t\x12\x12\n\x0eEMIT_SHOW_I\
    NFO\x10\n\x12\x0f\n\x0bGET_BALANCE\x10\x0b\x12\x13\n\x0fGET_BALANCE_ACK\
    \x10\x0c\x12\n\n\x06GET_PK\x10\r\x12\x0e\n\nGET_PK_ACK\x10\x0e\x12\x11\n\
    \rREPUBLISH_DID\x10\x0f\x12\x15\n\x11REPUBLISH_DID_ACK\x10\x10\x12\r\n\t\
    RECONNECT\x10\x11\x12\x11\n\rRECONNECT_ACK\x10\x12BWZUgithub.com/peaqnet\
    work/peaq-network-ev-charging-message-format/golang/message;messageJ\xe7\
    #\n\x07\x12\x05\0\0\x91\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x0c\n\x08\n\x01\x08\x12\x03\x03\0l\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0l\n\x1a\n\x02\x05\0\x12\x04\x06\0\x1f\x01\x1a\x0e\x20E\
    vents\x20types\n\n\n\n\x03\x05\0\x01\x12\x03\x06\x05\x0e\n\x0b\n\x04\x05\
    \0\x02\0\x12\x03\x07\x02\x16\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\x02\
    \x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x14\x15\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x08\x02\x1a\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\
    \x02\x15\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\x18\x19\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\t\x02\x1b\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\
    \x02\x16\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t\x19\x1a\n\x0b\n\x04\x05\
    \0\x02\x03\x12\x03\n\x02\x18\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\n\x02\
    \x13\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n\x16\x17\n\x0b\n\x04\x05\0\
    \x02\x04\x12\x03\x0b\x02\x18\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0b\
    \x02\x13\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0b\x16\x17\n\x0b\n\x04\
    \x05\0\x02\x05\x12\x03\x0c\x02\x12\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\
    \x0c\x02\r\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x0c\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x06\x12\x03\r\x02\x1b\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\r\
    \x02\x16\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\r\x19\x1a\n\x0b\n\x04\x05\
    \0\x02\x07\x12\x03\x0e\x02\x19\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x0e\
    \x02\x14\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0e\x17\x18\n\x0b\n\x04\
    \x05\0\x02\x08\x12\x03\x0f\x02\x18\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\
    \x0f\x02\x13\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0f\x16\x17\n$\n\x04\
    \x05\0\x02\t\x12\x03\x12\x02\x1a\x1a\x17\x20For\x20substarte's\x20event\
    \n\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x12\x02\x15\n\x0c\n\x05\x05\0\x02\
    \t\x02\x12\x03\x12\x18\x19\n\x20\n\x04\x05\0\x02\n\x12\x03\x14\x02\x16\
    \x1a\x13\x20For\x20simulator\x20log\n\n\x0c\n\x05\x05\0\x02\n\x01\x12\
    \x03\x14\x02\x10\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x14\x13\x15\n$\n\
    \x04\x05\0\x02\x0b\x12\x03\x17\x02\x13\x1a\x17\x20For\x20simulator\x20ac\
    tions\n\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x17\x02\r\n\x0c\n\x05\x05\
    \0\x02\x0b\x02\x12\x03\x17\x10\x12\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x18\
    \x02\x17\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x18\x02\x11\n\x0c\n\x05\
    \x05\0\x02\x0c\x02\x12\x03\x18\x14\x16\n\x0b\n\x04\x05\0\x02\r\x12\x03\
    \x19\x02\x0e\n\x0c\n\x05\x05\0\x02\r\x01\x12\x03\x19\x02\x08\n\x0c\n\x05\
    \x05\0\x02\r\x02\x12\x03\x19\x0b\r\n\x0b\n\x04\x05\0\x02\x0e\x12\x03\x1a\
    \x02\x12\n\x0c\n\x05\x05\0\x02\x0e\x01\x12\x03\x1a\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x0e\x02\x12\x03\x1a\x0f\x11\n\x0b\n\x04\x05\0\x02\x0f\x12\x03\
    \x1b\x02\x15\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\x03\x1b\x02\x0f\n\x0c\n\
    \x05\x05\0\x02\x0f\x02\x12\x03\x1b\x12\x14\n\x0b\n\x04\x05\0\x02\x10\x12\
    \x03\x1c\x02\x19\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\x1c\x02\x13\n\x0c\
    \n\x05\x05\0\x02\x10\x02\x12\x03\x1c\x16\x18\n\x0b\n\x04\x05\0\x02\x11\
    \x12\x03\x1d\x02\x11\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x1d\x02\x0b\n\
    \x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x1d\x0e\x10\n\x0b\n\x04\x05\0\x02\
    \x12\x12\x03\x1e\x02\x15\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x1e\x02\
    \x0f\n\x0c\n\x05\x05\0\x02\x12\x02\x12\x03\x1e\x12\x14\n\n\n\x02\x04\0\
    \x12\x04!\09\x01\n\n\n\x03\x04\0\x01\x12\x03!\x08\r\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\"\x02\x19\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\"\x02\x0b\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\"\x0c\x14\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\"\x17\x18\n\x0c\n\x04\x04\0\x08\0\x12\x04#\x028\x03\n\x0c\n\x05\
    \x04\0\x08\0\x01\x12\x03#\x08\x0c\n\x0b\n\x04\x04\0\x02\x01\x12\x03$\x04\
    0\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03$\x04\x16\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03$\x17+\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03$./\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03%\x04(\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03%\
    \x04\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03%\x13#\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03%&'\n\x0b\n\x04\x04\0\x02\x03\x12\x03&\x044\n\x0c\n\
    \x05\x04\0\x02\x03\x06\x12\x03&\x04\x18\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03&\x19/\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03&23\n\x0b\n\x04\x04\
    \0\x02\x04\x12\x03'\x044\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03'\x04\x18\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03'\x19/\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03'23\n\x0b\n\x04\x04\0\x02\x05\x12\x03(\x04(\n\x0c\n\x05\x04\
    \0\x02\x05\x06\x12\x03(\x04\x12\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03(\
    \x13#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03(&'\n\x0b\n\x04\x04\0\x02\x06\
    \x12\x03)\x045\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03)\x04\x1a\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03)\x1b0\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03)34\n\x0b\n\x04\x04\0\x02\x07\x12\x03*\x046\n\x0c\n\x05\x04\0\x02\
    \x07\x06\x12\x03*\x04\x19\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03*\x1a1\n\
    \x0c\n\x05\x04\0\x02\x07\x03\x12\x03*45\n\x0b\n\x04\x04\0\x02\x08\x12\
    \x03+\x044\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03+\x04\x18\n\x0c\n\x05\
    \x04\0\x02\x08\x01\x12\x03+\x19/\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03+2\
    3\n\x0b\n\x04\x04\0\x02\t\x12\x03-\x04)\n\x0c\n\x05\x04\0\x02\t\x06\x12\
    \x03-\x04\x12\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03-\x13#\n\x0c\n\x05\x04\
    \0\x02\t\x03\x12\x03-&(\n\x0b\n\x04\x04\0\x02\n\x12\x03.\x04.\n\x0c\n\
    \x05\x04\0\x02\n\x06\x12\x03.\x04\x14\n\x0c\n\x05\x04\0\x02\n\x01\x12\
    \x03.\x15(\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03.+-\n\x0b\n\x04\x04\0\x02\
    \x0b\x12\x030\x04)\n\x0c\n\x05\x04\0\x02\x0b\x06\x12\x030\x04\x12\n\x0c\
    \n\x05\x04\0\x02\x0b\x01\x12\x030\x13#\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\
    \x030&(\n\x0b\n\x04\x04\0\x02\x0c\x12\x031\x040\n\x0c\n\x05\x04\0\x02\
    \x0c\x06\x12\x031\x04\x15\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x031\x16*\n\
    \x0c\n\x05\x04\0\x02\x0c\x03\x12\x031-/\n\x0b\n\x04\x04\0\x02\r\x12\x032\
    \x04\x1f\n\x0c\n\x05\x04\0\x02\r\x06\x12\x032\x04\r\n\x0c\n\x05\x04\0\
    \x02\r\x01\x12\x032\x0e\x19\n\x0c\n\x05\x04\0\x02\r\x03\x12\x032\x1c\x1e\
    \n\x0b\n\x04\x04\0\x02\x0e\x12\x033\x04&\n\x0c\n\x05\x04\0\x02\x0e\x06\
    \x12\x033\x04\x10\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x033\x11\x20\n\x0c\n\
    \x05\x04\0\x02\x0e\x03\x12\x033#%\n\x0b\n\x04\x04\0\x02\x0f\x12\x034\x04\
    -\n\x0c\n\x05\x04\0\x02\x0f\x06\x12\x034\x04\x14\n\x0c\n\x05\x04\0\x02\
    \x0f\x01\x12\x034\x15'\n\x0c\n\x05\x04\0\x02\x0f\x03\x12\x034*,\n\x0b\n\
    \x04\x04\0\x02\x10\x12\x035\x040\n\x0c\n\x05\x04\0\x02\x10\x06\x12\x035\
    \x04\x17\n\x0c\n\x05\x04\0\x02\x10\x01\x12\x035\x18*\n\x0c\n\x05\x04\0\
    \x02\x10\x03\x12\x035-/\n\x0b\n\x04\x04\0\x02\x11\x12\x036\x04&\n\x0c\n\
    \x05\x04\0\x02\x11\x06\x12\x036\x04\x11\n\x0c\n\x05\x04\0\x02\x11\x01\
    \x12\x036\x12\x20\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x036#%\n\x0b\n\x04\
    \x04\0\x02\x12\x12\x037\x04-\n\x0c\n\x05\x04\0\x02\x12\x06\x12\x037\x04\
    \x14\n\x0c\n\x05\x04\0\x02\x12\x01\x12\x037\x15'\n\x0c\n\x05\x04\0\x02\
    \x12\x03\x12\x037*,\n\t\n\x02\x04\x01\x12\x03;\02\n\n\n\x03\x04\x01\x01\
    \x12\x03;\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03;\x1d0\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03;\x1d\"\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03;\
    #+\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03;./\n\t\n\x02\x04\x02\x12\x03=\0\
    -\n\n\n\x03\x04\x02\x01\x12\x03=\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03=\x19+\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03=\x19!\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03=\"&\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03=)*\n\n\
    \n\x02\x04\x03\x12\x04?\0C\x01\n\n\n\x03\x04\x03\x01\x12\x03?\x08\x1c\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03@\x02\x16\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03@\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03@\t\x11\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03@\x14\x15\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03A\x02\x16\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03A\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03A\t\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03A\x14\x15\n\x0b\n\x04\x04\x03\x02\x02\x12\x03B\x02\x1d\n\x0c\n\
    \x05\x04\x03\x02\x02\x05\x12\x03B\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03B\t\x18\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03B\x1b\x1c\n\n\
    \n\x02\x04\x04\x12\x04E\0J\x01\n\n\n\x03\x04\x04\x01\x12\x03E\x08\x1c\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03F\x02\x16\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03F\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03F\t\x11\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03F\x14\x15\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x03G\x02\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03G\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03G\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03G\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03H\x02#\n\x0c\n\x05\
    \x04\x04\x02\x02\x06\x12\x03H\x02\x12\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03H\x13\x1e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03H!\"\n\x0b\n\
    \x04\x04\x04\x02\x03\x12\x03I\x02\"\n\x0c\n\x05\x04\x04\x02\x03\x06\x12\
    \x03I\x02\x12\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03I\x13\x1d\n\x0c\n\
    \x05\x04\x04\x02\x03\x03\x12\x03I\x20!\n\t\n\x02\x04\x05\x12\x03L\05\n\n\
    \n\x03\x04\x05\x01\x12\x03L\x08\x1e\n\x0b\n\x04\x04\x05\x02\0\x12\x03L!3\
    \n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03L!)\n\x0c\n\x05\x04\x05\x02\0\x01\
    \x12\x03L*.\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03L12\n\t\n\x02\x04\x06\
    \x12\x03N\08\n\n\n\x03\x04\x06\x01\x12\x03N\x08\x1d\n\x0b\n\x04\x04\x06\
    \x02\0\x12\x03N\x206\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03N\x20&\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03N'1\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03N\
    45\n\n\n\x02\x04\x07\x12\x04P\0S\x01\n\n\n\x03\x04\x07\x01\x12\x03P\x08\
    \x1c\n\x0b\n\x04\x04\x07\x02\0\x12\x03Q\x02\x14\n\x0c\n\x05\x04\x07\x02\
    \0\x06\x12\x03Q\x02\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03Q\x0b\x0f\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03Q\x12\x13\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03R\x02\x17\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03R\x02\x08\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03R\t\x12\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03R\x15\x16\n\n\n\x02\x04\x08\x12\x04U\0X\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03U\x08\x10\n\x0b\n\x04\x04\x08\x02\0\x12\x03V\x02\x11\
    \n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03V\x02\x06\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x03V\x07\x0c\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03V\x0f\x10\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x03W\x02\x15\n\x0c\n\x05\x04\x08\x02\x01\
    \x05\x12\x03W\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03W\t\x10\n\
    \x0c\n\x05\x04\x08\x02\x01\x03\x12\x03W\x13\x14\n\n\n\x02\x04\t\x12\x04Z\
    \0e\x01\n\n\n\x03\x04\t\x01\x12\x03Z\x08\x18\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03[\x02\x17\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03[\x02\x08\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x03[\t\x12\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03[\x15\
    \x16\n\x0b\n\x04\x04\t\x02\x01\x12\x03\\\x02\x15\n\x0c\n\x05\x04\t\x02\
    \x01\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03\\\t\x10\
    \n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03\\\x13\x14\n\x0c\n\x04\x04\t\x03\0\
    \x12\x04^\x02a\x03\n\x0c\n\x05\x04\t\x03\0\x01\x12\x03^\n\x13\n\r\n\x06\
    \x04\t\x03\0\x02\0\x12\x03_\x04\x15\n\x0e\n\x07\x04\t\x03\0\x02\0\x05\
    \x12\x03_\x04\t\n\x0e\n\x07\x04\t\x03\0\x02\0\x01\x12\x03_\n\x10\n\x0e\n\
    \x07\x04\t\x03\0\x02\0\x03\x12\x03_\x13\x14\n\r\n\x06\x04\t\x03\0\x02\
    \x01\x12\x03`\x04\x14\n\x0e\n\x07\x04\t\x03\0\x02\x01\x05\x12\x03`\x04\t\
    \n\x0e\n\x07\x04\t\x03\0\x02\x01\x01\x12\x03`\n\x0f\n\x0e\n\x07\x04\t\
    \x03\0\x02\x01\x03\x12\x03`\x12\x13\n\x0b\n\x04\x04\t\x02\x02\x12\x03c\
    \x02\x1b\n\x0c\n\x05\x04\t\x02\x02\x06\x12\x03c\x02\x0b\n\x0c\n\x05\x04\
    \t\x02\x02\x01\x12\x03c\x0c\x16\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03c\
    \x19\x1a\n\x0b\n\x04\x04\t\x02\x03\x12\x03d\x02\x17\n\x0c\n\x05\x04\t\
    \x02\x03\x05\x12\x03d\x02\x08\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03d\t\
    \x12\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03d\x15\x16\n\n\n\x02\x04\n\x12\
    \x04g\0j\x01\n\n\n\x03\x04\n\x01\x12\x03g\x08\x16\n\x0b\n\x04\x04\n\x02\
    \0\x12\x03h\x02\x16\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03h\x02\x08\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x03h\t\x11\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03h\
    \x14\x15\n\x0b\n\x04\x04\n\x02\x01\x12\x03i\x02\x18\n\x0c\n\x05\x04\n\
    \x02\x01\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03i\t\
    \x13\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03i\x16\x17\n\n\n\x02\x04\x0b\
    \x12\x04l\0t\x01\n\n\n\x03\x04\x0b\x01\x12\x03l\x08\x18\n\x0c\n\x04\x04\
    \x0b\x04\0\x12\x04m\x02p\x03\n\x0c\n\x05\x04\x0b\x04\0\x01\x12\x03m\x07\
    \x13\n\r\n\x06\x04\x0b\x04\0\x02\0\x12\x03n\x04\x11\n\x0e\n\x07\x04\x0b\
    \x04\0\x02\0\x01\x12\x03n\x04\x0c\n\x0e\n\x07\x04\x0b\x04\0\x02\0\x02\
    \x12\x03n\x0f\x10\n\r\n\x06\x04\x0b\x04\0\x02\x01\x12\x03o\x04\x13\n\x0e\
    \n\x07\x04\x0b\x04\0\x02\x01\x01\x12\x03o\x04\x0e\n\x0e\n\x07\x04\x0b\
    \x04\0\x02\x01\x02\x12\x03o\x11\x12\n\x0b\n\x04\x04\x0b\x02\0\x12\x03r\
    \x02\x18\n\x0c\n\x05\x04\x0b\x02\0\x06\x12\x03r\x02\x0e\n\x0c\n\x05\x04\
    \x0b\x02\0\x01\x12\x03r\x0f\x13\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03r\
    \x16\x17\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03s\x02\x12\n\x0c\n\x05\x04\
    \x0b\x02\x01\x05\x12\x03s\x02\x08\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\
    \x03s\t\r\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03s\x10\x11\n\t\n\x02\x04\
    \x0c\x12\x03v\0\x19\n\n\n\x03\x04\x0c\x01\x12\x03v\x08\x16\n\n\n\x02\x04\
    \r\x12\x04x\0{\x01\n\n\n\x03\x04\r\x01\x12\x03x\x08\x19\n\x0b\n\x04\x04\
    \r\x02\0\x12\x03y\x02\x15\n\x0c\n\x05\x04\r\x02\0\x05\x12\x03y\x02\x08\n\
    \x0c\n\x05\x04\r\x02\0\x01\x12\x03y\t\x10\n\x0c\n\x05\x04\r\x02\0\x03\
    \x12\x03y\x13\x14\n\x0b\n\x04\x04\r\x02\x01\x12\x03z\x02\x13\n\x0c\n\x05\
    \x04\r\x02\x01\x05\x12\x03z\x02\x06\n\x0c\n\x05\x04\r\x02\x01\x01\x12\
    \x03z\x07\x0e\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03z\x11\x12\n\t\n\x02\
    \x04\x0e\x12\x03}\0\x14\n\n\n\x03\x04\x0e\x01\x12\x03}\x08\x11\n\x0b\n\
    \x02\x04\x0f\x12\x05~\0\x81\x01\x01\n\n\n\x03\x04\x0f\x01\x12\x03~\x08\
    \x14\n\x0b\n\x04\x04\x0f\x02\0\x12\x03\x7f\x02\x10\n\x0c\n\x05\x04\x0f\
    \x02\0\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03\x7f\
    \t\x0b\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03\x7f\x0e\x0f\n\x0c\n\x04\x04\
    \x0f\x02\x01\x12\x04\x80\x01\x02\x13\n\r\n\x05\x04\x0f\x02\x01\x05\x12\
    \x04\x80\x01\x02\x06\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\x80\x01\x07\
    \x0e\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x80\x01\x11\x12\n\n\n\x02\x04\
    \x10\x12\x04\x83\x01\0\x1b\n\x0b\n\x03\x04\x10\x01\x12\x04\x83\x01\x08\
    \x18\n\x0c\n\x02\x04\x11\x12\x06\x84\x01\0\x87\x01\x01\n\x0b\n\x03\x04\
    \x11\x01\x12\x04\x84\x01\x08\x1b\n\x0c\n\x04\x04\x11\x02\0\x12\x04\x85\
    \x01\x02\x14\n\r\n\x05\x04\x11\x02\0\x06\x12\x04\x85\x01\x02\n\n\r\n\x05\
    \x04\x11\x02\0\x01\x12\x04\x85\x01\x0b\x0f\n\r\n\x05\x04\x11\x02\0\x03\
    \x12\x04\x85\x01\x12\x13\n\x0c\n\x04\x04\x11\x02\x01\x12\x04\x86\x01\x02\
    \x10\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\x86\x01\x02\x08\n\r\n\x05\x04\
    \x11\x02\x01\x01\x12\x04\x86\x01\t\x0b\n\r\n\x05\x04\x11\x02\x01\x03\x12\
    \x04\x86\x01\x0e\x0f\n\n\n\x02\x04\x12\x12\x04\x89\x01\0\x18\n\x0b\n\x03\
    \x04\x12\x01\x12\x04\x89\x01\x08\x15\n\x0c\n\x02\x04\x13\x12\x06\x8a\x01\
    \0\x8d\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\x8a\x01\x08\x18\n\x0c\n\
    \x04\x04\x13\x02\0\x12\x04\x8b\x01\x02\x12\n\r\n\x05\x04\x13\x02\0\x05\
    \x12\x04\x8b\x01\x02\x08\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\x8b\x01\t\r\
    \n\r\n\x05\x04\x13\x02\0\x03\x12\x04\x8b\x01\x10\x11\n\x0c\n\x04\x04\x13\
    \x02\x01\x12\x04\x8c\x01\x02\x13\n\r\n\x05\x04\x13\x02\x01\x05\x12\x04\
    \x8c\x01\x02\x06\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\x8c\x01\x07\x0e\n\
    \r\n\x05\x04\x13\x02\x01\x03\x12\x04\x8c\x01\x11\x12\n\x0c\n\x02\x04\x14\
    \x12\x06\x8f\x01\0\x91\x01\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\x8f\x01\
    \x08\x16\n\x0c\n\x04\x04\x14\x02\0\x12\x04\x90\x01\x02\x13\n\r\n\x05\x04\
    \x14\x02\0\x05\x12\x04\x90\x01\x02\x06\n\r\n\x05\x04\x14\x02\0\x01\x12\
    \x04\x90\x01\x07\x0e\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\x90\x01\x11\x12\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
