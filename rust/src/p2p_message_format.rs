// This file is generated by rust-protobuf 3.0.0-alpha.8. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `p2p_message_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_8;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.Event)
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:p2p.Event.event_id)
    pub event_id: ::protobuf::EnumOrUnknown<EventType>,
    // message oneof groups
    pub data: ::std::option::Option<event::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.Event.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.Event.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // .p2p.ChargingStatusData charging_status_data = 2;

    pub fn charging_status_data(&self) -> &ChargingStatusData {
        match self.data {
            ::std::option::Option::Some(event::Data::charging_status_data(ref v)) => v,
            _ => <ChargingStatusData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_charging_status_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_charging_status_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::charging_status_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_charging_status_data(&mut self, v: ChargingStatusData) {
        self.data = ::std::option::Option::Some(event::Data::charging_status_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_charging_status_data(&mut self) -> &mut ChargingStatusData {
        if let ::std::option::Option::Some(event::Data::charging_status_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::charging_status_data(ChargingStatusData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::charging_status_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_charging_status_data(&mut self) -> ChargingStatusData {
        if self.has_charging_status_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::charging_status_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ChargingStatusData::new()
        }
    }

    // .p2p.ServiceAckData service_ack_data = 3;

    pub fn service_ack_data(&self) -> &ServiceAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::service_ack_data(ref v)) => v,
            _ => <ServiceAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_service_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::service_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_ack_data(&mut self, v: ServiceAckData) {
        self.data = ::std::option::Option::Some(event::Data::service_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_ack_data(&mut self) -> &mut ServiceAckData {
        if let ::std::option::Option::Some(event::Data::service_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::service_ack_data(ServiceAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::service_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_ack_data(&mut self) -> ServiceAckData {
        if self.has_service_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::service_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceAckData::new()
        }
    }

    // .p2p.ServiceRequestedData service_requested_data = 4;

    pub fn service_requested_data(&self) -> &ServiceRequestedData {
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_data(ref v)) => v,
            _ => <ServiceRequestedData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_service_requested_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_requested_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_requested_data(&mut self, v: ServiceRequestedData) {
        self.data = ::std::option::Option::Some(event::Data::service_requested_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_requested_data(&mut self) -> &mut ServiceRequestedData {
        if let ::std::option::Option::Some(event::Data::service_requested_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::service_requested_data(ServiceRequestedData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_requested_data(&mut self) -> ServiceRequestedData {
        if self.has_service_requested_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::service_requested_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceRequestedData::new()
        }
    }

    // .p2p.ServiceDeliveredData service_delivered_data = 5;

    pub fn service_delivered_data(&self) -> &ServiceDeliveredData {
        match self.data {
            ::std::option::Option::Some(event::Data::service_delivered_data(ref v)) => v,
            _ => <ServiceDeliveredData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_service_delivered_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_delivered_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::service_delivered_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_delivered_data(&mut self, v: ServiceDeliveredData) {
        self.data = ::std::option::Option::Some(event::Data::service_delivered_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_delivered_data(&mut self) -> &mut ServiceDeliveredData {
        if let ::std::option::Option::Some(event::Data::service_delivered_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::service_delivered_data(ServiceDeliveredData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::service_delivered_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_delivered_data(&mut self) -> ServiceDeliveredData {
        if self.has_service_delivered_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::service_delivered_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceDeliveredData::new()
        }
    }

    // .p2p.StopChargeData stop_charge_data = 6;

    pub fn stop_charge_data(&self) -> &StopChargeData {
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_data(ref v)) => v,
            _ => <StopChargeData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop_charge_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_data(&mut self, v: StopChargeData) {
        self.data = ::std::option::Option::Some(event::Data::stop_charge_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_data(&mut self) -> &mut StopChargeData {
        if let ::std::option::Option::Some(event::Data::stop_charge_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::stop_charge_data(StopChargeData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_data(&mut self) -> StopChargeData {
        if self.has_stop_charge_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::stop_charge_data(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeData::new()
        }
    }

    // .p2p.StopChargeResponseData stop_charge_resp_data = 7;

    pub fn stop_charge_resp_data(&self) -> &StopChargeResponseData {
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_resp_data(ref v)) => v,
            _ => <StopChargeResponseData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stop_charge_resp_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_stop_charge_resp_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_resp_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stop_charge_resp_data(&mut self, v: StopChargeResponseData) {
        self.data = ::std::option::Option::Some(event::Data::stop_charge_resp_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stop_charge_resp_data(&mut self) -> &mut StopChargeResponseData {
        if let ::std::option::Option::Some(event::Data::stop_charge_resp_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::stop_charge_resp_data(StopChargeResponseData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::stop_charge_resp_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stop_charge_resp_data(&mut self) -> StopChargeResponseData {
        if self.has_stop_charge_resp_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::stop_charge_resp_data(v)) => v,
                _ => panic!(),
            }
        } else {
            StopChargeResponseData::new()
        }
    }

    // .p2p.IdentityChallengeData identity_challenge_data = 8;

    pub fn identity_challenge_data(&self) -> &IdentityChallengeData {
        match self.data {
            ::std::option::Option::Some(event::Data::identity_challenge_data(ref v)) => v,
            _ => <IdentityChallengeData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_identity_challenge_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_identity_challenge_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::identity_challenge_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_identity_challenge_data(&mut self, v: IdentityChallengeData) {
        self.data = ::std::option::Option::Some(event::Data::identity_challenge_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_identity_challenge_data(&mut self) -> &mut IdentityChallengeData {
        if let ::std::option::Option::Some(event::Data::identity_challenge_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::identity_challenge_data(IdentityChallengeData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::identity_challenge_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_identity_challenge_data(&mut self) -> IdentityChallengeData {
        if self.has_identity_challenge_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::identity_challenge_data(v)) => v,
                _ => panic!(),
            }
        } else {
            IdentityChallengeData::new()
        }
    }

    // .p2p.IdentityResponseData identity_response_data = 9;

    pub fn identity_response_data(&self) -> &IdentityResponseData {
        match self.data {
            ::std::option::Option::Some(event::Data::identity_response_data(ref v)) => v,
            _ => <IdentityResponseData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_identity_response_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_identity_response_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::identity_response_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_identity_response_data(&mut self, v: IdentityResponseData) {
        self.data = ::std::option::Option::Some(event::Data::identity_response_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_identity_response_data(&mut self) -> &mut IdentityResponseData {
        if let ::std::option::Option::Some(event::Data::identity_response_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::identity_response_data(IdentityResponseData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::identity_response_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_identity_response_data(&mut self) -> IdentityResponseData {
        if self.has_identity_response_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::identity_response_data(v)) => v,
                _ => panic!(),
            }
        } else {
            IdentityResponseData::new()
        }
    }

    // .p2p.ChainEventData chain_event_data = 10;

    pub fn chain_event_data(&self) -> &ChainEventData {
        match self.data {
            ::std::option::Option::Some(event::Data::chain_event_data(ref v)) => v,
            _ => <ChainEventData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_chain_event_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_chain_event_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::chain_event_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chain_event_data(&mut self, v: ChainEventData) {
        self.data = ::std::option::Option::Some(event::Data::chain_event_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chain_event_data(&mut self) -> &mut ChainEventData {
        if let ::std::option::Option::Some(event::Data::chain_event_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::chain_event_data(ChainEventData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::chain_event_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chain_event_data(&mut self) -> ChainEventData {
        if self.has_chain_event_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::chain_event_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ChainEventData::new()
        }
    }

    // .p2p.EmitShowInfoData emit_show_info_data = 11;

    pub fn emit_show_info_data(&self) -> &EmitShowInfoData {
        match self.data {
            ::std::option::Option::Some(event::Data::emit_show_info_data(ref v)) => v,
            _ => <EmitShowInfoData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_emit_show_info_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_emit_show_info_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::emit_show_info_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_emit_show_info_data(&mut self, v: EmitShowInfoData) {
        self.data = ::std::option::Option::Some(event::Data::emit_show_info_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_emit_show_info_data(&mut self) -> &mut EmitShowInfoData {
        if let ::std::option::Option::Some(event::Data::emit_show_info_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::emit_show_info_data(EmitShowInfoData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::emit_show_info_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_emit_show_info_data(&mut self) -> EmitShowInfoData {
        if self.has_emit_show_info_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::emit_show_info_data(v)) => v,
                _ => panic!(),
            }
        } else {
            EmitShowInfoData::new()
        }
    }

    // .p2p.GetBalanceAckData get_balance_ack_data = 12;

    pub fn get_balance_ack_data(&self) -> &GetBalanceAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::get_balance_ack_data(ref v)) => v,
            _ => <GetBalanceAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_balance_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_balance_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::get_balance_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_balance_ack_data(&mut self, v: GetBalanceAckData) {
        self.data = ::std::option::Option::Some(event::Data::get_balance_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_balance_ack_data(&mut self) -> &mut GetBalanceAckData {
        if let ::std::option::Option::Some(event::Data::get_balance_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::get_balance_ack_data(GetBalanceAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::get_balance_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_balance_ack_data(&mut self) -> GetBalanceAckData {
        if self.has_get_balance_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::get_balance_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetBalanceAckData::new()
        }
    }

    // .p2p.GetPKAckData get_pk_ack_data = 13;

    pub fn get_pk_ack_data(&self) -> &GetPKAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::get_pk_ack_data(ref v)) => v,
            _ => <GetPKAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_pk_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_pk_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::get_pk_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_pk_ack_data(&mut self, v: GetPKAckData) {
        self.data = ::std::option::Option::Some(event::Data::get_pk_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_pk_ack_data(&mut self) -> &mut GetPKAckData {
        if let ::std::option::Option::Some(event::Data::get_pk_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::get_pk_ack_data(GetPKAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::get_pk_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_pk_ack_data(&mut self) -> GetPKAckData {
        if self.has_get_pk_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::get_pk_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            GetPKAckData::new()
        }
    }

    // .p2p.RePublishDIDAckData republish_ack_data = 14;

    pub fn republish_ack_data(&self) -> &RePublishDIDAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::republish_ack_data(ref v)) => v,
            _ => <RePublishDIDAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_republish_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_republish_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::republish_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_republish_ack_data(&mut self, v: RePublishDIDAckData) {
        self.data = ::std::option::Option::Some(event::Data::republish_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_republish_ack_data(&mut self) -> &mut RePublishDIDAckData {
        if let ::std::option::Option::Some(event::Data::republish_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::republish_ack_data(RePublishDIDAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::republish_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_republish_ack_data(&mut self) -> RePublishDIDAckData {
        if self.has_republish_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::republish_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            RePublishDIDAckData::new()
        }
    }

    // .p2p.ReconnectAckData reconnect_ack_data = 15;

    pub fn reconnect_ack_data(&self) -> &ReconnectAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::reconnect_ack_data(ref v)) => v,
            _ => <ReconnectAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_reconnect_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_reconnect_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::reconnect_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reconnect_ack_data(&mut self, v: ReconnectAckData) {
        self.data = ::std::option::Option::Some(event::Data::reconnect_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reconnect_ack_data(&mut self) -> &mut ReconnectAckData {
        if let ::std::option::Option::Some(event::Data::reconnect_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::reconnect_ack_data(ReconnectAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::reconnect_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reconnect_ack_data(&mut self) -> ReconnectAckData {
        if self.has_reconnect_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::reconnect_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ReconnectAckData::new()
        }
    }

    // .p2p.ServiceRequestedAckData service_requested_ack_data = 16;

    pub fn service_requested_ack_data(&self) -> &ServiceRequestedAckData {
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_ack_data(ref v)) => v,
            _ => <ServiceRequestedAckData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_service_requested_ack_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_service_requested_ack_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_ack_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_requested_ack_data(&mut self, v: ServiceRequestedAckData) {
        self.data = ::std::option::Option::Some(event::Data::service_requested_ack_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_requested_ack_data(&mut self) -> &mut ServiceRequestedAckData {
        if let ::std::option::Option::Some(event::Data::service_requested_ack_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(event::Data::service_requested_ack_data(ServiceRequestedAckData::new()));
        }
        match self.data {
            ::std::option::Option::Some(event::Data::service_requested_ack_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_requested_ack_data(&mut self) -> ServiceRequestedAckData {
        if self.has_service_requested_ack_data() {
            match self.data.take() {
                ::std::option::Option::Some(event::Data::service_requested_ack_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ServiceRequestedAckData::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_id",
            |m: &Event| { &m.event_id },
            |m: &mut Event| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ChargingStatusData>(
            "charging_status_data",
            Event::has_charging_status_data,
            Event::charging_status_data,
            Event::mut_charging_status_data,
            Event::set_charging_status_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServiceAckData>(
            "service_ack_data",
            Event::has_service_ack_data,
            Event::service_ack_data,
            Event::mut_service_ack_data,
            Event::set_service_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServiceRequestedData>(
            "service_requested_data",
            Event::has_service_requested_data,
            Event::service_requested_data,
            Event::mut_service_requested_data,
            Event::set_service_requested_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServiceDeliveredData>(
            "service_delivered_data",
            Event::has_service_delivered_data,
            Event::service_delivered_data,
            Event::mut_service_delivered_data,
            Event::set_service_delivered_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StopChargeData>(
            "stop_charge_data",
            Event::has_stop_charge_data,
            Event::stop_charge_data,
            Event::mut_stop_charge_data,
            Event::set_stop_charge_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StopChargeResponseData>(
            "stop_charge_resp_data",
            Event::has_stop_charge_resp_data,
            Event::stop_charge_resp_data,
            Event::mut_stop_charge_resp_data,
            Event::set_stop_charge_resp_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, IdentityChallengeData>(
            "identity_challenge_data",
            Event::has_identity_challenge_data,
            Event::identity_challenge_data,
            Event::mut_identity_challenge_data,
            Event::set_identity_challenge_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, IdentityResponseData>(
            "identity_response_data",
            Event::has_identity_response_data,
            Event::identity_response_data,
            Event::mut_identity_response_data,
            Event::set_identity_response_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ChainEventData>(
            "chain_event_data",
            Event::has_chain_event_data,
            Event::chain_event_data,
            Event::mut_chain_event_data,
            Event::set_chain_event_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EmitShowInfoData>(
            "emit_show_info_data",
            Event::has_emit_show_info_data,
            Event::emit_show_info_data,
            Event::mut_emit_show_info_data,
            Event::set_emit_show_info_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetBalanceAckData>(
            "get_balance_ack_data",
            Event::has_get_balance_ack_data,
            Event::get_balance_ack_data,
            Event::mut_get_balance_ack_data,
            Event::set_get_balance_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetPKAckData>(
            "get_pk_ack_data",
            Event::has_get_pk_ack_data,
            Event::get_pk_ack_data,
            Event::mut_get_pk_ack_data,
            Event::set_get_pk_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RePublishDIDAckData>(
            "republish_ack_data",
            Event::has_republish_ack_data,
            Event::republish_ack_data,
            Event::mut_republish_ack_data,
            Event::set_republish_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ReconnectAckData>(
            "reconnect_ack_data",
            Event::has_reconnect_ack_data,
            Event::reconnect_ack_data,
            Event::mut_reconnect_ack_data,
            Event::set_reconnect_ack_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServiceRequestedAckData>(
            "service_requested_ack_data",
            Event::has_service_requested_ack_data,
            Event::service_requested_ack_data,
            Event::mut_service_requested_ack_data,
            Event::set_service_requested_ack_data,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Event>(
            "Event",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        if let Some(event::Data::charging_status_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::service_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::service_requested_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::service_delivered_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::stop_charge_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::stop_charge_resp_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::identity_challenge_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::identity_response_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::chain_event_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::emit_show_info_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::get_balance_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::get_pk_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::republish_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::reconnect_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(event::Data::service_requested_ack_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                8 => {
                    self.event_id = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = ::std::option::Option::Some(event::Data::charging_status_data(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(event::Data::service_ack_data(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(event::Data::service_requested_data(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(event::Data::service_delivered_data(is.read_message()?));
                },
                50 => {
                    self.data = ::std::option::Option::Some(event::Data::stop_charge_data(is.read_message()?));
                },
                58 => {
                    self.data = ::std::option::Option::Some(event::Data::stop_charge_resp_data(is.read_message()?));
                },
                66 => {
                    self.data = ::std::option::Option::Some(event::Data::identity_challenge_data(is.read_message()?));
                },
                74 => {
                    self.data = ::std::option::Option::Some(event::Data::identity_response_data(is.read_message()?));
                },
                82 => {
                    self.data = ::std::option::Option::Some(event::Data::chain_event_data(is.read_message()?));
                },
                90 => {
                    self.data = ::std::option::Option::Some(event::Data::emit_show_info_data(is.read_message()?));
                },
                98 => {
                    self.data = ::std::option::Option::Some(event::Data::get_balance_ack_data(is.read_message()?));
                },
                106 => {
                    self.data = ::std::option::Option::Some(event::Data::get_pk_ack_data(is.read_message()?));
                },
                114 => {
                    self.data = ::std::option::Option::Some(event::Data::republish_ack_data(is.read_message()?));
                },
                122 => {
                    self.data = ::std::option::Option::Some(event::Data::reconnect_ack_data(is.read_message()?));
                },
                130 => {
                    self.data = ::std::option::Option::Some(event::Data::service_requested_ack_data(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::CHARGING_STATUS) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.event_id);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::charging_status_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::service_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::service_requested_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::service_delivered_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::stop_charge_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::stop_charge_resp_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::identity_challenge_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::identity_response_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::chain_event_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::emit_show_info_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::get_balance_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::get_pk_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::republish_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::reconnect_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &event::Data::service_requested_ack_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event_id != ::protobuf::EnumOrUnknown::new(EventType::CHARGING_STATUS) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event_id))?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &event::Data::charging_status_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &event::Data::service_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &event::Data::service_requested_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &event::Data::service_delivered_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &event::Data::stop_charge_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &event::Data::stop_charge_resp_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &event::Data::identity_challenge_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &event::Data::identity_response_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &event::Data::chain_event_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &event::Data::emit_show_info_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &event::Data::get_balance_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &event::Data::get_pk_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &event::Data::republish_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &event::Data::reconnect_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &event::Data::service_requested_ack_data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Event {
        Event::new()
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            event_id: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.event_id = ::protobuf::EnumOrUnknown::new(EventType::CHARGING_STATUS);
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Event`
pub mod event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:p2p.Event.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:p2p.Event.charging_status_data)
        charging_status_data(super::ChargingStatusData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.service_ack_data)
        service_ack_data(super::ServiceAckData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.service_requested_data)
        service_requested_data(super::ServiceRequestedData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.service_delivered_data)
        service_delivered_data(super::ServiceDeliveredData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.stop_charge_data)
        stop_charge_data(super::StopChargeData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.stop_charge_resp_data)
        stop_charge_resp_data(super::StopChargeResponseData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.identity_challenge_data)
        identity_challenge_data(super::IdentityChallengeData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.identity_response_data)
        identity_response_data(super::IdentityResponseData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.chain_event_data)
        chain_event_data(super::ChainEventData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.emit_show_info_data)
        emit_show_info_data(super::EmitShowInfoData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.get_balance_ack_data)
        get_balance_ack_data(super::GetBalanceAckData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.get_pk_ack_data)
        get_pk_ack_data(super::GetPKAckData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.republish_ack_data)
        republish_ack_data(super::RePublishDIDAckData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.reconnect_ack_data)
        reconnect_ack_data(super::ReconnectAckData),
        // @@protoc_insertion_point(oneof_field:p2p.Event.service_requested_ack_data)
        service_requested_ack_data(super::ServiceRequestedAckData),
    }

    impl ::protobuf::Oneof for Data {
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ChargingStatusData)
pub struct ChargingStatusData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.progress)
    pub progress: f32,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.charging_period)
    pub charging_period: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.energy_consumption)
    pub energy_consumption: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChargingStatusData.token_spent)
    pub token_spent: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ChargingStatusData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ChargingStatusData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChargingStatusData {
    fn default() -> &'a ChargingStatusData {
        <ChargingStatusData as ::protobuf::Message>::default_instance()
    }
}

impl ChargingStatusData {
    pub fn new() -> ChargingStatusData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "progress",
            |m: &ChargingStatusData| { &m.progress },
            |m: &mut ChargingStatusData| { &mut m.progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "charging_period",
            |m: &ChargingStatusData| { &m.charging_period },
            |m: &mut ChargingStatusData| { &mut m.charging_period },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "energy_consumption",
            |m: &ChargingStatusData| { &m.energy_consumption },
            |m: &mut ChargingStatusData| { &mut m.energy_consumption },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_spent",
            |m: &ChargingStatusData| { &m.token_spent },
            |m: &mut ChargingStatusData| { &mut m.token_spent },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChargingStatusData>(
            "ChargingStatusData",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for ChargingStatusData {
    const NAME: &'static str = "ChargingStatusData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                13 => {
                    self.progress = is.read_float()?;
                },
                18 => {
                    self.charging_period = is.read_string()?;
                },
                26 => {
                    self.energy_consumption = is.read_string()?;
                },
                34 => {
                    self.token_spent = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.progress != 0. {
            my_size += 5;
        }
        if !self.charging_period.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.charging_period);
        }
        if !self.energy_consumption.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.energy_consumption);
        }
        if !self.token_spent.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token_spent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.progress != 0. {
            os.write_float(1, self.progress)?;
        }
        if !self.charging_period.is_empty() {
            os.write_string(2, &self.charging_period)?;
        }
        if !self.energy_consumption.is_empty() {
            os.write_string(3, &self.energy_consumption)?;
        }
        if !self.token_spent.is_empty() {
            os.write_string(4, &self.token_spent)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ChargingStatusData {
        ChargingStatusData::new()
    }

    fn default_instance() -> &'static ChargingStatusData {
        static instance: ChargingStatusData = ChargingStatusData {
            progress: 0.,
            charging_period: ::std::string::String::new(),
            energy_consumption: ::std::string::String::new(),
            token_spent: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChargingStatusData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }
}

impl ::protobuf::Clear for ChargingStatusData {
    fn clear(&mut self) {
        self.progress = 0.;
        self.charging_period.clear();
        self.energy_consumption.clear();
        self.token_spent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ChargingStatusData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChargingStatusData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceAckData)
pub struct ServiceAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ServiceAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceAckData {
    fn default() -> &'a ServiceAckData {
        <ServiceAckData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceAckData {
    pub fn new() -> ServiceAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ServiceAckData| { &m.resp },
            |m: &mut ServiceAckData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceAckData>(
            "ServiceAckData",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceAckData {
    const NAME: &'static str = "ServiceAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ServiceAckData {
        ServiceAckData::new()
    }

    fn default_instance() -> &'static ServiceAckData {
        static instance: ServiceAckData = ServiceAckData {
            resp: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }
}

impl ::protobuf::Clear for ServiceAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ServiceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceRequestedAckData)
pub struct ServiceRequestedAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceRequestedAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedAckData.wait_time)
    pub wait_time: i64,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceRequestedAckData {
    fn default() -> &'a ServiceRequestedAckData {
        <ServiceRequestedAckData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceRequestedAckData {
    pub fn new() -> ServiceRequestedAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ServiceRequestedAckData| { &m.resp },
            |m: &mut ServiceRequestedAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wait_time",
            |m: &ServiceRequestedAckData| { &m.wait_time },
            |m: &mut ServiceRequestedAckData| { &mut m.wait_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceRequestedAckData>(
            "ServiceRequestedAckData",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceRequestedAckData {
    const NAME: &'static str = "ServiceRequestedAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                16 => {
                    self.wait_time = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.wait_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.wait_time, ::protobuf::rt::WireType::Varint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.wait_time != 0 {
            os.write_int64(2, self.wait_time)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ServiceRequestedAckData {
        ServiceRequestedAckData::new()
    }

    fn default_instance() -> &'static ServiceRequestedAckData {
        static instance: ServiceRequestedAckData = ServiceRequestedAckData {
            resp: ::protobuf::MessageField::none(),
            wait_time: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceRequestedAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }
}

impl ::protobuf::Clear for ServiceRequestedAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.wait_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ServiceRequestedAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceRequestedAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceRequestedData)
pub struct ServiceRequestedData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.consumer)
    pub consumer: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.provider)
    pub provider: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceRequestedData.token_deposited)
    pub token_deposited: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ServiceRequestedData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceRequestedData {
    fn default() -> &'a ServiceRequestedData {
        <ServiceRequestedData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceRequestedData {
    pub fn new() -> ServiceRequestedData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer",
            |m: &ServiceRequestedData| { &m.consumer },
            |m: &mut ServiceRequestedData| { &mut m.consumer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provider",
            |m: &ServiceRequestedData| { &m.provider },
            |m: &mut ServiceRequestedData| { &mut m.provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_deposited",
            |m: &ServiceRequestedData| { &m.token_deposited },
            |m: &mut ServiceRequestedData| { &mut m.token_deposited },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceRequestedData>(
            "ServiceRequestedData",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceRequestedData {
    const NAME: &'static str = "ServiceRequestedData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    self.consumer = is.read_string()?;
                },
                18 => {
                    self.provider = is.read_string()?;
                },
                26 => {
                    self.token_deposited = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if !self.token_deposited.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.token_deposited);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if !self.token_deposited.is_empty() {
            os.write_string(3, &self.token_deposited)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ServiceRequestedData {
        ServiceRequestedData::new()
    }

    fn default_instance() -> &'static ServiceRequestedData {
        static instance: ServiceRequestedData = ServiceRequestedData {
            consumer: ::std::string::String::new(),
            provider: ::std::string::String::new(),
            token_deposited: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceRequestedData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }
}

impl ::protobuf::Clear for ServiceRequestedData {
    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.token_deposited.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ServiceRequestedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceRequestedData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ServiceDeliveredData)
pub struct ServiceDeliveredData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.consumer)
    pub consumer: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.provider)
    pub provider: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.refund_info)
    pub refund_info: ::protobuf::MessageField<TransactionValue>,
    // @@protoc_insertion_point(field:p2p.ServiceDeliveredData.spent_info)
    pub spent_info: ::protobuf::MessageField<TransactionValue>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ServiceDeliveredData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ServiceDeliveredData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceDeliveredData {
    fn default() -> &'a ServiceDeliveredData {
        <ServiceDeliveredData as ::protobuf::Message>::default_instance()
    }
}

impl ServiceDeliveredData {
    pub fn new() -> ServiceDeliveredData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "consumer",
            |m: &ServiceDeliveredData| { &m.consumer },
            |m: &mut ServiceDeliveredData| { &mut m.consumer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provider",
            |m: &ServiceDeliveredData| { &m.provider },
            |m: &mut ServiceDeliveredData| { &mut m.provider },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionValue>(
            "refund_info",
            |m: &ServiceDeliveredData| { &m.refund_info },
            |m: &mut ServiceDeliveredData| { &mut m.refund_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TransactionValue>(
            "spent_info",
            |m: &ServiceDeliveredData| { &m.spent_info },
            |m: &mut ServiceDeliveredData| { &mut m.spent_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceDeliveredData>(
            "ServiceDeliveredData",
            5,
            fields,
        )
    }
}

impl ::protobuf::Message for ServiceDeliveredData {
    const NAME: &'static str = "ServiceDeliveredData";

    fn is_initialized(&self) -> bool {
        for v in &self.refund_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.spent_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    self.consumer = is.read_string()?;
                },
                18 => {
                    self.provider = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.refund_info)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.spent_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.consumer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.consumer);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        if let Some(v) = self.refund_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.spent_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.consumer.is_empty() {
            os.write_string(1, &self.consumer)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        if let Some(v) = self.refund_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.spent_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ServiceDeliveredData {
        ServiceDeliveredData::new()
    }

    fn default_instance() -> &'static ServiceDeliveredData {
        static instance: ServiceDeliveredData = ServiceDeliveredData {
            consumer: ::std::string::String::new(),
            provider: ::std::string::String::new(),
            refund_info: ::protobuf::MessageField::none(),
            spent_info: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceDeliveredData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 5)
    }
}

impl ::protobuf::Clear for ServiceDeliveredData {
    fn clear(&mut self) {
        self.consumer.clear();
        self.provider.clear();
        self.refund_info.clear();
        self.spent_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ServiceDeliveredData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceDeliveredData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.StopChargeResponseData)
pub struct StopChargeResponseData {
    // message fields
    // @@protoc_insertion_point(field:p2p.StopChargeResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.StopChargeResponseData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.StopChargeResponseData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopChargeResponseData {
    fn default() -> &'a StopChargeResponseData {
        <StopChargeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeResponseData {
    pub fn new() -> StopChargeResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &StopChargeResponseData| { &m.resp },
            |m: &mut StopChargeResponseData| { &mut m.resp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StopChargeResponseData>(
            "StopChargeResponseData",
            6,
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeResponseData {
    const NAME: &'static str = "StopChargeResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> StopChargeResponseData {
        StopChargeResponseData::new()
    }

    fn default_instance() -> &'static StopChargeResponseData {
        static instance: StopChargeResponseData = StopChargeResponseData {
            resp: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeResponseData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 6)
    }
}

impl ::protobuf::Clear for StopChargeResponseData {
    fn clear(&mut self) {
        self.resp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for StopChargeResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.IdentityChallengeData)
pub struct IdentityChallengeData {
    // message fields
    // @@protoc_insertion_point(field:p2p.IdentityChallengeData.plain_data)
    pub plain_data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.IdentityChallengeData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.IdentityChallengeData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityChallengeData {
    fn default() -> &'a IdentityChallengeData {
        <IdentityChallengeData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityChallengeData {
    pub fn new() -> IdentityChallengeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plain_data",
            |m: &IdentityChallengeData| { &m.plain_data },
            |m: &mut IdentityChallengeData| { &mut m.plain_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IdentityChallengeData>(
            "IdentityChallengeData",
            7,
            fields,
        )
    }
}

impl ::protobuf::Message for IdentityChallengeData {
    const NAME: &'static str = "IdentityChallengeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    self.plain_data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plain_data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plain_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plain_data.is_empty() {
            os.write_string(1, &self.plain_data)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> IdentityChallengeData {
        IdentityChallengeData::new()
    }

    fn default_instance() -> &'static IdentityChallengeData {
        static instance: IdentityChallengeData = IdentityChallengeData {
            plain_data: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentityChallengeData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 7)
    }
}

impl ::protobuf::Clear for IdentityChallengeData {
    fn clear(&mut self) {
        self.plain_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for IdentityChallengeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityChallengeData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.IdentityResponseData)
pub struct IdentityResponseData {
    // message fields
    // @@protoc_insertion_point(field:p2p.IdentityResponseData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.IdentityResponseData.signature)
    pub signature: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.IdentityResponseData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.IdentityResponseData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityResponseData {
    fn default() -> &'a IdentityResponseData {
        <IdentityResponseData as ::protobuf::Message>::default_instance()
    }
}

impl IdentityResponseData {
    pub fn new() -> IdentityResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &IdentityResponseData| { &m.resp },
            |m: &mut IdentityResponseData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &IdentityResponseData| { &m.signature },
            |m: &mut IdentityResponseData| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IdentityResponseData>(
            "IdentityResponseData",
            8,
            fields,
        )
    }
}

impl ::protobuf::Message for IdentityResponseData {
    const NAME: &'static str = "IdentityResponseData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                26 => {
                    self.signature = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> IdentityResponseData {
        IdentityResponseData::new()
    }

    fn default_instance() -> &'static IdentityResponseData {
        static instance: IdentityResponseData = IdentityResponseData {
            resp: ::protobuf::MessageField::none(),
            signature: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IdentityResponseData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 8)
    }
}

impl ::protobuf::Clear for IdentityResponseData {
    fn clear(&mut self) {
        self.resp.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for IdentityResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityResponseData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:p2p.Response.error)
    pub error: bool,
    // @@protoc_insertion_point(field:p2p.Response.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.Response.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.Response.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &Response| { &m.error },
            |m: &mut Response| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &Response| { &m.message },
            |m: &mut Response| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            9,
            fields,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                8 => {
                    self.error = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.error != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.error != false {
            os.write_bool(1, self.error)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            error: false,
            message: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 9)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.error = false;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.TransactionValue)
pub struct TransactionValue {
    // message fields
    // @@protoc_insertion_point(field:p2p.TransactionValue.token_num)
    pub token_num: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.TransactionValue.tx_hash)
    pub tx_hash: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.TransactionValue.time_point)
    pub time_point: ::protobuf::MessageField<transaction_value::TimePoint>,
    // @@protoc_insertion_point(field:p2p.TransactionValue.call_hash)
    pub call_hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.TransactionValue.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.TransactionValue.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionValue {
    fn default() -> &'a TransactionValue {
        <TransactionValue as ::protobuf::Message>::default_instance()
    }
}

impl TransactionValue {
    pub fn new() -> TransactionValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_num",
            |m: &TransactionValue| { &m.token_num },
            |m: &mut TransactionValue| { &mut m.token_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_hash",
            |m: &TransactionValue| { &m.tx_hash },
            |m: &mut TransactionValue| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, transaction_value::TimePoint>(
            "time_point",
            |m: &TransactionValue| { &m.time_point },
            |m: &mut TransactionValue| { &mut m.time_point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "call_hash",
            |m: &TransactionValue| { &m.call_hash },
            |m: &mut TransactionValue| { &mut m.call_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransactionValue>(
            "TransactionValue",
            10,
            fields,
        )
    }
}

impl ::protobuf::Message for TransactionValue {
    const NAME: &'static str = "TransactionValue";

    fn is_initialized(&self) -> bool {
        for v in &self.time_point {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    self.token_num = is.read_string()?;
                },
                18 => {
                    self.tx_hash = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time_point)?;
                },
                34 => {
                    self.call_hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token_num.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token_num);
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tx_hash);
        }
        if let Some(v) = self.time_point.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.call_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.call_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token_num.is_empty() {
            os.write_string(1, &self.token_num)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_string(2, &self.tx_hash)?;
        }
        if let Some(v) = self.time_point.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.call_hash.is_empty() {
            os.write_string(4, &self.call_hash)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> TransactionValue {
        TransactionValue::new()
    }

    fn default_instance() -> &'static TransactionValue {
        static instance: TransactionValue = TransactionValue {
            token_num: ::std::string::String::new(),
            tx_hash: ::std::string::String::new(),
            time_point: ::protobuf::MessageField::none(),
            call_hash: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransactionValue {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 10)
    }
}

impl ::protobuf::Clear for TransactionValue {
    fn clear(&mut self) {
        self.token_num.clear();
        self.tx_hash.clear();
        self.time_point.clear();
        self.call_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for TransactionValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionValue {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TransactionValue`
pub mod transaction_value {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:p2p.TransactionValue.TimePoint)
    pub struct TimePoint {
        // message fields
        // @@protoc_insertion_point(field:p2p.TransactionValue.TimePoint.height)
        pub height: i64,
        // @@protoc_insertion_point(field:p2p.TransactionValue.TimePoint.index)
        pub index: i64,
        // special fields
        // @@protoc_insertion_point(special_field:p2p.TransactionValue.TimePoint.unknown_fields)
        pub unknown_fields: ::protobuf::UnknownFields,
        // @@protoc_insertion_point(special_field:p2p.TransactionValue.TimePoint.cached_size)
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a TimePoint {
        fn default() -> &'a TimePoint {
            <TimePoint as ::protobuf::Message>::default_instance()
        }
    }

    impl TimePoint {
        pub fn new() -> TimePoint {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "height",
                |m: &TimePoint| { &m.height },
                |m: &mut TimePoint| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "index",
                |m: &TimePoint| { &m.index },
                |m: &mut TimePoint| { &mut m.index },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimePoint>(
                "TransactionValue.TimePoint",
                18,
                fields,
            )
        }
    }

    impl ::protobuf::Message for TimePoint {
        const NAME: &'static str = "TimePoint";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while !is.eof()? {
                let tag = is.read_raw_varint32()?;
                match tag {
                    8 => {
                        self.height = is.read_int64()?;
                    },
                    16 => {
                        self.index = is.read_int64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.height != 0 {
                my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::rt::WireType::Varint);
            }
            if self.index != 0 {
                my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::rt::WireType::Varint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
            self.cached_size.set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.height != 0 {
                os.write_int64(1, self.height)?;
            }
            if self.index != 0 {
                os.write_int64(2, self.index)?;
            }
            os.write_unknown_fields(self.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn new() -> TimePoint {
            TimePoint::new()
        }

        fn default_instance() -> &'static TimePoint {
            static instance: TimePoint = TimePoint {
                height: 0,
                index: 0,
                unknown_fields: ::protobuf::UnknownFields::new(),
                cached_size: ::protobuf::rt::CachedSize::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TimePoint {

        fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
            ::protobuf::reflect::MessageDescriptor::new_generated_2(super::file_descriptor(), 11)
        }
    }

    impl ::protobuf::Clear for TimePoint {
        fn clear(&mut self) {
            self.height = 0;
            self.index = 0;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Display for TimePoint {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TimePoint {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ChainEventData)
pub struct ChainEventData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ChainEventData.event_id)
    pub event_id: ::std::string::String,
    // @@protoc_insertion_point(field:p2p.ChainEventData.attributes)
    pub attributes: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ChainEventData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ChainEventData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainEventData {
    fn default() -> &'a ChainEventData {
        <ChainEventData as ::protobuf::Message>::default_instance()
    }
}

impl ChainEventData {
    pub fn new() -> ChainEventData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_id",
            |m: &ChainEventData| { &m.event_id },
            |m: &mut ChainEventData| { &mut m.event_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attributes",
            |m: &ChainEventData| { &m.attributes },
            |m: &mut ChainEventData| { &mut m.attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChainEventData>(
            "ChainEventData",
            11,
            fields,
        )
    }
}

impl ::protobuf::Message for ChainEventData {
    const NAME: &'static str = "ChainEventData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    self.event_id = is.read_string()?;
                },
                18 => {
                    self.attributes = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.event_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.event_id);
        }
        if !self.attributes.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.attributes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.event_id.is_empty() {
            os.write_string(1, &self.event_id)?;
        }
        if !self.attributes.is_empty() {
            os.write_string(2, &self.attributes)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ChainEventData {
        ChainEventData::new()
    }

    fn default_instance() -> &'static ChainEventData {
        static instance: ChainEventData = ChainEventData {
            event_id: ::std::string::String::new(),
            attributes: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChainEventData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 12)
    }
}

impl ::protobuf::Clear for ChainEventData {
    fn clear(&mut self) {
        self.event_id.clear();
        self.attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ChainEventData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainEventData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.EmitShowInfoData)
pub struct EmitShowInfoData {
    // message fields
    // @@protoc_insertion_point(field:p2p.EmitShowInfoData.type)
    pub field_type: ::protobuf::EnumOrUnknown<emit_show_info_data::ShowInfoType>,
    // @@protoc_insertion_point(field:p2p.EmitShowInfoData.data)
    pub data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.EmitShowInfoData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.EmitShowInfoData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmitShowInfoData {
    fn default() -> &'a EmitShowInfoData {
        <EmitShowInfoData as ::protobuf::Message>::default_instance()
    }
}

impl EmitShowInfoData {
    pub fn new() -> EmitShowInfoData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &EmitShowInfoData| { &m.field_type },
            |m: &mut EmitShowInfoData| { &mut m.field_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &EmitShowInfoData| { &m.data },
            |m: &mut EmitShowInfoData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmitShowInfoData>(
            "EmitShowInfoData",
            12,
            fields,
        )
    }
}

impl ::protobuf::Message for EmitShowInfoData {
    const NAME: &'static str = "EmitShowInfoData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                8 => {
                    self.field_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field_type != ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field_type != ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.field_type))?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> EmitShowInfoData {
        EmitShowInfoData::new()
    }

    fn default_instance() -> &'static EmitShowInfoData {
        static instance: EmitShowInfoData = EmitShowInfoData {
            field_type: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmitShowInfoData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 13)
    }
}

impl ::protobuf::Clear for EmitShowInfoData {
    fn clear(&mut self) {
        self.field_type = ::protobuf::EnumOrUnknown::new(emit_show_info_data::ShowInfoType::LOG_INFO);
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for EmitShowInfoData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmitShowInfoData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `EmitShowInfoData`
pub mod emit_show_info_data {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:p2p.EmitShowInfoData.ShowInfoType)
    pub enum ShowInfoType {
        // @@protoc_insertion_point(enum_value:p2p.EmitShowInfoData.ShowInfoType.LOG_INFO)
        LOG_INFO = 0,
        // @@protoc_insertion_point(enum_value:p2p.EmitShowInfoData.ShowInfoType.EVENT_INFO)
        EVENT_INFO = 1,
    }

    impl ::protobuf::Enum for ShowInfoType {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ShowInfoType> {
            match value {
                0 => ::std::option::Option::Some(ShowInfoType::LOG_INFO),
                1 => ::std::option::Option::Some(ShowInfoType::EVENT_INFO),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [ShowInfoType] = &[
                ShowInfoType::LOG_INFO,
                ShowInfoType::EVENT_INFO,
            ];
            values
        }
    }

    impl ::protobuf::EnumFull for ShowInfoType {
        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 1)
        }
    }

    impl ::std::default::Default for ShowInfoType {
        fn default() -> Self {
            ShowInfoType::LOG_INFO
        }
    }

    impl ShowInfoType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ShowInfoType>("EmitShowInfoData.ShowInfoType", 1)
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.GetBalanceAckData)
pub struct GetBalanceAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.GetBalanceAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.GetBalanceAckData.balance)
    pub balance: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.GetBalanceAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.GetBalanceAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBalanceAckData {
    fn default() -> &'a GetBalanceAckData {
        <GetBalanceAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetBalanceAckData {
    pub fn new() -> GetBalanceAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &GetBalanceAckData| { &m.resp },
            |m: &mut GetBalanceAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "balance",
            |m: &GetBalanceAckData| { &m.balance },
            |m: &mut GetBalanceAckData| { &mut m.balance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBalanceAckData>(
            "GetBalanceAckData",
            13,
            fields,
        )
    }
}

impl ::protobuf::Message for GetBalanceAckData {
    const NAME: &'static str = "GetBalanceAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.balance = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.balance);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.balance.is_empty() {
            os.write_string(2, &self.balance)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetBalanceAckData {
        GetBalanceAckData::new()
    }

    fn default_instance() -> &'static GetBalanceAckData {
        static instance: GetBalanceAckData = GetBalanceAckData {
            resp: ::protobuf::MessageField::none(),
            balance: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBalanceAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 14)
    }
}

impl ::protobuf::Clear for GetBalanceAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.balance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for GetBalanceAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBalanceAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.GetPKAckData)
pub struct GetPKAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.GetPKAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.GetPKAckData.pk)
    pub pk: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.GetPKAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.GetPKAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPKAckData {
    fn default() -> &'a GetPKAckData {
        <GetPKAckData as ::protobuf::Message>::default_instance()
    }
}

impl GetPKAckData {
    pub fn new() -> GetPKAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &GetPKAckData| { &m.resp },
            |m: &mut GetPKAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &GetPKAckData| { &m.pk },
            |m: &mut GetPKAckData| { &mut m.pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPKAckData>(
            "GetPKAckData",
            14,
            fields,
        )
    }
}

impl ::protobuf::Message for GetPKAckData {
    const NAME: &'static str = "GetPKAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.pk = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.pk.is_empty() {
            os.write_string(2, &self.pk)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> GetPKAckData {
        GetPKAckData::new()
    }

    fn default_instance() -> &'static GetPKAckData {
        static instance: GetPKAckData = GetPKAckData {
            resp: ::protobuf::MessageField::none(),
            pk: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPKAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 15)
    }
}

impl ::protobuf::Clear for GetPKAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.pk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for GetPKAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPKAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.RePublishDIDAckData)
pub struct RePublishDIDAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.RePublishDIDAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.RePublishDIDAckData.pk)
    pub pk: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.RePublishDIDAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.RePublishDIDAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a RePublishDIDAckData {
    fn default() -> &'a RePublishDIDAckData {
        <RePublishDIDAckData as ::protobuf::Message>::default_instance()
    }
}

impl RePublishDIDAckData {
    pub fn new() -> RePublishDIDAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &RePublishDIDAckData| { &m.resp },
            |m: &mut RePublishDIDAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &RePublishDIDAckData| { &m.pk },
            |m: &mut RePublishDIDAckData| { &mut m.pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RePublishDIDAckData>(
            "RePublishDIDAckData",
            15,
            fields,
        )
    }
}

impl ::protobuf::Message for RePublishDIDAckData {
    const NAME: &'static str = "RePublishDIDAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.pk = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.pk.is_empty() {
            os.write_string(2, &self.pk)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> RePublishDIDAckData {
        RePublishDIDAckData::new()
    }

    fn default_instance() -> &'static RePublishDIDAckData {
        static instance: RePublishDIDAckData = RePublishDIDAckData {
            resp: ::protobuf::MessageField::none(),
            pk: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RePublishDIDAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 16)
    }
}

impl ::protobuf::Clear for RePublishDIDAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.pk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for RePublishDIDAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RePublishDIDAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.ReconnectAckData)
pub struct ReconnectAckData {
    // message fields
    // @@protoc_insertion_point(field:p2p.ReconnectAckData.resp)
    pub resp: ::protobuf::MessageField<Response>,
    // @@protoc_insertion_point(field:p2p.ReconnectAckData.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.ReconnectAckData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.ReconnectAckData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReconnectAckData {
    fn default() -> &'a ReconnectAckData {
        <ReconnectAckData as ::protobuf::Message>::default_instance()
    }
}

impl ReconnectAckData {
    pub fn new() -> ReconnectAckData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Response>(
            "resp",
            |m: &ReconnectAckData| { &m.resp },
            |m: &mut ReconnectAckData| { &mut m.resp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ReconnectAckData| { &m.message },
            |m: &mut ReconnectAckData| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReconnectAckData>(
            "ReconnectAckData",
            16,
            fields,
        )
    }
}

impl ::protobuf::Message for ReconnectAckData {
    const NAME: &'static str = "ReconnectAckData";

    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.resp)?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.resp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ReconnectAckData {
        ReconnectAckData::new()
    }

    fn default_instance() -> &'static ReconnectAckData {
        static instance: ReconnectAckData = ReconnectAckData {
            resp: ::protobuf::MessageField::none(),
            message: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReconnectAckData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 17)
    }
}

impl ::protobuf::Clear for ReconnectAckData {
    fn clear(&mut self) {
        self.resp.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for ReconnectAckData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReconnectAckData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:p2p.StopChargeData)
pub struct StopChargeData {
    // message fields
    // @@protoc_insertion_point(field:p2p.StopChargeData.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:p2p.StopChargeData.unknown_fields)
    pub unknown_fields: ::protobuf::UnknownFields,
    // @@protoc_insertion_point(special_field:p2p.StopChargeData.cached_size)
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopChargeData {
    fn default() -> &'a StopChargeData {
        <StopChargeData as ::protobuf::Message>::default_instance()
    }
}

impl StopChargeData {
    pub fn new() -> StopChargeData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &StopChargeData| { &m.success },
            |m: &mut StopChargeData| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StopChargeData>(
            "StopChargeData",
            17,
            fields,
        )
    }
}

impl ::protobuf::Message for StopChargeData {
    const NAME: &'static str = "StopChargeData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while !is.eof()? {
            let tag = is.read_raw_varint32()?;
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.cached_size.set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> StopChargeData {
        StopChargeData::new()
    }

    fn default_instance() -> &'static StopChargeData {
        static instance: StopChargeData = StopChargeData {
            success: false,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StopChargeData {

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 18)
    }
}

impl ::protobuf::Clear for StopChargeData {
    fn clear(&mut self) {
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Display for StopChargeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopChargeData {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

///  Events types
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:p2p.EventType)
pub enum EventType {
    // @@protoc_insertion_point(enum_value:p2p.EventType.CHARGING_STATUS)
    CHARGING_STATUS = 0,
    // @@protoc_insertion_point(enum_value:p2p.EventType.SERVICE_REQUEST_ACK)
    SERVICE_REQUEST_ACK = 1,
    // @@protoc_insertion_point(enum_value:p2p.EventType.SERVICE_DELIVERY_ACK)
    SERVICE_DELIVERY_ACK = 2,
    // @@protoc_insertion_point(enum_value:p2p.EventType.SERVICE_REQUESTED)
    SERVICE_REQUESTED = 3,
    // @@protoc_insertion_point(enum_value:p2p.EventType.SERVICE_DELIVERED)
    SERVICE_DELIVERED = 4,
    // @@protoc_insertion_point(enum_value:p2p.EventType.STOP_CHARGE)
    STOP_CHARGE = 5,
    // @@protoc_insertion_point(enum_value:p2p.EventType.STOP_CHARGE_RESPONSE)
    STOP_CHARGE_RESPONSE = 6,
    // @@protoc_insertion_point(enum_value:p2p.EventType.IDENTITY_CHALLENGE)
    IDENTITY_CHALLENGE = 7,
    // @@protoc_insertion_point(enum_value:p2p.EventType.IDENTITY_RESPONSE)
    IDENTITY_RESPONSE = 8,
    // @@protoc_insertion_point(enum_value:p2p.EventType.RECEIVE_CHAIN_EVENT)
    RECEIVE_CHAIN_EVENT = 9,
    // @@protoc_insertion_point(enum_value:p2p.EventType.EMIT_SHOW_INFO)
    EMIT_SHOW_INFO = 10,
    // @@protoc_insertion_point(enum_value:p2p.EventType.GET_BALANCE)
    GET_BALANCE = 11,
    // @@protoc_insertion_point(enum_value:p2p.EventType.GET_BALANCE_ACK)
    GET_BALANCE_ACK = 12,
    // @@protoc_insertion_point(enum_value:p2p.EventType.GET_PK)
    GET_PK = 13,
    // @@protoc_insertion_point(enum_value:p2p.EventType.GET_PK_ACK)
    GET_PK_ACK = 14,
    // @@protoc_insertion_point(enum_value:p2p.EventType.REPUBLISH_DID)
    REPUBLISH_DID = 15,
    // @@protoc_insertion_point(enum_value:p2p.EventType.REPUBLISH_DID_ACK)
    REPUBLISH_DID_ACK = 16,
    // @@protoc_insertion_point(enum_value:p2p.EventType.RECONNECT)
    RECONNECT = 17,
    // @@protoc_insertion_point(enum_value:p2p.EventType.RECONNECT_ACK)
    RECONNECT_ACK = 18,
    // @@protoc_insertion_point(enum_value:p2p.EventType.PEER_CONNECTED)
    PEER_CONNECTED = 19,
    // @@protoc_insertion_point(enum_value:p2p.EventType.PEER_SUBSCRIBED)
    PEER_SUBSCRIBED = 20,
    // @@protoc_insertion_point(enum_value:p2p.EventType.PEER_CONNECTION_FAILED)
    PEER_CONNECTION_FAILED = 21,
    // @@protoc_insertion_point(enum_value:p2p.EventType.PEER_SUBSCRIPTION_FAILED)
    PEER_SUBSCRIPTION_FAILED = 22,
}

impl ::protobuf::Enum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::CHARGING_STATUS),
            1 => ::std::option::Option::Some(EventType::SERVICE_REQUEST_ACK),
            2 => ::std::option::Option::Some(EventType::SERVICE_DELIVERY_ACK),
            3 => ::std::option::Option::Some(EventType::SERVICE_REQUESTED),
            4 => ::std::option::Option::Some(EventType::SERVICE_DELIVERED),
            5 => ::std::option::Option::Some(EventType::STOP_CHARGE),
            6 => ::std::option::Option::Some(EventType::STOP_CHARGE_RESPONSE),
            7 => ::std::option::Option::Some(EventType::IDENTITY_CHALLENGE),
            8 => ::std::option::Option::Some(EventType::IDENTITY_RESPONSE),
            9 => ::std::option::Option::Some(EventType::RECEIVE_CHAIN_EVENT),
            10 => ::std::option::Option::Some(EventType::EMIT_SHOW_INFO),
            11 => ::std::option::Option::Some(EventType::GET_BALANCE),
            12 => ::std::option::Option::Some(EventType::GET_BALANCE_ACK),
            13 => ::std::option::Option::Some(EventType::GET_PK),
            14 => ::std::option::Option::Some(EventType::GET_PK_ACK),
            15 => ::std::option::Option::Some(EventType::REPUBLISH_DID),
            16 => ::std::option::Option::Some(EventType::REPUBLISH_DID_ACK),
            17 => ::std::option::Option::Some(EventType::RECONNECT),
            18 => ::std::option::Option::Some(EventType::RECONNECT_ACK),
            19 => ::std::option::Option::Some(EventType::PEER_CONNECTED),
            20 => ::std::option::Option::Some(EventType::PEER_SUBSCRIBED),
            21 => ::std::option::Option::Some(EventType::PEER_CONNECTION_FAILED),
            22 => ::std::option::Option::Some(EventType::PEER_SUBSCRIPTION_FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::CHARGING_STATUS,
            EventType::SERVICE_REQUEST_ACK,
            EventType::SERVICE_DELIVERY_ACK,
            EventType::SERVICE_REQUESTED,
            EventType::SERVICE_DELIVERED,
            EventType::STOP_CHARGE,
            EventType::STOP_CHARGE_RESPONSE,
            EventType::IDENTITY_CHALLENGE,
            EventType::IDENTITY_RESPONSE,
            EventType::RECEIVE_CHAIN_EVENT,
            EventType::EMIT_SHOW_INFO,
            EventType::GET_BALANCE,
            EventType::GET_BALANCE_ACK,
            EventType::GET_PK,
            EventType::GET_PK_ACK,
            EventType::REPUBLISH_DID,
            EventType::REPUBLISH_DID_ACK,
            EventType::RECONNECT,
            EventType::RECONNECT_ACK,
            EventType::PEER_CONNECTED,
            EventType::PEER_SUBSCRIBED,
            EventType::PEER_CONNECTION_FAILED,
            EventType::PEER_SUBSCRIPTION_FAILED,
        ];
        values
    }
}

impl ::protobuf::EnumFull for EventType {
    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 0)
    }
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::CHARGING_STATUS
    }
}

impl EventType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<EventType>("EventType", 0)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18p2p_message_format.proto\x12\x03p2p\"\xa8\t\n\x05Event\x12)\n\x08e\
    vent_id\x18\x01\x20\x01(\x0e2\x0e.p2p.EventTypeR\x07eventId\x12K\n\x14ch\
    arging_status_data\x18\x02\x20\x01(\x0b2\x17.p2p.ChargingStatusDataH\0R\
    \x12chargingStatusData\x12?\n\x10service_ack_data\x18\x03\x20\x01(\x0b2\
    \x13.p2p.ServiceAckDataH\0R\x0eserviceAckData\x12Q\n\x16service_requeste\
    d_data\x18\x04\x20\x01(\x0b2\x19.p2p.ServiceRequestedDataH\0R\x14service\
    RequestedData\x12Q\n\x16service_delivered_data\x18\x05\x20\x01(\x0b2\x19\
    .p2p.ServiceDeliveredDataH\0R\x14serviceDeliveredData\x12?\n\x10stop_cha\
    rge_data\x18\x06\x20\x01(\x0b2\x13.p2p.StopChargeDataH\0R\x0estopChargeD\
    ata\x12P\n\x15stop_charge_resp_data\x18\x07\x20\x01(\x0b2\x1b.p2p.StopCh\
    argeResponseDataH\0R\x12stopChargeRespData\x12T\n\x17identity_challenge_\
    data\x18\x08\x20\x01(\x0b2\x1a.p2p.IdentityChallengeDataH\0R\x15identity\
    ChallengeData\x12Q\n\x16identity_response_data\x18\t\x20\x01(\x0b2\x19.p\
    2p.IdentityResponseDataH\0R\x14identityResponseData\x12?\n\x10chain_even\
    t_data\x18\n\x20\x01(\x0b2\x13.p2p.ChainEventDataH\0R\x0echainEventData\
    \x12F\n\x13emit_show_info_data\x18\x0b\x20\x01(\x0b2\x15.p2p.EmitShowInf\
    oDataH\0R\x10emitShowInfoData\x12I\n\x14get_balance_ack_data\x18\x0c\x20\
    \x01(\x0b2\x16.p2p.GetBalanceAckDataH\0R\x11getBalanceAckData\x12:\n\x0f\
    get_pk_ack_data\x18\r\x20\x01(\x0b2\x11.p2p.GetPKAckDataH\0R\x0cgetPkAck\
    Data\x12H\n\x12republish_ack_data\x18\x0e\x20\x01(\x0b2\x18.p2p.RePublis\
    hDIDAckDataH\0R\x10republishAckData\x12E\n\x12reconnect_ack_data\x18\x0f\
    \x20\x01(\x0b2\x15.p2p.ReconnectAckDataH\0R\x10reconnectAckData\x12[\n\
    \x1aservice_requested_ack_data\x18\x10\x20\x01(\x0b2\x1c.p2p.ServiceRequ\
    estedAckDataH\0R\x17serviceRequestedAckDataB\x06\n\x04data\"\xa9\x01\n\
    \x12ChargingStatusData\x12\x1a\n\x08progress\x18\x01\x20\x01(\x02R\x08pr\
    ogress\x12'\n\x0fcharging_period\x18\x02\x20\x01(\tR\x0echargingPeriod\
    \x12-\n\x12energy_consumption\x18\x03\x20\x01(\tR\x11energyConsumption\
    \x12\x1f\n\x0btoken_spent\x18\x04\x20\x01(\tR\ntokenSpent\"3\n\x0eServic\
    eAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\"Y\
    \n\x17ServiceRequestedAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p\
    .ResponseR\x04resp\x12\x1b\n\twait_time\x18\x02\x20\x01(\x03R\x08waitTim\
    e\"w\n\x14ServiceRequestedData\x12\x1a\n\x08consumer\x18\x01\x20\x01(\tR\
    \x08consumer\x12\x1a\n\x08provider\x18\x02\x20\x01(\tR\x08provider\x12'\
    \n\x0ftoken_deposited\x18\x03\x20\x01(\tR\x0etokenDeposited\"\xbc\x01\n\
    \x14ServiceDeliveredData\x12\x1a\n\x08consumer\x18\x01\x20\x01(\tR\x08co\
    nsumer\x12\x1a\n\x08provider\x18\x02\x20\x01(\tR\x08provider\x126\n\x0br\
    efund_info\x18\x03\x20\x01(\x0b2\x15.p2p.TransactionValueR\nrefundInfo\
    \x124\n\nspent_info\x18\x04\x20\x01(\x0b2\x15.p2p.TransactionValueR\tspe\
    ntInfo\";\n\x16StopChargeResponseData\x12!\n\x04resp\x18\x01\x20\x01(\
    \x0b2\r.p2p.ResponseR\x04resp\"6\n\x15IdentityChallengeData\x12\x1d\n\np\
    lain_data\x18\x01\x20\x01(\tR\tplainData\"W\n\x14IdentityResponseData\
    \x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\x1c\n\
    \tsignature\x18\x03\x20\x01(\tR\tsignature\":\n\x08Response\x12\x14\n\
    \x05error\x18\x01\x20\x01(\x08R\x05error\x12\x18\n\x07message\x18\x02\
    \x20\x01(\tR\x07message\"\xe0\x01\n\x10TransactionValue\x12\x1b\n\ttoken\
    _num\x18\x01\x20\x01(\tR\x08tokenNum\x12\x17\n\x07tx_hash\x18\x02\x20\
    \x01(\tR\x06txHash\x12>\n\ntime_point\x18\x03\x20\x01(\x0b2\x1f.p2p.Tran\
    sactionValue.TimePointR\ttimePoint\x12\x1b\n\tcall_hash\x18\x04\x20\x01(\
    \tR\x08callHash\x1a9\n\tTimePoint\x12\x16\n\x06height\x18\x01\x20\x01(\
    \x03R\x06height\x12\x14\n\x05index\x18\x02\x20\x01(\x03R\x05index\"K\n\
    \x0eChainEventData\x12\x19\n\x08event_id\x18\x01\x20\x01(\tR\x07eventId\
    \x12\x1e\n\nattributes\x18\x02\x20\x01(\tR\nattributes\"\x8c\x01\n\x10Em\
    itShowInfoData\x126\n\x04type\x18\x01\x20\x01(\x0e2\".p2p.EmitShowInfoDa\
    ta.ShowInfoTypeR\x04type\x12\x12\n\x04data\x18\x02\x20\x01(\tR\x04data\"\
    ,\n\x0cShowInfoType\x12\x0c\n\x08LOG_INFO\x10\0\x12\x0e\n\nEVENT_INFO\
    \x10\x01\"P\n\x11GetBalanceAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\
    \r.p2p.ResponseR\x04resp\x12\x18\n\x07balance\x18\x02\x20\x01(\tR\x07bal\
    ance\"A\n\x0cGetPKAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.Res\
    ponseR\x04resp\x12\x0e\n\x02pk\x18\x02\x20\x01(\tR\x02pk\"H\n\x13RePubli\
    shDIDAckData\x12!\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04res\
    p\x12\x0e\n\x02pk\x18\x02\x20\x01(\tR\x02pk\"O\n\x10ReconnectAckData\x12\
    !\n\x04resp\x18\x01\x20\x01(\x0b2\r.p2p.ResponseR\x04resp\x12\x18\n\x07m\
    essage\x18\x02\x20\x01(\tR\x07message\"*\n\x0eStopChargeData\x12\x18\n\
    \x07success\x18\x01\x20\x01(\x08R\x07success*\xf9\x03\n\tEventType\x12\
    \x13\n\x0fCHARGING_STATUS\x10\0\x12\x17\n\x13SERVICE_REQUEST_ACK\x10\x01\
    \x12\x18\n\x14SERVICE_DELIVERY_ACK\x10\x02\x12\x15\n\x11SERVICE_REQUESTE\
    D\x10\x03\x12\x15\n\x11SERVICE_DELIVERED\x10\x04\x12\x0f\n\x0bSTOP_CHARG\
    E\x10\x05\x12\x18\n\x14STOP_CHARGE_RESPONSE\x10\x06\x12\x16\n\x12IDENTIT\
    Y_CHALLENGE\x10\x07\x12\x15\n\x11IDENTITY_RESPONSE\x10\x08\x12\x17\n\x13\
    RECEIVE_CHAIN_EVENT\x10\t\x12\x12\n\x0eEMIT_SHOW_INFO\x10\n\x12\x0f\n\
    \x0bGET_BALANCE\x10\x0b\x12\x13\n\x0fGET_BALANCE_ACK\x10\x0c\x12\n\n\x06\
    GET_PK\x10\r\x12\x0e\n\nGET_PK_ACK\x10\x0e\x12\x11\n\rREPUBLISH_DID\x10\
    \x0f\x12\x15\n\x11REPUBLISH_DID_ACK\x10\x10\x12\r\n\tRECONNECT\x10\x11\
    \x12\x11\n\rRECONNECT_ACK\x10\x12\x12\x12\n\x0ePEER_CONNECTED\x10\x13\
    \x12\x13\n\x0fPEER_SUBSCRIBED\x10\x14\x12\x1a\n\x16PEER_CONNECTION_FAILE\
    D\x10\x15\x12\x1c\n\x18PEER_SUBSCRIPTION_FAILED\x10\x16BWZUgithub.com/pe\
    aqnetwork/peaq-network-ev-charging-message-format/golang/message;message\
    J\xdd%\n\x07\x12\x05\0\0\x97\x01,\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x0c\n\x08\n\x01\x08\x12\x03\x03\0l\n\t\n\x02\
    \x08\x0b\x12\x03\x03\0l\n\x1a\n\x02\x05\0\x12\x04\x06\0%\x01\x1a\x0e\x20\
    Events\x20types\n\n\n\n\x03\x05\0\x01\x12\x03\x06\x05\x0e\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x07\x02\x16\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\
    \x02\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x14\x15\n\x0b\n\x04\x05\
    \0\x02\x01\x12\x03\x08\x02\x1a\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\
    \x02\x15\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\x18\x19\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\t\x02\x1b\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\
    \x02\x16\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t\x19\x1a\n\x0b\n\x04\x05\
    \0\x02\x03\x12\x03\n\x02\x18\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\n\x02\
    \x13\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n\x16\x17\n\x0b\n\x04\x05\0\
    \x02\x04\x12\x03\x0b\x02\x18\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0b\
    \x02\x13\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0b\x16\x17\n\x0b\n\x04\
    \x05\0\x02\x05\x12\x03\x0c\x02\x12\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\
    \x0c\x02\r\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x0c\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x06\x12\x03\r\x02\x1b\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\r\
    \x02\x16\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\r\x19\x1a\n\x0b\n\x04\x05\
    \0\x02\x07\x12\x03\x0e\x02\x19\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x0e\
    \x02\x14\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0e\x17\x18\n\x0b\n\x04\
    \x05\0\x02\x08\x12\x03\x0f\x02\x18\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\
    \x0f\x02\x13\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0f\x16\x17\n$\n\x04\
    \x05\0\x02\t\x12\x03\x12\x02\x1a\x1a\x17\x20For\x20substarte's\x20event\
    \n\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x12\x02\x15\n\x0c\n\x05\x05\0\x02\
    \t\x02\x12\x03\x12\x18\x19\n\x20\n\x04\x05\0\x02\n\x12\x03\x14\x02\x16\
    \x1a\x13\x20For\x20simulator\x20log\n\n\x0c\n\x05\x05\0\x02\n\x01\x12\
    \x03\x14\x02\x10\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x14\x13\x15\n$\n\
    \x04\x05\0\x02\x0b\x12\x03\x17\x02\x13\x1a\x17\x20For\x20simulator\x20ac\
    tions\n\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x17\x02\r\n\x0c\n\x05\x05\
    \0\x02\x0b\x02\x12\x03\x17\x10\x12\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x18\
    \x02\x17\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x18\x02\x11\n\x0c\n\x05\
    \x05\0\x02\x0c\x02\x12\x03\x18\x14\x16\n\x0b\n\x04\x05\0\x02\r\x12\x03\
    \x19\x02\x0e\n\x0c\n\x05\x05\0\x02\r\x01\x12\x03\x19\x02\x08\n\x0c\n\x05\
    \x05\0\x02\r\x02\x12\x03\x19\x0b\r\n\x0b\n\x04\x05\0\x02\x0e\x12\x03\x1a\
    \x02\x12\n\x0c\n\x05\x05\0\x02\x0e\x01\x12\x03\x1a\x02\x0c\n\x0c\n\x05\
    \x05\0\x02\x0e\x02\x12\x03\x1a\x0f\x11\n\x0b\n\x04\x05\0\x02\x0f\x12\x03\
    \x1b\x02\x15\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\x03\x1b\x02\x0f\n\x0c\n\
    \x05\x05\0\x02\x0f\x02\x12\x03\x1b\x12\x14\n\x0b\n\x04\x05\0\x02\x10\x12\
    \x03\x1c\x02\x19\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\x1c\x02\x13\n\x0c\
    \n\x05\x05\0\x02\x10\x02\x12\x03\x1c\x16\x18\n\x0b\n\x04\x05\0\x02\x11\
    \x12\x03\x1d\x02\x11\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x1d\x02\x0b\n\
    \x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x1d\x0e\x10\n\x0b\n\x04\x05\0\x02\
    \x12\x12\x03\x1e\x02\x15\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x1e\x02\
    \x0f\n\x0c\n\x05\x05\0\x02\x12\x02\x12\x03\x1e\x12\x14\n\"\n\x04\x05\0\
    \x02\x13\x12\x03!\x02\x16\x1a\x15\x20For\x20charmev\x20actions\n\n\x0c\n\
    \x05\x05\0\x02\x13\x01\x12\x03!\x02\x10\n\x0c\n\x05\x05\0\x02\x13\x02\
    \x12\x03!\x13\x15\n\x0b\n\x04\x05\0\x02\x14\x12\x03\"\x02\x17\n\x0c\n\
    \x05\x05\0\x02\x14\x01\x12\x03\"\x02\x11\n\x0c\n\x05\x05\0\x02\x14\x02\
    \x12\x03\"\x14\x16\n\x0b\n\x04\x05\0\x02\x15\x12\x03#\x02\x1e\n\x0c\n\
    \x05\x05\0\x02\x15\x01\x12\x03#\x02\x18\n\x0c\n\x05\x05\0\x02\x15\x02\
    \x12\x03#\x1b\x1d\n\x0b\n\x04\x05\0\x02\x16\x12\x03$\x02\x20\n\x0c\n\x05\
    \x05\0\x02\x16\x01\x12\x03$\x02\x1a\n\x0c\n\x05\x05\0\x02\x16\x02\x12\
    \x03$\x1d\x1f\n\n\n\x02\x04\0\x12\x04'\0=\x01\n\n\n\x03\x04\0\x01\x12\
    \x03'\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03(\x02\x19\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03(\x02\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03(\x0c\x14\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03(\x17\x18\n\x0c\n\x04\x04\0\x08\0\
    \x12\x04)\x02<\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03)\x08\x0c\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03*\x040\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03*\
    \x04\x16\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\x17+\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03*./\n\x0b\n\x04\x04\0\x02\x02\x12\x03+\x04(\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03+\x04\x12\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03+\x13#\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03+&'\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03,\x044\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03,\x04\x18\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03,\x19/\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03,23\n\x0b\n\x04\x04\0\x02\x04\x12\x03-\x044\n\x0c\n\x05\x04\
    \0\x02\x04\x06\x12\x03-\x04\x18\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03-\
    \x19/\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03-23\n\x0b\n\x04\x04\0\x02\x05\
    \x12\x03.\x04(\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03.\x04\x12\n\x0c\n\
    \x05\x04\0\x02\x05\x01\x12\x03.\x13#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03.&'\n\x0b\n\x04\x04\0\x02\x06\x12\x03/\x045\n\x0c\n\x05\x04\0\x02\
    \x06\x06\x12\x03/\x04\x1a\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03/\x1b0\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03/34\n\x0b\n\x04\x04\0\x02\x07\x12\
    \x030\x046\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x030\x04\x19\n\x0c\n\x05\
    \x04\0\x02\x07\x01\x12\x030\x1a1\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x0304\
    5\n\x0b\n\x04\x04\0\x02\x08\x12\x031\x044\n\x0c\n\x05\x04\0\x02\x08\x06\
    \x12\x031\x04\x18\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x031\x19/\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03123\n\x0b\n\x04\x04\0\x02\t\x12\x033\x04)\
    \n\x0c\n\x05\x04\0\x02\t\x06\x12\x033\x04\x12\n\x0c\n\x05\x04\0\x02\t\
    \x01\x12\x033\x13#\n\x0c\n\x05\x04\0\x02\t\x03\x12\x033&(\n\x0b\n\x04\
    \x04\0\x02\n\x12\x034\x04.\n\x0c\n\x05\x04\0\x02\n\x06\x12\x034\x04\x14\
    \n\x0c\n\x05\x04\0\x02\n\x01\x12\x034\x15(\n\x0c\n\x05\x04\0\x02\n\x03\
    \x12\x034+-\n\x0b\n\x04\x04\0\x02\x0b\x12\x036\x040\n\x0c\n\x05\x04\0\
    \x02\x0b\x06\x12\x036\x04\x15\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x036\x16\
    *\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x036-/\n\x0b\n\x04\x04\0\x02\x0c\x12\
    \x037\x04&\n\x0c\n\x05\x04\0\x02\x0c\x06\x12\x037\x04\x10\n\x0c\n\x05\
    \x04\0\x02\x0c\x01\x12\x037\x11\x20\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\
    \x037#%\n\x0b\n\x04\x04\0\x02\r\x12\x038\x040\n\x0c\n\x05\x04\0\x02\r\
    \x06\x12\x038\x04\x17\n\x0c\n\x05\x04\0\x02\r\x01\x12\x038\x18*\n\x0c\n\
    \x05\x04\0\x02\r\x03\x12\x038-/\n\x0b\n\x04\x04\0\x02\x0e\x12\x039\x04-\
    \n\x0c\n\x05\x04\0\x02\x0e\x06\x12\x039\x04\x14\n\x0c\n\x05\x04\0\x02\
    \x0e\x01\x12\x039\x15'\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x039*,\n\x0b\n\
    \x04\x04\0\x02\x0f\x12\x03;\x04<\n\x0c\n\x05\x04\0\x02\x0f\x06\x12\x03;\
    \x04\x1b\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03;\x1c6\n\x0c\n\x05\x04\0\
    \x02\x0f\x03\x12\x03;9;\n\n\n\x02\x04\x01\x12\x04?\0D\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03?\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03@\x02\x15\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03@\x02\x07\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03@\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03@\x13\x14\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03A\x02\x1d\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03A\t\x18\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03A\x1b\x1c\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03B\x02\x20\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03B\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03B\t\x1b\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03B\x1e\x1f\n\x0b\n\x04\x04\x01\x02\x03\x12\x03C\x02\x19\n\
    \x0c\n\x05\x04\x01\x02\x03\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x03C\t\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03C\x17\x18\
    \n\t\n\x02\x04\x02\x12\x03F\0-\n\n\n\x03\x04\x02\x01\x12\x03F\x08\x16\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03F\x19+\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03F\x19!\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03F\"&\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03F)*\n\n\n\x02\x04\x03\x12\x04G\0J\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03G\x08\x1f\n\x0b\n\x04\x04\x03\x02\0\x12\x03H\x02\x14\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03H\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03H\x0b\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03H\x12\x13\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03I\x02\x16\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03I\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03I\x08\x11\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03I\x14\x15\n\n\n\x02\x04\x04\x12\
    \x04L\0P\x01\n\n\n\x03\x04\x04\x01\x12\x03L\x08\x1c\n\x0b\n\x04\x04\x04\
    \x02\0\x12\x03M\x02\x16\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03M\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03M\t\x11\n\x0c\n\x05\x04\x04\x02\0\
    \x03\x12\x03M\x14\x15\n\x0b\n\x04\x04\x04\x02\x01\x12\x03N\x02\x16\n\x0c\
    \n\x05\x04\x04\x02\x01\x05\x12\x03N\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03N\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03N\x14\x15\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x03O\x02\x1d\n\x0c\n\x05\x04\x04\x02\x02\
    \x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03O\t\x18\n\
    \x0c\n\x05\x04\x04\x02\x02\x03\x12\x03O\x1b\x1c\n\n\n\x02\x04\x05\x12\
    \x04R\0W\x01\n\n\n\x03\x04\x05\x01\x12\x03R\x08\x1c\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03S\x02\x16\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03S\x02\x08\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03S\t\x11\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03S\x14\x15\n\x0b\n\x04\x04\x05\x02\x01\x12\x03T\x02\x16\n\x0c\
    \n\x05\x04\x05\x02\x01\x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03T\t\x11\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03T\x14\x15\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x03U\x02#\n\x0c\n\x05\x04\x05\x02\x02\x06\
    \x12\x03U\x02\x12\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03U\x13\x1e\n\x0c\
    \n\x05\x04\x05\x02\x02\x03\x12\x03U!\"\n\x0b\n\x04\x04\x05\x02\x03\x12\
    \x03V\x02\"\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\x03V\x02\x12\n\x0c\n\x05\
    \x04\x05\x02\x03\x01\x12\x03V\x13\x1d\n\x0c\n\x05\x04\x05\x02\x03\x03\
    \x12\x03V\x20!\n\t\n\x02\x04\x06\x12\x03Y\05\n\n\n\x03\x04\x06\x01\x12\
    \x03Y\x08\x1e\n\x0b\n\x04\x04\x06\x02\0\x12\x03Y!3\n\x0c\n\x05\x04\x06\
    \x02\0\x06\x12\x03Y!)\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03Y*.\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03Y12\n\t\n\x02\x04\x07\x12\x03[\08\n\n\n\
    \x03\x04\x07\x01\x12\x03[\x08\x1d\n\x0b\n\x04\x04\x07\x02\0\x12\x03[\x20\
    6\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03[\x20&\n\x0c\n\x05\x04\x07\x02\0\
    \x01\x12\x03['1\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03[45\n\n\n\x02\x04\
    \x08\x12\x04]\0`\x01\n\n\n\x03\x04\x08\x01\x12\x03]\x08\x1c\n\x0b\n\x04\
    \x04\x08\x02\0\x12\x03^\x02\x14\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03^\
    \x02\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03^\x0b\x0f\n\x0c\n\x05\x04\
    \x08\x02\0\x03\x12\x03^\x12\x13\n\x0b\n\x04\x04\x08\x02\x01\x12\x03_\x02\
    \x17\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03_\x02\x08\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x03_\t\x12\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03_\
    \x15\x16\n\n\n\x02\x04\t\x12\x04b\0e\x01\n\n\n\x03\x04\t\x01\x12\x03b\
    \x08\x10\n\x0b\n\x04\x04\t\x02\0\x12\x03c\x02\x11\n\x0c\n\x05\x04\t\x02\
    \0\x05\x12\x03c\x02\x06\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03c\x07\x0c\n\
    \x0c\n\x05\x04\t\x02\0\x03\x12\x03c\x0f\x10\n\x0b\n\x04\x04\t\x02\x01\
    \x12\x03d\x02\x15\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03d\x02\x08\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03d\t\x10\n\x0c\n\x05\x04\t\x02\x01\x03\x12\
    \x03d\x13\x14\n\n\n\x02\x04\n\x12\x04g\0r\x01\n\n\n\x03\x04\n\x01\x12\
    \x03g\x08\x18\n\x0b\n\x04\x04\n\x02\0\x12\x03h\x02\x17\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x03h\x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03h\t\x12\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x03h\x15\x16\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03i\x02\x15\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03i\x02\x08\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03i\t\x10\n\x0c\n\x05\x04\n\x02\x01\x03\x12\
    \x03i\x13\x14\n\x0c\n\x04\x04\n\x03\0\x12\x04k\x02n\x03\n\x0c\n\x05\x04\
    \n\x03\0\x01\x12\x03k\n\x13\n\r\n\x06\x04\n\x03\0\x02\0\x12\x03l\x04\x15\
    \n\x0e\n\x07\x04\n\x03\0\x02\0\x05\x12\x03l\x04\t\n\x0e\n\x07\x04\n\x03\
    \0\x02\0\x01\x12\x03l\n\x10\n\x0e\n\x07\x04\n\x03\0\x02\0\x03\x12\x03l\
    \x13\x14\n\r\n\x06\x04\n\x03\0\x02\x01\x12\x03m\x04\x14\n\x0e\n\x07\x04\
    \n\x03\0\x02\x01\x05\x12\x03m\x04\t\n\x0e\n\x07\x04\n\x03\0\x02\x01\x01\
    \x12\x03m\n\x0f\n\x0e\n\x07\x04\n\x03\0\x02\x01\x03\x12\x03m\x12\x13\n\
    \x0b\n\x04\x04\n\x02\x02\x12\x03p\x02\x1b\n\x0c\n\x05\x04\n\x02\x02\x06\
    \x12\x03p\x02\x0b\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03p\x0c\x16\n\x0c\n\
    \x05\x04\n\x02\x02\x03\x12\x03p\x19\x1a\n\x0b\n\x04\x04\n\x02\x03\x12\
    \x03q\x02\x17\n\x0c\n\x05\x04\n\x02\x03\x05\x12\x03q\x02\x08\n\x0c\n\x05\
    \x04\n\x02\x03\x01\x12\x03q\t\x12\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03q\
    \x15\x16\n\n\n\x02\x04\x0b\x12\x04t\0w\x01\n\n\n\x03\x04\x0b\x01\x12\x03\
    t\x08\x16\n\x0b\n\x04\x04\x0b\x02\0\x12\x03u\x02\x16\n\x0c\n\x05\x04\x0b\
    \x02\0\x05\x12\x03u\x02\x08\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03u\t\x11\
    \n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03u\x14\x15\n\x0b\n\x04\x04\x0b\x02\
    \x01\x12\x03v\x02\x18\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03v\x02\x08\n\
    \x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03v\t\x13\n\x0c\n\x05\x04\x0b\x02\
    \x01\x03\x12\x03v\x16\x17\n\x0b\n\x02\x04\x0c\x12\x05y\0\x81\x01\x01\n\n\
    \n\x03\x04\x0c\x01\x12\x03y\x08\x18\n\x0c\n\x04\x04\x0c\x04\0\x12\x04z\
    \x02}\x03\n\x0c\n\x05\x04\x0c\x04\0\x01\x12\x03z\x07\x13\n\r\n\x06\x04\
    \x0c\x04\0\x02\0\x12\x03{\x04\x11\n\x0e\n\x07\x04\x0c\x04\0\x02\0\x01\
    \x12\x03{\x04\x0c\n\x0e\n\x07\x04\x0c\x04\0\x02\0\x02\x12\x03{\x0f\x10\n\
    \r\n\x06\x04\x0c\x04\0\x02\x01\x12\x03|\x04\x13\n\x0e\n\x07\x04\x0c\x04\
    \0\x02\x01\x01\x12\x03|\x04\x0e\n\x0e\n\x07\x04\x0c\x04\0\x02\x01\x02\
    \x12\x03|\x11\x12\n\x0b\n\x04\x04\x0c\x02\0\x12\x03\x7f\x02\x18\n\x0c\n\
    \x05\x04\x0c\x02\0\x06\x12\x03\x7f\x02\x0e\n\x0c\n\x05\x04\x0c\x02\0\x01\
    \x12\x03\x7f\x0f\x13\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03\x7f\x16\x17\n\
    \x0c\n\x04\x04\x0c\x02\x01\x12\x04\x80\x01\x02\x12\n\r\n\x05\x04\x0c\x02\
    \x01\x05\x12\x04\x80\x01\x02\x08\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\
    \x80\x01\t\r\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\x80\x01\x10\x11\n\x0c\
    \n\x02\x04\r\x12\x06\x83\x01\0\x86\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\
    \x83\x01\x08\x19\n\x0c\n\x04\x04\r\x02\0\x12\x04\x84\x01\x02\x14\n\r\n\
    \x05\x04\r\x02\0\x06\x12\x04\x84\x01\x02\n\n\r\n\x05\x04\r\x02\0\x01\x12\
    \x04\x84\x01\x0b\x0f\n\r\n\x05\x04\r\x02\0\x03\x12\x04\x84\x01\x12\x13\n\
    \x0c\n\x04\x04\r\x02\x01\x12\x04\x85\x01\x02\x15\n\r\n\x05\x04\r\x02\x01\
    \x05\x12\x04\x85\x01\x02\x08\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\x85\x01\
    \t\x10\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\x85\x01\x13\x14\n\x0c\n\x02\
    \x04\x0e\x12\x06\x88\x01\0\x8b\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\
    \x88\x01\x08\x14\n\x0c\n\x04\x04\x0e\x02\0\x12\x04\x89\x01\x02\x14\n\r\n\
    \x05\x04\x0e\x02\0\x06\x12\x04\x89\x01\x02\n\n\r\n\x05\x04\x0e\x02\0\x01\
    \x12\x04\x89\x01\x0b\x0f\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\x89\x01\x12\
    \x13\n\x0c\n\x04\x04\x0e\x02\x01\x12\x04\x8a\x01\x02\x10\n\r\n\x05\x04\
    \x0e\x02\x01\x05\x12\x04\x8a\x01\x02\x08\n\r\n\x05\x04\x0e\x02\x01\x01\
    \x12\x04\x8a\x01\t\x0b\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\x8a\x01\x0e\
    \x0f\n\x0c\n\x02\x04\x0f\x12\x06\x8d\x01\0\x90\x01\x01\n\x0b\n\x03\x04\
    \x0f\x01\x12\x04\x8d\x01\x08\x1b\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x8e\
    \x01\x02\x14\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x8e\x01\x02\n\n\r\n\x05\
    \x04\x0f\x02\0\x01\x12\x04\x8e\x01\x0b\x0f\n\r\n\x05\x04\x0f\x02\0\x03\
    \x12\x04\x8e\x01\x12\x13\n\x0c\n\x04\x04\x0f\x02\x01\x12\x04\x8f\x01\x02\
    \x10\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\x8f\x01\x02\x08\n\r\n\x05\x04\
    \x0f\x02\x01\x01\x12\x04\x8f\x01\t\x0b\n\r\n\x05\x04\x0f\x02\x01\x03\x12\
    \x04\x8f\x01\x0e\x0f\n\x0c\n\x02\x04\x10\x12\x06\x92\x01\0\x95\x01\x01\n\
    \x0b\n\x03\x04\x10\x01\x12\x04\x92\x01\x08\x18\n\x0c\n\x04\x04\x10\x02\0\
    \x12\x04\x93\x01\x02\x14\n\r\n\x05\x04\x10\x02\0\x06\x12\x04\x93\x01\x02\
    \n\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x93\x01\x0b\x0f\n\r\n\x05\x04\x10\
    \x02\0\x03\x12\x04\x93\x01\x12\x13\n\x0c\n\x04\x04\x10\x02\x01\x12\x04\
    \x94\x01\x02\x15\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\x94\x01\x02\x08\n\
    \r\n\x05\x04\x10\x02\x01\x01\x12\x04\x94\x01\t\x10\n\r\n\x05\x04\x10\x02\
    \x01\x03\x12\x04\x94\x01\x13\x14\n\n\n\x02\x04\x11\x12\x04\x97\x01\0,\n\
    \x0b\n\x03\x04\x11\x01\x12\x04\x97\x01\x08\x16\n\x0c\n\x04\x04\x11\x02\0\
    \x12\x04\x97\x01\x19*\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x97\x01\x19\
    \x1d\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\x97\x01\x1e%\n\r\n\x05\x04\x11\
    \x02\0\x03\x12\x04\x97\x01()b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(Event::generated_message_descriptor_data());
        messages.push(ChargingStatusData::generated_message_descriptor_data());
        messages.push(ServiceAckData::generated_message_descriptor_data());
        messages.push(ServiceRequestedAckData::generated_message_descriptor_data());
        messages.push(ServiceRequestedData::generated_message_descriptor_data());
        messages.push(ServiceDeliveredData::generated_message_descriptor_data());
        messages.push(StopChargeResponseData::generated_message_descriptor_data());
        messages.push(IdentityChallengeData::generated_message_descriptor_data());
        messages.push(IdentityResponseData::generated_message_descriptor_data());
        messages.push(Response::generated_message_descriptor_data());
        messages.push(TransactionValue::generated_message_descriptor_data());
        messages.push(ChainEventData::generated_message_descriptor_data());
        messages.push(EmitShowInfoData::generated_message_descriptor_data());
        messages.push(GetBalanceAckData::generated_message_descriptor_data());
        messages.push(GetPKAckData::generated_message_descriptor_data());
        messages.push(RePublishDIDAckData::generated_message_descriptor_data());
        messages.push(ReconnectAckData::generated_message_descriptor_data());
        messages.push(StopChargeData::generated_message_descriptor_data());
        messages.push(transaction_value::TimePoint::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        enums.push(EventType::generated_enum_descriptor_data());
        enums.push(emit_show_info_data::ShowInfoType::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
