syntax = "proto3";

package p2p;
option go_package = "github.com/peaqnetwork/peaq-network-ev-charging-message-format/golang/message;message";

// Events types
enum EventType {
  CHARGING_STATUS = 0;
  SERVICE_REQUEST_ACK = 1;
  SERVICE_DELIVERY_ACK = 2;
  SERVICE_REQUESTED = 3;
  SERVICE_DELIVERED = 4;
  STOP_CHARGE = 5;
  STOP_CHARGE_RESPONSE = 6;
  IDENTITY_CHALLENGE = 7;
  IDENTITY_RESPONSE = 8;

  // For substarte's event
  RECEIVE_CHAIN_EVENT = 9;
  // For simulator log
  EMIT_SHOW_INFO = 10;

  // For simulator actions
  GET_BALANCE = 11;
  GET_BALANCE_ACK = 12;
  GET_PK = 13;
  GET_PK_ACK = 14;
  REPUBLISH_DID = 15;
  REPUBLISH_DID_ACK = 16;
  RECONNECT = 17;
  RECONNECT_ACK = 18;

  // For charmev actions
  PEER_CONNECTED = 19;
  PEER_SUBSCRIBED = 20;
  PEER_CONNECTION_FAILED = 21;
  PEER_SUBSCRIPTION_FAILED = 22;
}

message Event {
  EventType event_id = 1;
  oneof data {
    ChargingStatusData charging_status_data = 2;
    ServiceAckData service_ack_data = 3;
    ServiceRequestedData service_requested_data = 4;
    ServiceDeliveredData service_delivered_data = 5;
    StopChargeData stop_charge_data = 6;
    StopChargeResponseData stop_charge_resp_data = 7;
    IdentityChallengeData identity_challenge_data = 8;
    IdentityResponseData identity_response_data = 9;

    ChainEventData chain_event_data = 10;
    EmitShowInfoData emit_show_info_data = 11;

    GetBalanceAckData get_balance_ack_data = 12;
    GetPKAckData get_pk_ack_data = 13;
    RePublishDIDAckData republish_ack_data = 14;
    ReconnectAckData reconnect_ack_data = 15;

    ServiceRequestedAckData service_requested_ack_data = 16;
  }
}

message ChargingStatusData {
  float progress = 1;
  string charging_period = 2;
  string energy_consumption = 3;
  string token_spent = 4;
}

message ServiceAckData { Response resp = 1; }
message ServiceRequestedAckData {
  Response resp = 1;
  int64 wait_time = 2;
}

message ServiceRequestedData {
  string consumer = 1;
  string provider = 2;
  string token_deposited = 3;
}

message ServiceDeliveredData {
  string consumer = 1;
  string provider = 2;
  TransactionValue refund_info = 3;
  TransactionValue spent_info = 4;
}

message StopChargeResponseData { Response resp = 1; }

message IdentityChallengeData { string plain_data = 1; }

message IdentityResponseData {
  Response resp = 1;
  string signature = 3;
}

message Response {
  bool error = 1;
  string message = 2;
}

message TransactionValue {
  string token_num = 1;
  string tx_hash = 2;

  message TimePoint {
    int64 height = 1;
    int64 index = 2;
  }

  TimePoint time_point = 3;
  string call_hash = 4;
}

message ChainEventData {
  string event_id = 1;
  string attributes = 2;
}

message EmitShowInfoData {
  enum ShowInfoType {
    LOG_INFO = 0;
    EVENT_INFO = 1;
  }

  ShowInfoType type = 1;
  string data = 2;
}

message GetBalanceAckData {
  Response resp = 1;
  string balance = 2;
}

message GetPKAckData {
  Response resp = 1;
  string pk = 2;
}

message RePublishDIDAckData {
  Response resp = 1;
  string pk = 2;
}

message ReconnectAckData {
  Response resp = 1;
  string message = 2;
}

message StopChargeData { bool success = 1; }
